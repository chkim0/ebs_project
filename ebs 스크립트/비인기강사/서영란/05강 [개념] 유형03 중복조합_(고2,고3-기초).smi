<SAMI>
<HEAD>
<TITLE>(주)기록법인상생 자막 2019</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=9925><P Class=KRCC>
여러분들의 눈높이에서 개념부터 문제 해결에 이르는 길까지 차근차근 설명해 드리도록 하겠습니다. EBS 수학 영역의 서영란입니다.
<SYNC Start=19429><P Class=KRCC>
드디어 우리 유형 세 번째, 중복조합의 시간에 다가왔는데요. 우선 개념을 배우기 전에 중복조합 하면 제일 먼저 떠오르는 단어가 뭐죠?
<SYNC Start=29752><P Class=KRCC>
조합입니다. 그래서 중복조합을 배우기 이전에 고등수학(하)에서 배웠던 조합의 내용을 잘 알고 계셔야 되는데요. 그래서 내용부터 한번 같이 볼게요.
<SYNC Start=39646><P Class=KRCC>
고등수학(하)에서는 조합을 배웠는데, 확률과 통계에서는 중복조합을 배운다. 그게 이번 시간에 배울 유형03에 대한 내용입니다.
<SYNC Start=48566><P Class=KRCC>
그러면 중복조합의 이름에서 공통된 부분이 조합이죠. 그래서 미리 알아야 할 개념, 조합부터 출발해 보도록 하겠습니다.
<SYNC Start=58293><P Class=KRCC>
미리 알아야 할 개념, 조합이에요. 조합은 여러분들이 이미 배우셨지만 무슨 뜻이냐면, 서로 다른 n개에서 r개를 선택만 해 주시면 돼요. 뭘 고려하지 않고?
<SYNC Start=69215><P Class=KRCC>
순서를 고려하지 않고. 그래서 특징이 있다면, 순열과 달리 순서를 고려하지 않고 단지 선택만 하는 것이라고 알고 계시면 되겠습니다.
<SYNC Start=79297><P Class=KRCC>
조합은 영어로 컴비네이션[combination]이어 가지고, combination의 맨 앞 글자인 C를 따와서 nCr로 표기를 하게 됩니다. 그러면 예시를 하나 볼게요.
<SYNC Start=89370><P Class=KRCC>
3C2는 도대체 무슨 뜻이냐. 서로 다른 3개 중에서 2개를 택해 오기만 하면 돼요. 그래서 3장의 숫자 카드 중에서 2장을 택하는 경우를 의미합니다.
<SYNC Start=101138><P Class=KRCC>
예시를 들어서 얘기를 해 보면, 1, 2, 3 중에서 2장의 카드 1, 2를 택했어요. 그런데 2, 1을 택하든 1, 2를 택하든 서로 어떤가요?
<SYNC Start=110979><P Class=KRCC>
결과는 선택만 한 것이기 때문에 달라지지 않죠. 그래서 이 2개의 결과는 같습니다. 이 2개의 결과가 서로 같다는 의미는 무슨 뜻이냐면, 순서가 고려되지 않아요.
<SYNC Start=122416><P Class=KRCC>
순서가 고려되지 않으니까 무엇을 의미하는 거다? 조합을 의미하는 거라는 사실을 알 수가 있습니다. 마찬가지 방식으로 3명의 후보가 있는데 대표 2명을 정하는 경우가 있어요.
<SYNC Start=135124><P Class=KRCC>
그러면 1번 후보, 2번 후보, 3번 후보가 있었는데 대표를 1, 2로 뽑고 2, 1로 뽑을 수가 있겠죠. 그런데 단지 둘의 직책이 똑같기 때문에 대표 1, 2나 대표 2, 1이나 결과는 서로 같습니다.
<SYNC Start=148271><P Class=KRCC>
그렇기 때문에 순서를 고려하지 않아서 조합이 되는 거예요. 그런데 순열에서는 어땠죠? 반장 1명, 부반장 1명. 이렇게 되어 있었기 때문에, 이 둘의 위치가 바뀌게 되면 직책이 바뀌게 되죠.
<SYNC Start=160587><P Class=KRCC>
그렇기 때문에 결과가 달라지죠. 그래서 순서가 고려된다고 해서 순열에서는 직책이 다른 경우에서 성립을 했었습니다. 이렇게 똑같이 그냥 대표 2명이다.
<SYNC Start=172204><P Class=KRCC>
직책이 똑같다. 그러면 순서가 중요하지 않기 때문에 조합을 활용함을 꼭 기억해 주셔야 돼요. 그러면 이제 조합하고 관련된 구체적인 내용들을 보면요.
<SYNC Start=184827><P Class=KRCC>
조합의 수가 있습니다. 조합의 수를 우리가 계산을 할 때 지금 보시면 순열의 기호로써 지금 정의가 되고 있어요. 조합을 구하기 위해서는 순열을 알아야 된다는 뜻이죠.
<SYNC Start=195464><P Class=KRCC>
그래서 우선 우리가 먼저 뭐부터 볼 거냐면, 순열의 수부터 한번 살펴보도록 할게요. 기억하시는지 모르겠지만, nPr. 무슨 뜻이었죠?
<SYNC Start=204841><P Class=KRCC>
서로 다른 n개에서 r개를 선택해 온 다음에. 그렇죠? 선택을 해 온 다음에, 그것들을 어떻게 했어요? 일렬로 나열했어요. 그래서 선택을 한 다음에 일렬로 나열하는 내용. 2가지가 포함됐었습니다.
<SYNC Start=220578><P Class=KRCC>
그런데 선택하는 경우의 수를 우리가 지금 배우는 거잖아요. 무엇이죠? 조합의 수죠. 그래서 이 선택하는 수는 내가 얻고자 하는 조합의 수 nCr이고요.
<SYNC Start=232151><P Class=KRCC>
일렬로 나열할 건데, 지금 몇 개를 나열할 건가요? r개를 나열할 거죠. r개를 나열하는 수는 r!이니까 nPr은 nCr에다가 r!을 곱한 값으로 정의가 됩니다.
<SYNC Start=245239><P Class=KRCC>
그러면 끝났네요. 우리가 원하는 것은 nCr인데, 이 값은 nPr을 r!로 나눈 값이고요. nPr은 무엇이었죠? nPr은 여러분이 그때 순열의 수를 이미 배우셨어요.
<SYNC Start=259829><P Class=KRCC>
n!을 (n-r)!로 나눈 값이었기 때문에 이제 여기에 r!로 나눈 값만 추가하면 조합의 수가 나오게 됩니다. 그래서 순열의 내용을 잘 알고 있어야지 조합의 내용도 정확하게 이해를 하실 수 있어요.
<SYNC Start=276429><P Class=KRCC>
그래서 nCr은 nPr을 r!로 나눈 값이 된다는 사실을 기억해 두시면 좋을 것 같습니다. 이제 그러면 조합의 수에 대해서도 간단히 언급을 했어요.
<SYNC Start=290476><P Class=KRCC>
조합의 수를 지나서 이제 드디어 우리가 이번 시간에 배울 중복조합의 내용을 봐야 되는데, 중복조합에서는 기호로 어떤 걸 쓰느냐면 H라는 기호를 써요.
<SYNC Start=301052><P Class=KRCC>
뭐의 약자냐면, 호모지니어스[Homogeneous]라는 것의 약자인데요. 다항식 말고 단항식에서 차수가 같은 항을 의미합니다.
<SYNC Start=309259><P Class=KRCC>
그래서 이 내용은 이제 뒤의 예제를 통해서 왜 그 단어를 쓰는지 설명할 거고요.
<SYNC Start=314210><P Class=KRCC>
어찌됐든 중복조합은 H라는 기호를 쓰는데, 이름에서 드러나듯이 서로 다른 n개에서 중복을 허락해서 r개를 택하는 것을 중복조합이라고 합니다.
<SYNC Start=326415><P Class=KRCC>
그러면 2H3은 무슨 뜻이냐면, 서로 다른 2개에서 중복을 허용해서 3개를 선택만 하겠다는 의미예요. 볼게요. 숫자 1, 2에서 중복을 허용해서 3개를 택하는 경우.
<SYNC Start=340180><P Class=KRCC>
이런 경우는 무엇이 있느냐. 1, 1, 1 이런 경우도 있겠죠. 중복을 허용했죠. 그다음에 1, 1, 2 이런 경우도 있겠죠. 또 뭐도 있을까요?
<SYNC Start=351070><P Class=KRCC>
1, 2, 2도 있을 거고요. 2, 2, 2 이렇게 선택하는 경우도 있을 거예요. 그렇죠? 이렇게 중복을 허용해서 선택만 하는 것을 무엇이라고 하느냐면, 중복조합이라고 합니다.
<SYNC Start=363165><P Class=KRCC>
‘그러면 선생님, 1, 2, 1은요?’하고 물어볼 수도 있어요. 1, 2, 1. 선택만 하는 것이기 때문에 순서는 중요하지 않아요. 그래서 이렇게 되는 경우는 이 경우와 같기 때문에
<SYNC Start=374525><P Class=KRCC>
여러분들은 이 4가지만 세주면 되겠습니다. 그다음 빨간색과 분홍색, 두 종류의 장미 중에서 세 송이를 선택하는 방법의 수. 제가 빨간색은 그냥 레드라고 표현하고요.
<SYNC Start=386518><P Class=KRCC>
분홍색은 핑크라고 표현을 할게요. 그러면 이 3송이를 빨강, 빨강, 빨강으로 표현을 하거나 아니면 빨강, 빨강, 분홍이 들어오거나 빨강, 분홍, 분홍이 오거나 아니면 분홍, 분홍, 분홍.
<SYNC Start=400674><P Class=KRCC>
이렇게 오겠죠. 그래서 서로 다른 2개의 종류 중에서 중복을 허용해서 3개를 선택한다는 것은, 지금 제가 나열한 이런 것들을 의미해요.
<SYNC Start=410169><P Class=KRCC>
이제 이런 것들을 센 개수가 뭐가 된다? 중복조합의 수, 2H3이 되겠죠. 그래서 2H3은 총 4개가 되겠네요. 4가지.
<SYNC Start=421426><P Class=KRCC>
그러면 매번 이렇게 직접 정의대로 세서 풀 거냐. 꼭 매번 정의대로 해 가지고 이렇게 세서 풀 필요는 없겠죠.
<SYNC Start=429240><P Class=KRCC>
그래서 세지 않고 얘는 정확히 계산이 어떻게 되는지, 중복조합의 수에 대해서 한번 살펴볼게요. 중복조합의 수를 지금 보시면 조합의 수로 계산을 한다는 걸 알 수 있어요.
<SYNC Start=440942><P Class=KRCC>
그러면 이 식이 어떻게 나오는지 제가 지금부터 예시를 통해서 설명해 보도록 하겠습니다. 숫자 1, 2에서 중복을 허용해서 3개를 택하는 경우의 수를 물어봤어요.
<SYNC Start=451845><P Class=KRCC>
그러면 여러분들은 분명히 이렇게 쓸 거예요, 아까처럼. 1, 1, 1. 1, 1, 2. 1, 2, 2. 그다음에 2, 2, 2. 아까 이렇게 있었죠?
<SYNC Start=466136><P Class=KRCC>
그러면 저는 이제 이걸 다른 기호를 써서 한번 표현해 볼게요. 어떻게 표현할지 한번 보세요. 저는 이제 얘네는 정확하게 제가 저만의 암호문으로 한번 표현해 볼게요. 어떻게 할 거냐.
<SYNC Start=481028><P Class=KRCC>
OOO, 그리고 하나 슬래시. 그다음에 OO, 그다음에 슬래시, O. 뭐일 것 같아요? 지금 보시면 이 노란색 작대기를 기준으로 해서 앞에 있는 동그라미 3개는 1을 의미해요.
<SYNC Start=503027><P Class=KRCC>
이 노란색 작대기를 기준으로 해서 앞에 있는 동그라미 2개는 1을 의미하고요. 노란색 작대기를 기준으로 오른쪽에 있는 것은 2를 의미해요.
<SYNC Start=511577><P Class=KRCC>
이제 이 암호문으로 여러분들도 표현해 볼 수 있겠죠. 이제 그러면 1이 하나 있으니까 노란색 작대기를 기준으로 앞에 O 하나, 그리고 작대기 하나.
<SYNC Start=521742><P Class=KRCC>
그다음에 O 2개. 그다음에 얘는 지금 현재 1이 없는 상태죠. 그러면 노란색 작대기를 맨 앞에 배치하고 바로 그 옆에 있는 오른쪽에 2에 해당하는 O 3개를 그려주면 되겠죠.
<SYNC Start=535787><P Class=KRCC>
결과적으로 왼쪽에 표현한 것과 오른쪽에 표현된 것은 1:1로 대응되고 있는 상황입니다. 그러면 여러분들한테 물어볼게요. 결과적으로 여러분들은 총 몇 개 중에서?
<SYNC Start=548772><P Class=KRCC>
4개 중에서 1이 들어갈 O 3개를 선택한 것과 같죠. 총 4개 중에서 어떤 걸 골랐다고요? O가 들어갈 3개를 선택한 경우의 수와 같습니다. 무슨 말이냐?
<SYNC Start=561356><P Class=KRCC>
2개 중에서 중복을 허용해서 3개를 선택하는 경우의 수는 서로 다른 4개 중에서 3개를 선택을 했다. 이 파란색 O가 될 자리를. 이렇게 계산을 할 수 있다는 겁니다.
<SYNC Start=575136><P Class=KRCC>
그러면 이 4라는 값은 결과적으로 뭐랑 뭘 합친 거냐면, 이 O 3개와 노란색 하나를 합친 거예요. 그래서 정확히 구체적으로 쓰면 3+1로 제가 표시해 볼게요.
<SYNC Start=587183><P Class=KRCC>
그러면 이 1이 의미하는 건 뭐냐면, 여기에서 얘기한 칸막이를 의미합니다. 여기에서 얘가 지금 어떤 역할을 해 주느냐면, 칸막이 역할을 해 줘요.
<SYNC Start=597876><P Class=KRCC>
어떤 역할을 해 주는 칸막이냐. 1과 2를 정확하게 구별을 해 주겠다는 칸막이 역할을 하고 있는 겁니다. 서로 다른 두 종류가 있어요.
<SYNC Start=606368><P Class=KRCC>
그러면 이 두 종류를 구별해 주려면 딱 하나의 칸막이만 필요하다는 거예요. 만약에 서로 다른 세 종류가 있으면 얘네들을 구분해 주려면 2개의 칸막이만 있으면 된다는 뜻입니다.
<SYNC Start=616756><P Class=KRCC>
그래서 지금 2개죠. 두 종류인데, 얘네들을 하나를 가를 수 있는 칸막이가 지금 현재 하나가 필요한 상황이죠. 그래서 이 1이 지칭하는 것은 칸막이.
<SYNC Start=627415><P Class=KRCC>
그리고 나머지 것들, 실제로 우리가 나열해야 될 건 총 3개잖아요. 그래서 실제 나열했어야 되는 그런 대상. 나열 대상, 선택되어야 하는 대상이죠.
<SYNC Start=636504><P Class=KRCC>
그래서 택하는 것. 택하는 것이 지금 현재 이렇게 3개가 되고 있는 상황입니다. 그러면 결과적으로 내가 원래는 3개를 택해야 되지만, 어쨌든 이 두 종류를 구별해서 뽑아야 되기 때문에
<SYNC Start=652846><P Class=KRCC>
칸막이 하나를 설치해 가지고 그 칸막이를 기준으로 해서 양 옆에 물건이 있다고 생각하면 되겠구나라고 보는 거고요. 이 칸막이를 기준으로 해서 왼쪽에 있는 3개는 1을 의미하고
<SYNC Start=663950><P Class=KRCC>
이 칸막이를 기준으로 해서 오른쪽에 있는 것은 2를 의미하고, 마찬가지 방식으로 생각을 하면 이렇게 양쪽으로 1:1 대응이 되는 상황을 알 수가 있어요.
<SYNC Start=676700><P Class=KRCC>
그러면 우리가 이 2H3이 어떻게 계산되는지 알았어요. 4C3이니까 결국 4C1이고, 그러면 결국에는 4가 되겠죠. 이제 우리는 이걸 가지고 뭘 할 거냐?
<SYNC Start=688959><P Class=KRCC>
일반화를 할 거예요. 우리는 이제 이것만 알 수 없고, 일반화를 시킬 겁니다. 뭘 알아야 되니까? nHr을 알아야 되기 때문에. 이제 일반화를 한번 해 볼게요.
<SYNC Start=703827><P Class=KRCC>
현재 내가 두 종류를 구별하기 위해서는 칸막이가 현재 하나 필요했었죠. 그렇죠? 그래서 이 상황에서 관찰을 해 보는 거예요. 내가 두 종류를 따지기 위해서는 1개의 칸막이가 필요했어요.
<SYNC Start=718977><P Class=KRCC>
그러면 이제 n종류를 따질 거잖아요. 그러면 n종류를 따질 거다. 그러면 몇 개의 칸막이가 필요하죠? 3개면 2개가 필요하죠. 4개면 3개가 필요하죠. 그다음 5개면 4개가 필요하니까
<SYNC Start=732313><P Class=KRCC>
n종류면 n-1개의 칸막이가 필요할 거예요. 그래서 칸막이 개수만큼 분명히 나중에 추가하면 돼. 원래 선택되어야 하는 대상에다가.
<SYNC Start=742942><P Class=KRCC>
그래서 얘는 분명히 칸막이가 n-1개 필요하겠구나. 그런데 원래 나열해야 되는 대상은 r이었으니까 여기에 얼마를 추가?
<SYNC Start=752956><P Class=KRCC>
r을 추가해야 되고, 원래 선택해야 되는 것은 r이었으니까 r 써주면 되겠네. 그래서 여기에 있는 이 n-1이 칸막이가 되는 거고요.
<SYNC Start=762587><P Class=KRCC>
그다음에 이 r이 뭐냐면, 원래 선택되어야 하는 택하는 대상이 되는 거예요, 택하는 것. 그래서 원래 택하는 것들만큼 선택만 해 주면 중복조합을 계산하실 수가 있습니다.
<SYNC Start=775912><P Class=KRCC>
그래서 원래 2개를 더하고 1을 뺐는데, 그 1을 뺀 것의 뭐냐면 결과적으로 이만큼이 칸막이 개수에 해당되는 거라고 생각을 하시면 되겠어요.
<SYNC Start=787929><P Class=KRCC>
그래서 첫 번째는 이렇게 중복조합의 수를 계산하는 방법을 설명해 드렸고요. 두 번째로 생각하는 방법이 있어요. 이게 첫 번째 생각.
<SYNC Start=798164><P Class=KRCC>
조합을 활용해 가지고 중복조합을 설명하는 방식이고요. 중복조합을 조합의 수로 계산을 옮겨오는 것을 설명했고요. 두 번째 생각이 있어요, 두 번째 생각.
<SYNC Start=811710><P Class=KRCC>
&nbsp;
<SYNC Start=813113><P Class=KRCC>
두 번째 생각은 뭐냐면, 결과적으로 저기에 있는 파란색 O 3개와 칸막이 1개를 지금 현재 일렬로 배치하고 있잖아요. 그러면 저 파란색 O끼리는 서로 같죠.
<SYNC Start=824197><P Class=KRCC>
칸막이도 서로 자기네들끼리는 같을 거 아니에요. 그래서 총 4개를 일렬로 나열할 건데, 저 파란색 O에 해당했던 서로 같은 것들끼리. 그렇죠?
<SYNC Start=834914><P Class=KRCC>
그리고 저 칸막이에 해당했던 서로 같은 것들끼리 무엇을 고려한다? 같은 것이 있는 순열의 수로 생각을 해 주면 똑같이 계산을 해 줄 수 있어요. 조합을 쓰지 않고도.
<SYNC Start=846995><P Class=KRCC>
그래서 이것도 마찬가지로 정답이 4가 나오겠습니다. 그래서 중복조합의 대표적인 사례를 가지고, 이게 왜 이렇게 계산이 되는지에 대해서 설명을 해 드리고
<SYNC Start=858494><P Class=KRCC>
이뿐만 아니라 같은 것이 있는 순열의 수로도 설명이 가능하다는 것을 제가 말씀을 드렸어요. 그러면 두 번째 예시로 한번 또 가볼게요.
<SYNC Start=869300><P Class=KRCC>
이게 대표적인 예시인데, 두 번째 예시가 있어요. 두 번째 예시는 뭐냐면, 방정식의 해의 개수예요.
<SYNC Start=877715><P Class=KRCC>
그래서 방정식 x₁부터 xn까지 모두 다 더해서 r이 나오는 것의 음이 아닌 정수 해의 개수를 구하여라라고 했는데, 이것도 조합의 수로 계산할 수가 있습니까?
<SYNC Start=888375><P Class=KRCC>
얘는 어떻게 조합의 수로 계산할 수 있는지를 한번 설명해 볼게요. 우선 방정식 x+y=3의 음이 아닌 정수 해의 개수를 물어보는 문제가 있어요.
<SYNC Start=899112><P Class=KRCC>
그러면 우선 여러분들은 고등학교 1학년 때는 직접 나열해서 셌잖아요. 한번 직접 나열해서 세 볼게요. 0, 3. 그렇죠? 음이 아닌 정수니까 자연수와 0을 포함하는 거겠죠.
<SYNC Start=911066><P Class=KRCC>
그다음에 1, 2. 2, 1. 3, 0 이렇게 총 4가지가 있겠네요. 그러면 얘를 또다시 한번 생각을 해 보는 거예요. 얘는 결과적으로 뭘 의미하는 거냐.
<SYNC Start=923944><P Class=KRCC>
x는 안 나왔고요. y에 지금 1이 1번, 2번, 3번 나타났다고 생각을 할 수 있어요. 1이 나타난 횟수로 생각을 할 수 있다는 거죠. 그러면 x는 안 나왔고 y가 총 3번 나타났다.
<SYNC Start=936071><P Class=KRCC>
y에 1이 총 3번 나타났다고 해서 이렇게 표현을 해도 되겠죠. 그다음 얘는 x 1번 나타났고요. y에는 1이 2번 나타났어요. 그래서 x는 1번 나타났고 y는 1이 2번 나타났다고 해서
<SYNC Start=949221><P Class=KRCC>
이렇게 표현도 가능합니다. 그다음 이번에는 2고 이번에는 1이죠. 그러면 x 2번에 y는 1번 나타났다고 생각을 할 수도 있겠죠.
<SYNC Start=960027><P Class=KRCC>
그다음에 또 뭐였죠? 맨 마지막, x가 총 3번 나왔겠구나, 1이. 이렇게도 생각을 해 볼 수 있다는 거죠. 그래서 얘가 결과적으로 이걸 세는 것과 이걸 세는 것은 똑같구나라고 볼 수 있어요.
<SYNC Start=973653><P Class=KRCC>
그런데 보세요. 서로 다른 두 종류죠. 서로 다른 두 종류에서 중복을 허용해서 몇 번 뽑은 거예요? 3번 뽑았네. 결과적으로 이 방정식의 근의 음이 아닌 정수 해의 개수는 서로 다른 몇 개 중에서?
<SYNC Start=989558><P Class=KRCC>
2개 중에서. 서로 다른 2개 중에서 중복을 허용해서 3개를 뽑은 것과 동일하겠구나라는 사실을 알 수가 있어요. 그렇죠? 되게 신기하죠.
<SYNC Start=998734><P Class=KRCC>
그래서 그냥 딱 봤을 때는 방정식의 음이 아닌 정수근의 개수를 찾는 거니까 일일이 구하면 되나 했더니, 사실은 중복조합의 수로 따지게 되면 2H3의 값과 동일하다는 거죠.
<SYNC Start=1013509><P Class=KRCC>
뿐만 아니라 얘는 이렇게도 생각할 수 있어요. 어떻게도 생각할 수 있느냐면, 보세요. 저는 그냥 얘를 이렇게도 표현해 볼래요. +111. 얘는 이번에는 이렇게 표현해 볼게요. 1+11.
<SYNC Start=1030088><P Class=KRCC>
얘는 이렇게 표현할게요. 11+1. 제가 지금 ‘십일’이라고 안 하고 ‘일일’이라고 부르는 거 보이시죠? 111+. 무슨 얘기를 하고 싶었냐면, 이 더하기를 하나의 칸막이로 보고요.
<SYNC Start=1046636><P Class=KRCC>
1끼리 뭉쳐져 있는 걸 합친다고 생각해 보면, 얘는 03으로 볼 수 있어요. 이 더하기를 칸막이 역할로 보시면, 이 1은 그냥 혼자 있고요. 이 11을 뭉친다고 생각하면 2로 볼 수 있죠.
<SYNC Start=1058762><P Class=KRCC>
그래서 1+2로 볼 수 있어요. 마찬가지 방식, 2+1로 볼 수 있고요. 3+0으로 볼 수 있죠. 제가 얘를 우리만의 암호로 이렇게 표현을 했을 뿐이에요. 왜?
<SYNC Start=1071361><P Class=KRCC>
이거 개수 따지는 게 더 편리하니까. 왜 편리한지 봤더니, 지금 보니까 같은 것들이 보이시죠? 같은 게 하나, 둘, 세 개가 보여요. 그리고 지금 이 칸막이 역할을 했던 플러스가 보이네요.
<SYNC Start=1085334><P Class=KRCC>
뭐로 생각할 수도 있다? 같은 것이 있는 순열의 수로도 생각할 수가 있습니다. 따라서 4개를 일렬로 나열할 건데, 저 1들끼리는 서로 위치가 바뀌어도 상관이 없기 때문에 3!로 나누고
<SYNC Start=1098746><P Class=KRCC>
이것도 하나죠. 하나니까 1!로 나누게 되면, 이 값은 똑같이 얼마가 되는 걸 알 수 있다? 4가 되는 것을 알 수 있습니다. 그래서 첫 번째, 중복조합의 수로도 생각할 수 있고요.
<SYNC Start=1110501><P Class=KRCC>
두 번째, 같은 것이 있는 순열의 수로도 생각할 수 있는데, 방정식 x+y=3의 음이 아닌 정수 해의 개수는 중복조합의 수와 일치한다는 것을 알 수 있어요.
<SYNC Start=1122367><P Class=KRCC>
항 2개, 서로 다른 2개 중에서 중복을 허용해서 3개를 선택했다는 얘기예요. 누구를? 1을. 그래서 2H3이 되는 거고요. 얘를 이제 일반화 시킬게요.
<SYNC Start=1132963><P Class=KRCC>
이번에는 서로 다른 항이 지금 현재 x₁, x₂, x₃, 땡땡땡, xn이 되는 거죠. 서로 다른 n개 중에서 1을 중복을 허용해서 몇 번 뽑았다고요?
<SYNC Start=1143841><P Class=KRCC>
r번 뽑았다는 뜻이니까, nHr이 이 문제에 대한 정답이 되겠습니다. 제일 중요한 것은 그냥 단순히 자연수가 아니라 음이 아닌 정수 해라는 것을 꼭 기억해 주셔야 돼요.
<SYNC Start=1157834><P Class=KRCC>
음이 아닌 정수 해라는 게 붙어 있기 때문에, y를 3번 다 풀로 뽑을 수 있는 거예요. 왜냐? x가 0이 되니까요. 그래서 음 아닌 정수근의 개수를 따지는 것을 분명히 대표 유형으로 보겠다고 해서
<SYNC Start=1170256><P Class=KRCC>
중복조합의 대표 유형으로 꼭 기억을 해 주셨으면 좋겠습니다. 제일 중요한 건 뭐냐면, 이 H의 의미를 아까 얘기했었잖아요. Homogeneous라는 표현 있잖아요.
<SYNC Start=1180298><P Class=KRCC>
그게 무슨 뜻이냐면, 차수가 같다는 뜻이에요. 호모가 같다는 의미를 가지고 있거든요. 지금 보시면 얘네들이 다 일차예요.
<SYNC Start=1188585><P Class=KRCC>
차수가 같은 방정식의 음 아닌 정수 해의 개수가 지금 현재 얘로 나오고 있죠. 그래서 그 의미를 따와서 H가 된 거라고 생각을 하시면 되겠습니다. 그다음 세 번째 예제로 가볼게요.
<SYNC Start=1204936><P Class=KRCC>
&nbsp;
<SYNC Start=1207216><P Class=KRCC>
세 번째 예제는 뭐냐면, 세 번째 예제는 서로 다른 상자에 똑같은 물건을 넣는 방법의 수를 의미하는데요. 일단 우선 서로 다른 n개의 상자에 똑같은 r개의 물건을 넣는 방법의 수는 nHr이 됩니다.
<SYNC Start=1223174><P Class=KRCC>
왜 이것이 nHr이 되는지 구체적인 예시를 통해서 설명해 볼게요. 다른 2개의 상자가 있어요. X 상자, Y 상자. 일부러 이름이 이렇게 매겨져 있는 거예요.
<SYNC Start=1233056><P Class=KRCC>
X 상자, Y 상자가 있는데 거기에 똑같은, 서로 구별이 되지 않는 3개의 공을 넣는 방법의 수를 구할 거예요.
<SYNC Start=1240446><P Class=KRCC>
그러면 여러분들이 이 상자 X, Y에 들어갈 공의 개수를 스몰 x, 공의 개수를 스몰 y라고 보면 되겠죠. 그래 놓고 그 공 안을 채워주기만 하면 되니까
<SYNC Start=1252841><P Class=KRCC>
이 2개의 공의 합은 총 3개로만 맞춰 주시면 될 겁니다. 결과적으로 뭐예요? 방정식 x+y=3이 되는 정수근의 개수를 구하는 건데
<SYNC Start=1264262><P Class=KRCC>
지금 보시면 빈 상자가 있을 수도 있다는 이 표현 때문에 뭘 포함하고 있어요? x, y가 0이 되는 것도 포함을 하고 있어요. 즉 뭐가 되죠?
<SYNC Start=1273927><P Class=KRCC>
음이 아닌 정수근의 개수가 되겠죠. 음이 아닌 정수 순서쌍 (x, y)의 개수가 될 거예요.
<SYNC Start=1286040><P Class=KRCC>
&nbsp;
<SYNC Start=1288783><P Class=KRCC>
그러니까 아까 직전에 했던 내용하고 동일했죠. 그래서 2H3이 결과적으로 정답이 될 건데, 왜 그런지 또다시 한번 구체적으로 살펴볼게요. 얘를 표를 그려서 표시를 해 보면.
<SYNC Start=1301825><P Class=KRCC>
표를 그려서 표시해 보면, 이 공이 x 안에 3개가 들어가는 경우가 있을 거예요. 그래서 x 안에 이렇게 3개가 들어가는 경우도 있을 거고요.
<SYNC Start=1311547><P Class=KRCC>
x 안에 2개가 들어갔고 y에 하나 들어가는 경우도 있을 거고요. 그다음에 x 안에 하나가 들어가고요. y 안에 2개가 들어가는 경우도 있을 거예요.
<SYNC Start=1321247><P Class=KRCC>
그다음 마지막에 x에 안 들어가고요. y에 이렇게 3개가 들어가는 경우가 있겠죠. 그러면 아까와 마찬가지로 이것도 이제 생각을 해 보면요.
<SYNC Start=1332475><P Class=KRCC>
다시 표현을 했을 때 어떻게 표현할 수 있느냐. x에 흰 공이 3번 들어갔어. 공마다 x를 부여했어. 그래서 x가 총 3번 있다고 해서 xxx로 표현이 가능합니다. 그렇죠?
<SYNC Start=1345875><P Class=KRCC>
그다음에 공이라는 애한테 ‘너 어디에 들어갔어?’ 물어보는 거예요. 그러면 ‘저 x요. 저 x요.’ 그다음에 이 친구는 y라고 대답을 하겠죠. xxy.
<SYNC Start=1356288><P Class=KRCC>
그다음 거, x에 공 하나가 들어갔는데 이 공이 지금 현재 x로 표현이 되면, 그 두 번째에 해당하는 애는 y가 2번 들어갔으니까 y 2번으로 볼 수 있을 겁니다.
<SYNC Start=1367337><P Class=KRCC>
그다음 맨 마지막, yyy로 쓰게 되면 여러분들은 이제 아까와 똑같은 결과를 얻으실 수 있어요. 서로 다른 문자는 지금 현재 2개죠. x, y를 중복을 허용해서.
<SYNC Start=1378822><P Class=KRCC>
지금 중복을 허용한 거 보이시죠? 총 몇 개? 3개를 뽑은 2H3의 결과라는 것을 볼 수가 있습니다. 그러면 2H3, 계산 어떻게 하면 됐죠?
<SYNC Start=1389989><P Class=KRCC>
이 두 수를 더한 다음에 하나를 뺐죠. 4C3이 되는데, 사실은 이 4의 정체에 뭐가 포함되어 있느냐면, 이 두 종류를 구별하려면 칸막이가 하나 필요하죠.
<SYNC Start=1401602><P Class=KRCC>
그 칸막이 하나와 원래 내가 뽑으려고 했던 3개의 대상. 총 4개 중에서 그 대상 3개를 선택하는 경우와 같다고 해서 4C3이 됐었습니다.
<SYNC Start=1411823><P Class=KRCC>
그러면 4C3은 4C1이 되니까 이 문제도 정답이 아까와 동일하게 4가 되는 것을 알 수가 있습니다. 그러면 서로 다른 2개의 상자에다가 똑같은 3개의 공을 넣는 방법의 수는 2H3이었으니
<SYNC Start=1427680><P Class=KRCC>
서로 다른 n개의 상자에 똑같은 r개의 물건을 넣는 방법의 수는 뭐겠어요? 일반화 시키면 nHr이 되겠죠.
<SYNC Start=1435718><P Class=KRCC>
그래서 중복조합의 수에서도 일반적으로 조합의 수와 마찬가지로 서로 다른 것들 중에서 뽑게 되어 있어요. 그래서 서로 다른 게 등장했다.
<SYNC Start=1445156><P Class=KRCC>
그러면 이 서로 다른 숫자를 이 H 앞에 배치한다고 생각을 하시면 문제를 풀 때 조금 더 편리하게 생각할 수가 있을 거예요.
<SYNC Start=1454232><P Class=KRCC>
그래서 다른 상자에다가 똑같은 물건을 넣는 방법의 수는 중복조합의 유형이라는 사실을 꼭 기억해 두셨으면 좋겠습니다.
<SYNC Start=1463416><P Class=KRCC>
그러면 이제 예제 3번 유형도 있는데요. 사실 중복조합의 유형은 조금 더 있어요. 그래서 몇 개를 더 보고 가도록 할게요.
<SYNC Start=1472656><P Class=KRCC>
중복조합의 활용, 서로 다른 항의 개수입니다. x₁부터 xn까지 이번에는 다 더했는데, 걔를 r번 곱했대요.
<SYNC Start=1480868><P Class=KRCC>
그런 전개식에서 서로 다른 항의 개수를 물어보는 문제도 중복조합의 수라고 이야기하고 있습니다. 그러면 한번 볼게요. (a+b)³에서 서로 다른 항의 개수는 무엇이 있느냐.
<SYNC Start=1493258><P Class=KRCC>
우선 얘를 전개해 봐야겠죠. (a+b)³은 a+b를 2번 곱한 것에다가 a+b를 1번 더 곱해 주면 돼요. 그러면 여러분들이 잘 알고 있는 곱셈공식에 의해서 a²+2ab+b²에 a+b를 곱한 거죠.
<SYNC Start=1512629><P Class=KRCC>
이제 최종 마무리된 식이 나올 거니까 샅샅이 한번 살펴볼게요. 우선 a²과 a가 만나면 무엇이 만들어지느냐면, a³이 만들어집니다.
<SYNC Start=1523790><P Class=KRCC>
그다음, 이번에는 a²과 b가 만나면 a²b가 만들어지고요. 지금 얘네 2개도 2ab와 a가 만나면 똑같이 a²b가 만들어지죠. 지금 계수는 신경 안 쓰고, 서로 다른 항이 뭔지만 볼 거여서
<SYNC Start=1539362><P Class=KRCC>
그냥 그 항의 종류만 쓸 겁니다. 그다음에 또 뭐가 있느냐면, 지금 현재 얘도 한번 따졌으니까 이 뒤로 가는 것도 또 한 번 따져야 되죠.
<SYNC Start=1548807><P Class=KRCC>
2ab², a 1번에 b 2번. 이 경우도 마찬가지로 ab² 해서 ab²이라는 항이 생깁니다. 그다음 맨 마지막에 b²과 b가 만나서 뭐가 만들어지나요?
<SYNC Start=1563151><P Class=KRCC>
b³이 만들어지죠. 그래서 서로 종류가 다른 항의 개수는 총 몇 개다? 4개라는 것을 알 수 있어요. 그러면 이렇게 매번 전개를 할 거냐.
<SYNC Start=1573606><P Class=KRCC>
매번 전개 안 할 거고요. 얘네들을 하나씩 그러면 관찰해 볼게요. 우선 얘는 a가 총 몇 번? 3번 곱해져 있으니까 그냥 aaa라고 표현해도 되는 거죠.
<SYNC Start=1585463><P Class=KRCC>
그다음 a²b예요. 그러면 얘는 그냥 aab로 볼 수 있고요. ab²이다. 그러면 abb로 볼 수 있습니다. b³이라는 건 b를 3번 곱했다는 뜻이에요. bbb로 보면 될 거예요.
<SYNC Start=1599056><P Class=KRCC>
얘네들끼리 순서를 바꿔도 어차피 결과가 같기 때문에 순서는 고려하지 않는 경우인데요. 그렇게 되면 당연히 조합이죠. 그런데 조합인데 어떤 조합이냐?
<SYNC Start=1609653><P Class=KRCC>
a랑 b라는 두 종류가 있는데, 순서를 고려하지 않고 지금 몇 번 뽑아온 결과죠? 결과적으로 3번을 뽑았구나. 그래서 이 문제에 대한 정답은 서로 다른 a, b 두 종류 중에 중복을 허용해서.
<SYNC Start=1623379><P Class=KRCC>
지금 중복을 허용해서 b 여러 번 들어간 거 보이시죠? a 여러 번 들어간 거 보이시죠? 그래서 총 몇 번? 3번 뽑았구나라고 생각을 하시면 되겠어요.
<SYNC Start=1632897><P Class=KRCC>
그러면 2H3은 어떻게 계산되죠? 2H3은 칸막이가 몇 개 필요하느냐면, 하나 필요해. 선택해야 되는 것은 3개가 있어. 그래서 총 4개 중에 원래 선택해야 되는 개수 3개를 뽑아 오시면 되겠습니다.
<SYNC Start=1647768><P Class=KRCC>
그러면 4C3은 4C1이니까 얘도 결과적으로 답이 하나, 둘, 셋, 네 개가 된다는 사실을 알 수가 있습니다. 얘는 숫자가 작기 때문에 여러분들이 전개를 해서 물론 몇 개인지 세서 구할 수 있지만
<SYNC Start=1661360><P Class=KRCC>
얘는 확장돼 가지고 더 큰 걸로 물어볼 수도 있겠죠. 그래서 일반화 시킨 결과도 보셔야 돼요. 지금 보시면 서로 다른 몇 개?
<SYNC Start=1670148><P Class=KRCC>
x₁, x₂, x₃, 땡땡땡, xn. n개 중에서 r개라는 건 결국 r번을 곱한다는 거니까, 결과적으로 곱해지는 횟수가 r번이라는 얘기예요.
<SYNC Start=1681330><P Class=KRCC>
그러면 이 각각 항들마다 곱해지는 게 총 횟수가 r번인데, n개 중에서 r번을 중복을 허용해서 얘네들끼리 전개하는 과정에서 중복이 생기잖아요.
<SYNC Start=1692610><P Class=KRCC>
중복을 허용해서 r개를 뽑았을 때 서로 다른 항의 개수는 이 중복조합의 수와 같다는 사실을 알 수가 있어요. 그냥 일차방정식에서, 일차로 되어 있는 부정방정식에서 음 아닌 해의 개수.
<SYNC Start=1706831><P Class=KRCC>
음 아닌 정수 해의 개수도 물어볼 수 있지만, 이렇게 단항식으로 구성되어 있는 것들 중에서 전개했을 때 서로 다른 항의 개수를 물어볼 수도 있습니다.
<SYNC Start=1718073><P Class=KRCC>
그런데 둘의 특징은 뭐냐면, 앞에서의 방정식도 차수가 같았죠. 얘가 또 마찬가지로 지금 여러 번 제곱되어 있는 식 이전에 있는 이 식이 차수가 같아요, 다 일차로.
<SYNC Start=1729615><P Class=KRCC>
그래서 ‘동차구나.’ 그래서 Homogeneous, 그래서 H라는 글자를 따오는구나라는 사실도 알 수가 있습니다.
<SYNC Start=1738882><P Class=KRCC>
그래서 3제곱에서 서로 다른 항의 개수도 했고요. 이제 마지막입니다. 중복조합의 활용에서 대표 유형의 마지막이 뭐냐면, 등호가 포함된 부등식 조건이 붙어 있는 경우의 수도 있습니다.
<SYNC Start=1752674><P Class=KRCC>
지금 보시면 부등식 a, b, c. a가 b보다 작거나 같고 b가 c보다 작거나 같고 심지어 이 c가 2보다 작거나 같은 부등식이 있는데, 이 부등식을 만족시키는 자연수 순서쌍의 개수를 찾으라는 문제예요.
<SYNC Start=1767279><P Class=KRCC>
그러면 여러분들하고 제가 옛날에 했던 거, 뭐가 있느냐. 이렇게 순서가 정해졌어요. 크기 순서가 정해졌습니다. 그러면 순서는 이미 고정됐으니까 고려할 필요가 없죠.
<SYNC Start=1778944><P Class=KRCC>
순서를 고려하지 않는 경우의 수는 뭐죠? 조합이죠. 이건 조합이구나라는 사실을 알 수가 있어요. 그런데 뭐가 포함됐죠? 등호가 포함됐어요.
<SYNC Start=1789111><P Class=KRCC>
그래서 이렇게 등호가 포함이 됐다. 등호가 하나씩 들어갔다. 그러면 뭘 허용하겠다는 거예요? 중복을 허용하겠다는 의미죠.
<SYNC Start=1797026><P Class=KRCC>
그래서 얘는 중복조합이겠네라고 바로 생각을 하실 수가 있어요. 그러면 볼게요. 서로 다른 어떤 수들 중에 중복을 허용해서 몇 개를 뽑아야 될지 고민을 해야겠죠.
<SYNC Start=1808167><P Class=KRCC>
지금 보면 2라는 숫자 때문에 a, b, c가 될 수 있는 값은 1 또는 2예요. 실제로 나열해 보면 이 값들이 전부 다 1, 1, 1이 될 수도 있죠.
<SYNC Start=1819805><P Class=KRCC>
심지어는 1, 1, 2도 될 수 있고요. 1, 2, 2도 될 수 있고요. 2, 2, 2도 될 수 있는 상황입니다. 서로 다른 두 종류 중에 중복을 허용해서 몇 개를 뽑았나요?
<SYNC Start=1831217><P Class=KRCC>
3개를 뽑았죠. 그래서 이거에 대한 정답도 서로 다른 두 종류 1, 2 중에 중복을 허용해서 a, b, c 3개를 뽑았으니까 2H3이 정답이 되겠구나라는 사실을 짐작해 보실 수가 있어요.
<SYNC Start=1845676><P Class=KRCC>
그래서 마찬가지로 계산을 해 주면, 이 값은 4C3이고요. 그 결과는 4가 된다는 것을 알고 있습니다. 그 상태에서 이제 여러분들이 2보다 작거나 같은 자연수 후보가 1, 2인데
<SYNC Start=1859055><P Class=KRCC>
중복을 허용해서 3개를 뽑으면 되겠구나. 그러면 이것을 일반화한 이 식을 한번 보세요. n 이하인 자연수니까 n개가 있겠죠. 그렇죠? n 이하인 자연수.
<SYNC Start=1870417><P Class=KRCC>
그래서 서로 다른 n개의 자연수 중에서 중복을 허용해서 몇 개를 뽑은 거예요? 총 r개를 뽑았구나. 그래서 nHr이 되는구나라고 이해를 하고 계시면 되겠습니다.
<SYNC Start=1882709><P Class=KRCC>
그래서 부등호가 나왔다. 그런데 등호 조건이 붙어 있는 부등식이다. 그러면 여러분들은 어떻게 생각해야 된다? 중복조합이겠구나라고 의심을 하시면 되겠습니다.
<SYNC Start=1895042><P Class=KRCC>
두 번째, 하나 더 볼게요. 이번에는 함수예요. 그런데 함수에서도 이렇게 부등호에다가 등호 하나가 조금 추가돼 가지고 등호를 포함한 부등식이 나왔다.
<SYNC Start=1905411><P Class=KRCC>
그러면 중복조합을 의심하셔야 돼요. 한번 쭉 나열해 볼게요. 임의의 X의 원소에 대해서 이 부등식 조건을 만족한다고 했으니까 a에 1, b 2를 대입해 볼게요.
<SYNC Start=1916919><P Class=KRCC>
그래서 1, 2를 대입하면, 여기에 나와 있는 식이 뭐냐. f(1), f(2) 이렇게 되겠죠. X의 임의의 원소예요. 모든 원소를 다 대입하라는 의미이기 때문에 이번에는 2, 3을 대입할게요, 2, 3.
<SYNC Start=1930797><P Class=KRCC>
그러면 2, 3을 대입하면 f(2)보다는 f(3)이 작거나 같겠죠. 그래서 f(2)가 f(3)보다 작거나 같다. 그러면 다 끝났습니다. 함숫값들을 이렇게 만족시키게끔 함수의 개수를 찾으라는 건데
<SYNC Start=1945607><P Class=KRCC>
함숫값은 어디에서 선택이 되죠? 바로 공역에서 선택이 되죠. 그래서 이 공역의 원소인 4 또는 5를 이 안에 대입만 해 주면 되니까, 분명히 얘는 경우의 수가 4, 4, 4. 4, 4, 5. 4, 5, 5.
<SYNC Start=1963955><P Class=KRCC>
그다음에 맨 마지막 5, 5, 5가 나올 게 분명한데, 결과적으로 이 둘 중에서 중복을 허용해서 몇 개를 뽑으라는 얘기예요? 3개를 뽑으라는 얘기가 되겠죠. 왜 그러느냐?
<SYNC Start=1975620><P Class=KRCC>
지금 보면 크기가 정해졌어요. 크기가 정해졌어. 크기가 정해졌어. 순서가 정해졌구나. 뭐다? 조합이다. 그런데 여기에 뭐가 붙었어요?
<SYNC Start=1986091><P Class=KRCC>
각각 등호가 붙었어요. 등호 붙었어, 등호 붙었어. 중복을 허용하겠다는 뜻이죠. 그래서 중복조합에 대한 내용이고, 서로 다른 몇 개 중에서?
<SYNC Start=1996478><P Class=KRCC>
2개 중에서 중복을 허용해서 f(1), f(2), f(3)값. 총 3개를 뽑을 것이기 때문에 중복조합의 수 2H3이 되겠습니다. 그러면 2H3, 계산 어떻게 한다고 했죠?
<SYNC Start=2009758><P Class=KRCC>
서로 다른 두 종류를 구별하기 위한 칸막이와. 그렇죠? 원래 선택하려고 했던 대상 중에 원래 선택하려고 했던 대상을 뽑거나 칸막이를 뽑으셔도 돼요.
<SYNC Start=2020158><P Class=KRCC>
그래서 4C1로 계산을 하셔도 되겠습니다. 그래서 얘도 마찬가지로 정답은 4가 된다는 것을 알 수가 있습니다.
<SYNC Start=2028497><P Class=KRCC>
제가 지금까지 다뤘던 총 5가지의 예제가 지금까지 중복조합에 나왔던 모든 문제들을 싹 다 모아놓은 거예요. 중복조합은 역사가 그렇게 길지 않습니다.
<SYNC Start=2040779><P Class=KRCC>
제가 고등학교 때에는 중복조합을 배우지 않았어요. 그러다가 쭉 있다가 아마 현재 제가 처음에 교직생활을 했을 때, 그때 3학년 학생들한테 중복조합을 가르쳐 주면서
<SYNC Start=2053197><P Class=KRCC>
너네가 이걸 배우는 첫 세대라는 얘기를 했었는데요. 지금까지 나온 예제들이 많지 않은 이유 중 하나가, 그 역사가 짧아서 누적되어 있는 기출문제가 적어요.
<SYNC Start=2063477><P Class=KRCC>
그래서 지금 제가 예제1부터 예제5번까지 문제를 모아놓은 게 기출문제의 전부라고 보시면 되겠습니다. 그래서 이 안에서 절대 빠지지가 않아요.
<SYNC Start=2072423><P Class=KRCC>
여기까지만 알면 다 이해를 하실 수 있는데, 만약에 이 예제 5개 중에서 벗어났다? 그러면 신유형이에요. 그래서 중복조합에 있는 문제들은 예제 1번부터 예제 5번까지가 전부 다니까
<SYNC Start=2084097><P Class=KRCC>
왜 이게 각각의 답이 됐는지를 생각하시면 돼요. 그러면 예제를 제가 모아봤는데, 이 예제 5개는 전부 다 정답이 같아요.
<SYNC Start=2093292><P Class=KRCC>
서로 다른 2개 중에서 중복을 허용해서 3개를 택한다. 그러면 언어 그대로 2H3이죠. 방정식 x+y=3이 되는 음 아닌 정수 해의 개수다.
<SYNC Start=2105334><P Class=KRCC>
그러면 여기에 뭘 해 본다고요? 하나씩 다 대입해서 03, 12, 21, 30 따지는데 결과적으로 서로 다른 2개 중에서 중복을 허용해서 1을 집어넣는 거죠. 몇 번?
<SYNC Start=2117880><P Class=KRCC>
3번 집어넣는 거예요. 그래서 얘도 2H3. 그다음 서로 다른 2개의 상자에다가 똑같은 3개의 공을 넣는대요. 그리고 방법의 수를 구하는데, 제일 중요한 건 뭐냐면 빈 상자가 있을 수 있다.
<SYNC Start=2131446><P Class=KRCC>
그래서 빈 상자가 있을 수 있다는 건 0이 있을 수도 있다는 뜻이에요. 음이 아닌 정수랑 똑같은 말입니다. 그래서 얘를 방정식으로 세어 보면 상자에 들어갈 각각의 개수를 X, Y라고 표현하면
<SYNC Start=2144760><P Class=KRCC>
X+Y가 3이 되게끔만 따져 주시면 되겠죠. 빈 상자가 있을 수도 있으니까 0을 포함한다는 의미니까, 정수이긴 정수인데 음이 아닌 정수, 음수만 아닌 정수가 뭐예요?
<SYNC Start=2156199><P Class=KRCC>
0과 자연수죠. 그러니까 0을 포함한다는 것을 알 수가 있어요. 그다음 예제 네 번째, (a+b)³에서 서로 다른 항의 개수를 물어봤어요.
<SYNC Start=2166900><P Class=KRCC>
얘는 서로 다른 a, b 2개 중에서 몇 번? 3번 곱할 거예요. 그러니까 중복을 허용해서 몇 번? 3번을 뽑는다. 그래서 2H3이 똑같이 될 거고요.
<SYNC Start=2177446><P Class=KRCC>
그다음에 예제 5번에서는 부등식. 이거 되게 중요하다고 했었죠. 만약에 등호가 안 들어가고 이렇게 크기만 정해져 있다. 그러면 순서가 고정되어 있다는 뜻이에요. 순서가 고정되어 있다?
<SYNC Start=2189864><P Class=KRCC>
그러면 순열은 아니라는 뜻이죠. 조합이에요. 그냥 조합으로 풀어주기만 하면 되는데, 무엇이 붙었다? 이렇게 등호가 붙었어요. 등호가 붙었으면, 이거는 중복을 허용하겠다는 뜻이구나.
<SYNC Start=2202779><P Class=KRCC>
그래서 중복조합이라고 보시면 되겠습니다. 그러면 한번 볼게요. 중복조합인데, 서로 다른 자연수로 따져야 되죠. 1 또는 2가 되는데, 1과 2 중에서 중복을 허용해서 몇 개를 뽑아야 돼요?
<SYNC Start=2215907><P Class=KRCC>
3개를 뽑아야 되죠. 그래서 2H3이 될 거예요. 마찬가지로 함수에 대해서도 동일한데요. 함수는 이렇게 조건식이 주어져 있을 때
<SYNC Start=2224906><P Class=KRCC>
여기에 숫자를 다 대입해 보면 함수들끼리의 크기 관계를 알 수 있어요. 그래서 1, 2, 3을 다 대입해 봤더니 뭐가 나왔다?
<SYNC Start=2232627><P Class=KRCC>
f(1)보다는 f(2)가 크거나 같고, f(2)보다는 f(3)이 크거나 같다는 게 나왔으니, 서로 다른 4, 5 두 개 중에서 중복을 허용해서 f(1), f(2), f(3)이 될 수 있는 값을 몇 개?
<SYNC Start=2244433><P Class=KRCC>
3개를 뽑으면 되기 때문에 마찬가지로 예제 5번의 (2)번의 정답도 2H3이 되는 것을 알 수가 있어요. 그래서 각각 항목별로 여러분들이 이게 왜 이렇게 되는지를 정확하게 알고 계시면
<SYNC Start=2256258><P Class=KRCC>
이제 문제를 푸는 데 어려움이 없으실 겁니다.
<SYNC Start=2260047><P Class=KRCC>
&nbsp;
<SYNC Start=2261170><P Class=KRCC>
학생들이 많이 하는 질문 코너로 가보겠습니다. 상자에 물건을 넣는 문제를 되게 많이 헷갈려 하는 것 같아요. 그래서 상자에 물건을 넣는 문제인데
<SYNC Start=2269757><P Class=KRCC>
‘이게 똑같은 물건을 집어넣을 때와 서로 다른 물건을 집어넣을 때랑 경우의 수가 매번 다르게 나오는데, 무엇 때문에 그런가요?’ 이런 질문들이 많았어요.
<SYNC Start=2278851><P Class=KRCC>
내용을 한번 볼게요. 상자 문제는 이렇게 해결을 하시면 되겠습니다. 서로 다른 물건인지, 같은 물건인지를 먼저 체크를 하셔야 돼요.
<SYNC Start=2287107><P Class=KRCC>
그래서 서로 다른 물건을 다른 상자에 집어넣는 경우의 수와 서로 같은 물건을 다른 상자에 넣는 경우, 2가지로 나눠볼 수 있는데요.
<SYNC Start=2295884><P Class=KRCC>
똑같은 물건을 다른 상자에 넣는다는 건 지금까지 우리가 계속 했죠. 뭐예요? 중복조합입니다. 그런데 서로 다른 상자에 다른 물건을 집어넣는 건 조합이 아니라 순열이에요. 왜냐?
<SYNC Start=2308859><P Class=KRCC>
이 경우는 물건이 서로 구별이 되기 때문에 순서가 중요해지고, 결국 순열의 수가 되는데요. 예를 들어 설명해 볼게요.
<SYNC Start=2316385><P Class=KRCC>
서로 다른 사탕 2개를 다른 상자 두 상자에 넣는 경우를 우리가 직접 나열해 보면, A 상자에다가 흰 별, B 상자에 검은 별.
<SYNC Start=2325715><P Class=KRCC>
A 상자에 검은 별, B 상자에 흰 별. 그래서 쭉 나열을 해 봤어. 그랬더니 몇 개가 나왔어요? 총 4개가 나왔죠. 그게 왜 그러냐면, 일단 별 하나한테 물어보는 거예요.
<SYNC Start=2336421><P Class=KRCC>
서로 다른 별이니까 의사도 다를 수 있잖아요. 그래서 이 흰 별한테 ‘상자 2개 중에서 어디에 들어가고 싶니?’라고 물어보는 거예요.
<SYNC Start=2344088><P Class=KRCC>
그러면 이 별이 분명히 얘기하겠죠. ‘저 A 또는 B요.’ 그러니까 총 2가지. 그다음에 또 그다음 별한테 물어봐요. ‘너는 상자 A, B 두 개 중에서 어디에 들어가고 싶니?’ ‘저 A 또는 B요.’
<SYNC Start=2355926><P Class=KRCC>
이렇게 2가지씩 말을 할 거고요. 결과적으로 이 2개의 별을 상자에 집어넣는 경우의 수니까 곱의 법칙에 의해서 총 4가지가 될 거예요.
<SYNC Start=2364486><P Class=KRCC>
그래서 결과적으로 이 중복순열에 해당하는 ∏ 앞에 있는 건 뭐냐면, 얘네들이 선택할 수 있는 가짓수. 즉 상자의 수가 이곳에 올 거예요. 뭐가 온다고요? 상자의 종류수.
<SYNC Start=2378330><P Class=KRCC>
그리고 의사를 계속 얘기하는 대상이 결과적으로 곱해지는 횟수가 될 거 아니에요. 그래서 이 뒤에 붙은 2가 뭐가 된다? 물건의 개수가 됩니다. 물건의 수.
<SYNC Start=2390095><P Class=KRCC>
그래서 이 경우는 중복순열로 해결할 수가 있고요. 중복조합은 지금까지 우리가 했어요. 똑같은 물건을 다른 상자에 넣는 경우입니다.
<SYNC Start=2399993><P Class=KRCC>
그래서 똑같은 물건이 지금 상자에 이렇게 중첩돼서 들어가 있어요. 중복을 허용해서 뽑았다는 얘기죠, B라는 상자를. 그래서 A에 지금 흰 별이 하나 들어가고 B에 흰 별이 하나 들어가는 경우.
<SYNC Start=2411630><P Class=KRCC>
그다음 B 상자에 2개 들어가고 A 상자에 2개 들어가는 경우로 나눠서 생각해 볼 수 있죠. 얘랑 달리 얘는 개수가 더 어떻습니까? 더 작다는 것을 알 수가 있어요.
<SYNC Start=2421639><P Class=KRCC>
그래서 이렇게 되면 총 몇 개가 나온다? 하나, 둘, 세 개가 나오는데, 그게 왜 그러냐면요. 서로 다른 상자 2개 중에서 중복을 허용해서 몇 번?
<SYNC Start=2431436><P Class=KRCC>
3번을 뽑는 경우와 마찬가지예요. 왜냐하면 얘를 다시 표현해 볼게요. 얘는 a, 얘는 b. 얘는 b 2번, 얘는 a가 2번 나왔다고 생각해 볼 수 있겠죠.
<SYNC Start=2442170><P Class=KRCC>
그래서 서로 다른 2개의 문자 중에서 중복을 허용해서 몇 개를 뽑았다? 2개를 뽑았다고 생각해서 2H2가 이 문제에 대한 정답이 될 겁니다.
<SYNC Start=2451614><P Class=KRCC>
그래서 물건을 집어넣을 때 이 물건이 같은지 다를지를 먼저 보세요, 첫 번째. 만약에 물건이 다르다. 그러면 상자가 같은지, 다른지를 보세요.
<SYNC Start=2461292><P Class=KRCC>
상자가 달라? 그러면 중복순열. 그런데 물건이 똑같아요. 그런데 상자가 달라요. 그러면 중복조합으로 모시면 되는데, 이 둘에서 주의할 점이 하나가 있어요. 바로 뭐다?
<SYNC Start=2472578><P Class=KRCC>
빈 상자를 허용한다는 조건이 있는지를 보시면 바로 적용하면 되지만, 빈 상자를 허용하지 않는다고 되어 있으면 이 경우의 수에서 빈 상자가 허용되지 않는 경우. 그렇죠?
<SYNC Start=2485288><P Class=KRCC>
그 경우를 빼주시면 되겠습니다. 그래서 상자 문제에서는 물건. 똑같은 물건을 다른 상자에 넣는다, 중복조합. 똑같은 물건이 아닌 다른 물건을 다른 상자에 넣는다. 중복순열.
<SYNC Start=2498053><P Class=KRCC>
이렇게 접근하시면 되겠습니다. 지금까지 여러분들하고 저랑 같이 중복조합에 대한 대표적인 유제들 5개를 보고요. 그에 따른 상자 문제 관련해서도 정리를 했어요.
<SYNC Start=2510247><P Class=KRCC>
제일 중요한 건 뭐냐면, 중복조합에 대한 이 유형 5가지는 정말 빠삭하게 잘 알고 계셔야 돼요. 이 5가지에서 벗어나는 경우가 거의 없기 때문에
<SYNC Start=2519750><P Class=KRCC>
여러분들이 이 내용들을 복습을 하시고, 뒤에 있는 문제들을 풀어보시면 ‘진짜 벗어나지 않는구나.’라고 생각을 해 보실 수 있을 겁니다.
<SYNC Start=2528748><P Class=KRCC>
그래서 오늘도 저랑 같이 이렇게 개념에 대해서 설명을 듣느라 고생을 많이 하셨고요. 다음 시간, 감 잡기 코너에서 만나도록 하겠습니다.
<SYNC Start=2540304><P Class=KRCC>
&nbsp;
</BODY>
</SAMI>