<SAMI>
<HEAD>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=12315><P Class=KRCC>
여러분들의 눈높이에서 개념부터 문제 해결에 이르는 길까지 차근차근 짚어드리겠습니다. EBS 수학영역의 서영란입니다.
<SYNC Start=22503><P Class=KRCC>
수능의 감 잡기, 확률과 통계편의 첫 시간입니다. 첫 번째 유형은 무슨 유형이냐면, 바로 원순열과 중복순열에 대한 내용입니다.
<SYNC Start=33515><P Class=KRCC>
OT 때 안내해 드린 대로 이걸 해결하기 위해서 이 개념뿐만 아니라 이 이전에 학습했어야 됐던 개념들까지도 짚어 드리기로 약속을 했었는데요.
<SYNC Start=43509><P Class=KRCC>
원순열과 중복순열에서 공통적으로 언급되는 단어가 보이는데, 그것은 바로 순열입니다. 그래서 저희 함께 미리 알아야 할 개념으로 순열부터 출발하도록 하겠습니다.
<SYNC Start=57530><P Class=KRCC>
미리 알아야 할 개념, 순열이에요. 순열의 뜻부터 한번 살펴볼게요. 여러분들이 사람 by 사람을 사바사, 케이스 by 케이스를 케바케.
<SYNC Start=67563><P Class=KRCC>
이렇게 줄이는 것처럼, 순열도 뭔가 줄임말이라고 생각하시면 돼요. 그러면 뭐냐. 순열이라는 뜻은 뭐냐면, 순서대로 나열했다는 뜻이에요. 순서대로 나열했다.
<SYNC Start=85517><P Class=KRCC>
그래서 이제 여러분들이 순서대로 나열한 게 바로 순열이라고 생각을 하시면 되는데, 영어로는 permutation이라고 해요. 그래서 앞글자 P를 따와서 P라는 기호를 사용해서 표현합니다.
<SYNC Start=99291><P Class=KRCC>
구체적인 내용으로 들어가 볼게요. 구체적인 내용으로 들어가 보면, 서로 다른 n개에서 r개를 택해서 일렬로 나열한 것을 순열이라고 이야기를 해요.
<SYNC Start=110568><P Class=KRCC>
서로 다른 n개에서 r개를 택해서 일렬로 나열했다. 그래서 이 일렬로 나열하는 과정에서는 순서가 바로 고려된다는 사실을 알 수가 있습니다.
<SYNC Start=121504><P Class=KRCC>
그러면 예시를 하나 들어볼게요. 3P2는 어떤 의미냐. 서로 다른 3개 중에서 2개를 택해서 일렬로 나열하는 거겠죠. 그래서 서로 다른 3개가 이렇게 보이네요.
<SYNC Start=134013><P Class=KRCC>
그중에서 두 장을 택해서 두 자리 자연수를 만들었대요. 두 자리 자연수를 만들려면 어떻게 해야겠어요? 일렬로 나열해야겠죠. 그래서 이런 경우를 우리가 순열이라고 이야기합니다.
<SYNC Start=147621><P Class=KRCC>
그러면 예를 들어서 제가 1, 2, 3에서 1, 2를 뽑아와 가지고 두 자리 자연수를 만들어 볼게요. 그러면 12와 21이 있겠죠. 12, 21. 완전히 어떤 숫자인가요?
<SYNC Start=161631><P Class=KRCC>
다른 숫자예요. 그래서 이 두 개의 숫자가 다른 숫자라는 걸 알 수 있어요. 무슨 뜻이다? 순서가 그만큼 중요하다는 거죠. 그래서 이렇게 결과가 다르면 다른 경우의 수로 생각하기 때문에
<SYNC Start=175610><P Class=KRCC>
순서가 고려되는구나라는 사실을 유추해 볼 수가 있습니다. 또 하나 더 있습니다. 3명의 후보 중에서, 그러면 3명의 후보는 서로 다른 사람 3명이겠죠.
<SYNC Start=186670><P Class=KRCC>
그중에서 회장과 부회장을 각각 1명씩 정한다고 하네요. 그러면 여러분들은 정한다 혹은 선택한다고 해서 조합이라고 오해를 하시는 분들도 계신데요.
<SYNC Start=199138><P Class=KRCC>
이것은 조합이 아니고 순열입니다. 왜 그런지 설명을 해 드릴게요. 회장, 부회장인데 후보로 1, 2, 3이라는 후보가 있었다고 생각해 볼게요.
<SYNC Start=209679><P Class=KRCC>
그러면 회장이 1번이 되고요. 부회장이 2번이 되는 경우. 회장이 2번이 되는 경우, 부회장이 1번이 되는 경우. 이 경우는 어떻습니까? 서로 다르죠.
<SYNC Start=222650><P Class=KRCC>
결국 후보자인 사람들을 일렬로 지금 제가 나열한 꼴이 되었네요. 얘도 마찬가지로 조합이 아니라 직책이 다른 경우는 순열이라는 사실을 알 수가 있습니다.
<SYNC Start=236628><P Class=KRCC>
그래서 제가 3P2에 대해서 설명을 했는데요. 조금 더 일반화시켜 볼게요. 일반화시키게 되면 n Permutation r, nPr에 대해서 설명을 할 건데.
<SYNC Start=250319><P Class=KRCC>
nPr은 이렇게 계산이 된대요. 왜 이렇게 계산이 되는지 궁금하시죠? 우선 서로 다른 n개 중에서 r개를 택해서 일렬로 나열할 거예요. 그러니까 일렬로 배치하는 줄들을 제가 그어 볼게요.
<SYNC Start=265203><P Class=KRCC>
이게 몇 개라고요? r개입니다. r개만큼 이렇게 배열을 할 건데요. 첫 번째에 올 수 있는 경우의 수는 서로 다른 n개 중에서 택하는 것이기 때문에 이 자리에는 n개가 들어올 수 있습니다.
<SYNC Start=280592><P Class=KRCC>
그러면 그다음 경우에는 앞에서 선택했던 경우를 제외한 n-1이 들어올 수 있겠죠. 그다음에는 n-2가 들어올 거예요. 이제 마지막은 무엇이 들어올까요?
<SYNC Start=293706><P Class=KRCC>
첫 번째 경우에는 n이 들어왔고 두 번째 경우에는 n-1이 들어왔고 세 번째 경우에는 n-2가 들어왔습니다. 그러면 r번째 경우에는 분명히 무엇이 들어오겠다?
<SYNC Start=307371><P Class=KRCC>
n-(r-1)이 들어오겠다는 걸 알 수 있겠죠. 그래서 여기에 분배법칙을 적용하게 되면 무엇이 나온다? n-r+1이라고 생각을 해 줘서, 결론은 이렇게 얻을 수가 있습니다.
<SYNC Start=324670><P Class=KRCC>
그런데 제가 지금 이걸 쓰면서도 너무 길다는 느낌을 받고 있어요. 그런데 수학은 기호의 학문이죠. 어떤 기호를 활용하면 이것을 좀 더 간단하게 나타낼 수 있을까요?
<SYNC Start=337318><P Class=KRCC>
느낌 오시죠? 여러분이 알고 있는 느낌표. 바로 팩토리얼입니다. 한국어로는 n 계승이라고 표현하는데요. n!이라는 것은 n부터 숫자를 하나씩 줄여서 쭉 1까지 곱했다는 얘기예요.
<SYNC Start=352393><P Class=KRCC>
그러면 이 식을 n!을 활용해서 표현해 보도록 할게요. 숫자가 하나씩 줄어들고 있습니다. 더 줄어들어야겠죠. 팩토리얼을 활용하려면 우리가 숫자를 하나씩 계속 줄여 나가다가, 어디까지?
<SYNC Start=367808><P Class=KRCC>
1까지 곱해 줘야 되기 때문에. 그래서 팩토리얼을 쓰고 싶어서 숫자를 계속 줄여 나가서 곱했어요. 그다음에 어떻게 해야 될까요?
<SYNC Start=376579><P Class=KRCC>
원래 식을 변형하면 안 되기 때문에 내가 곱해 준 것만큼을 나눠 주셔야 될 거예요. 그래서 n-r부터 3×2×1. 다시 이렇게 나누어 주시면 되겠죠.
<SYNC Start=388350><P Class=KRCC>
그러면 분자에 해당하는 것은 n부터 1까지 곱해졌으니까 무엇이 된다? 이게 n!이구나라는 사실을 알 수 있고요.
<SYNC Start=397719><P Class=KRCC>
그다음에 분모는 n-r부터 1까지 곱해져 있기 때문에 (n-r)!이라는 사실을 알 수 있습니다. 그래서 nPr은 결과적으로 어떻게 계산할 수 있다?
<SYNC Start=412390><P Class=KRCC>
n!을 (n-r)!로 나눈 밖으로 계산할 수 있다는 사실을 알 수 있겠네요. 그러면 이제 순열의 수를 구체적으로 어떻게 계산하는지를 설명해 드렸어요.
<SYNC Start=426809><P Class=KRCC>
그런데 여기까지만 알면 기본 문제밖에 못 풀기 때문에 우리가 조금 더 응용된 버전의 순열을 하나 더 다뤄 보도록 할게요.
<SYNC Start=435908><P Class=KRCC>
첫 번째는 이웃할 때의 순열입니다. 이웃한다는 건 어떤 개념이냐면, 붙어 있다는 얘기예요. 이웃사촌, 서로 이웃. 이런 표현이잖아요.
<SYNC Start=446361><P Class=KRCC>
그래서 수학에서는 이웃한다는 건 나란히 옆에 붙어 섰다는 얘기거든요. 그러면 하나로 고려하면 되잖아요. 그렇죠? 어떻게 고려한다? 한 묶음으로 생각하자.
<SYNC Start=460778><P Class=KRCC>
그러면 이웃한 게 자동으로 고려돼요. 예를 들어서 제가 이렇게 펭란이랑 같이 붙어 있습니다. 지금 이런 상황이 이웃하는 상황이에요.
<SYNC Start=470419><P Class=KRCC>
그런데 우리를 이렇게 하나로 묶음으로 고려해서 나열하는데, 생각해 보세요. 이 펭귄이 제 오른편에 있는 경우와 제 왼편에 있는 경우는 서로 다르겠죠?
<SYNC Start=480469><P Class=KRCC>
그래서 어떻게 생각해야 되느냐. 자리를 바꾸는 경우를 생각하셔야 돼요. 묶음 내부에서 자리를 바꾸는 경우까지 고려해야 된다.
<SYNC Start=492484><P Class=KRCC>
그러면 어쨌건 묶었기 때문에 그 묶음 내에서 자리를 바꾸는 걸 고려할 수 있는 거죠. 그렇기 때문에 무슨 법칙을 쓸 수 있구나?
<SYNC Start=501048><P Class=KRCC>
곱의 법칙을 쓸 수 있구나라는 사실을 알 수 있겠네요. 그러면 이걸 활용해서 예제를 한번 볼게요. '남자 2명, 여자 3명을 한 줄로 세울 때 남자 2명이 이웃하는 경우의 수를 구하시오.'라고 했습니다.
<SYNC Start=516473><P Class=KRCC>
그러면 이제 남자 둘을 한 묶음으로 고려해야겠죠. 그래서 첫 번째 생각, 남자 2명을 한 묶음으로 고려할 거예요. 남자1, 남자2. 이 둘을 어떻게 한다?
<SYNC Start=532022><P Class=KRCC>
한 묶음으로 고려를 합시다. 그러면 나머지 여자 셋이 있겠죠. 여자, 여자, 여자. 이렇게 여자 셋이 있을 거예요. 그러면 이들을 한 묶음으로 고려하는 순간 몇 명으로 생각할 수 있느냐면
<SYNC Start=546894><P Class=KRCC>
1명, 2명, 3명, 4명이니까 총 4명을 나열하는 경우의 수가 되니 4!이겠구나라는 사실을 알 수가 있겠네요. 그다음에 어떻게 해야 돼요?
<SYNC Start=561503><P Class=KRCC>
이걸 묶어서 고려했는데, 얘네들끼리 자리를 바꾸는 경우도 있다고 했었죠? 그래서 이 묶음 내에서 일렬로 배열하는 경우의 수도 구하면 되는데
<SYNC Start=571904><P Class=KRCC>
여기에서는 구체적으로 어떤 일이 일어날 수 있느냐면 남자1, 남자2로 배치되거나 남자2, 남자1로 배치되는 경우가 있을 거예요. 결국 2가지네요.
<SYNC Start=583062><P Class=KRCC>
그래서 그 두 경우의 수를 고려해 주면 2!이 되고요. 결과적으로 어떻다고요? 곱의 법칙을 활용하셔야 되죠. 그래서 이 두 가지를 곱의 법칙을 활용하면 4!=24. 2!=2가 돼서 정답은 48이 되겠습니다.
<SYNC Start=604808><P Class=KRCC>
그래서 이웃하는 순열은 이렇게 정리를 해 봤어요. 그렇다면 이제 이웃하지 않는 순열은 어떻게 될까요? 이웃하지 않는다는 건 이웃하는 걸 전체 경우에서 빼서 생각해도 되잖아요. 그렇죠?
<SYNC Start=619013><P Class=KRCC>
그렇게 생각할 수도 있고요. 또 다른 방식으로도 생각해 볼 수가 있어요. 다른 방식으로 생각하면 어떨까요? 내가 누군가랑 이웃하지 않고 싶어요.
<SYNC Start=629913><P Class=KRCC>
그러면 그 사람과 나 사이에 무언가가 있으면 이웃하지 않게 되겠죠. 즉 어떤 게 필요하다? 바로 벽이 필요합니다. 벽만 있으면 이 사람과 내가 이웃하지 않을 수가 있어요.
<SYNC Start=644994><P Class=KRCC>
그러면 그 벽 역할을 해 주는 것이 무엇이냐? 바로 이웃해도 되는 것. 그러니까 제3자가 됩니다. 그래서 제일 먼저 해 줘야 되는 것, 이웃해도 되는 것들을 먼저 배열하면 되는데
<SYNC Start=656999><P Class=KRCC>
이것은 무슨 역할을 하느냐면, 바로 칸막이 역할을 해 주는 거야. 이웃하지 않게끔 도와주는 칸막이. 그다음에, 그러면 칸막이들이 세워지면 그것들의 사이, 사이와 양 끝에. 그렇죠?
<SYNC Start=670647><P Class=KRCC>
사이사이와 양 끝에 공간이 생기죠? 그 공간에다가 이웃하지 않는 것들을 배열해 주면 어떻게 되겠어요? 서로 이웃하지 않게 되겠죠.
<SYNC Start=681968><P Class=KRCC>
그래서 마지막에 얘가 칸막이를 고려한 상황에서 양 끝과 사이사이에 배열을 해서 얻은 결과니까, 무슨 법칙? '곱의 법칙을 활용해 주면 되겠구나.'라는 사실을 알 수 있습니다.
<SYNC Start=695127><P Class=KRCC>
그러면 예시를 통해 볼게요. 여학생 2명, 남학생 3명을 일렬로 세우는데, 여학생이 이웃하지 않을 방법의 수를 구하래요. 그러면 제일 먼저 해야 되는 건 뭐라고요?
<SYNC Start=706104><P Class=KRCC>
이웃해도 상관없는 칸막이 역할을 해 줄 사람들을 나열하면 될 건데, 여기 지금 보시면 여학생이 조건이 걸려 있으니까 제3자는 남학생 3명이겠네요.
<SYNC Start=717129><P Class=KRCC>
그러면 이 남학생 3명을 쭉 일단 먼저 배열을 하는 거예요.
<SYNC Start=725040><P Class=KRCC>
남자 3명을 배열하는 경우의 수는 서로 다른 3명을 일렬로 나열하는 거니까 몇 팩토리얼? 바로 3!이 될 거고요. 이제 남은 자리에는 지금 상황을 보아하니 여기, 여기, 여기, 여기.
<SYNC Start=739126><P Class=KRCC>
양 끝과 그 사이사이에 몇 자리가 남아 있나요? 네 자리가 남아 있어요. 그래서 그 네 자리를 우리가 두 번째 고려를 해 주면, 총 이렇게 4개의 자리에서 몇 자리를 선택해야 되느냐면
<SYNC Start=753752><P Class=KRCC>
여학생 2명을 배치해야 되는 상황이에요. 그래서 서로 다른 네 자리에서 두 자리를 선택해서 일렬로 나열해야 되겠네요. 그래서 여기에서 얻을 수 있는 결론은
<SYNC Start=766209><P Class=KRCC>
서로 다른 4개 중에서 2명의 자리를 찾아서 일렬로 배열해라라고 해서 4P2를 써주면 되겠습니다. 그러면 이제 뭘 고려해야 돼요? 마지막, 곱의 법칙까지 해 주면 깔끔하게 끝나겠습니다.
<SYNC Start=781678><P Class=KRCC>
그래서 이 2가지를 곱해 주면 3!=6이죠. 3!=6이고요. 4P2는 4×3이니까 정답은 72가 되겠습니다.
<SYNC Start=797644><P Class=KRCC>
이제 우리 본 개념을 한번 들어가 볼게요. 첫 번째, 원순열입니다. 순열이긴 순열인데 원순열이죠. 어떤 의미일 것 같나요?
<SYNC Start=808591><P Class=KRCC>
나열을 하긴 할 건데요. 원형으로 나열한다는 의미예요. 원순열의 가장 큰 포인트는 뭐냐면, 바로 회전을 해도 같은 것은 하나로 보겠다. 이게 가장 큰 포인트입니다.
<SYNC Start=822001><P Class=KRCC>
그래서 원형을 배열하는데, 원형으로 배열하는 순열이 원순열인데 회전을 해서 같은 것은 하나로 보겠다는 것에 집중해서 경우의 수를 세어 주셔야 돼요.
<SYNC Start=832598><P Class=KRCC>
그러면 이제 구체적으로 3명인 경우에 대해서 설명을 해 보도록 할게요. A, B, C의 세 사람을 원탁에 배치하는 경우의 수예요. 그래서 제가 원탁을 그려보겠습니다.
<SYNC Start=847019><P Class=KRCC>
원탁 하나를 그리고, 또 원탁 하나를 그리고, 또 원탁 하나를 그릴게요.
<SYNC Start=854634><P Class=KRCC>
이제 이렇게 원탁 하나를 다 그렸는데, 여기에다가 사람을 배치할 거예요. 그래서 여기에다가 A라는 사람을 배치하고 여기에 B라는 사람을 배치하고 여기에 C라는 사람을 배치할 거고요.
<SYNC Start=866528><P Class=KRCC>
그다음에 여기에다가 A라는 사람을 배치하고 B라는 사람을 배치하고 C라는 사람을 배치할 거예요. 마찬가지 방식으로 여기에서 A, B, C라는 사람을 배치해 봤습니다.
<SYNC Start=879679><P Class=KRCC>
이 3개는 정확히 같은 자리예요. 왜 같은 자리냐면, 지금 얘를 한 번 회전하면 이 모양이 되고 얘를 한 번 더 회전을 하면 이 모양이 되거든요.
<SYNC Start=890651><P Class=KRCC>
그래서 이 모양들을 잘 보시면, 여기의 경우는 얘를 이렇게 한 칸, 한 칸 회전하면 이 결과가 나오죠. 회전하고 계신가요?
<SYNC Start=901699><P Class=KRCC>
그다음에 이렇게 한 번 회전하면, 지금 맨 오른쪽에 있는 모양이 나오네요. 마지막으로 이것을 다시 한 번 이렇게 오른쪽으로 한 칸 회전하면 다시 원래대로 모양이 돌아오니까
<SYNC Start=912710><P Class=KRCC>
이 3개는 결국에 같은 거구나라는 사실을 알 수가 있습니다. 원순열의 관점에서 이 3가지는 모두 다 같은 것으로 취급해서 1가지라고 생각을 합니다.
<SYNC Start=926441><P Class=KRCC>
그런데 순열의 관점에서 한번 볼게요. 순열의 관점에서 보면 일렬로 나열하는 거니까 이것은 ACB로 볼 수 있고요. 일렬로 나열하는 거니까 이거는 CBA라고 볼 수 있고요.
<SYNC Start=939797><P Class=KRCC>
얘도 일렬로 나열하는 거니까 BAC로 볼 수 있겠네요. 순열의 관점에서 이 3가지는 서로 달랐어요. 몇 가지로써? 3가지로써 고려했다. 이 얘기입니다. 3가지로 고려됐다.
<SYNC Start=954295><P Class=KRCC>
그러면 3가지를 결국 원순열에서는 1가지로 취급하게 된 거예요. 그래서 3가지를 지금 몇 가지로? 1가지로 취급이 됐으니, 결국에는 무슨 작업을 해 준 거구나?
<SYNC Start=967622><P Class=KRCC>
원래 개수보다 ÷3만큼 더 줄겠구나라는 사실을 알 수 있다고요. 순열과 달리 원순열은 개수가 더 어떻다는 걸 알 수 있어요?
<SYNC Start=979705><P Class=KRCC>
적다는 걸 알 수 있습니다. 같은 자릿수 만큼이요. 그래서 첫 번째 생각은 뭐냐면, 전체 순열의 수에서 자리가 같은 것만큼 나눠 주면 원순열의 수가 나온다고 해서
<SYNC Start=994353><P Class=KRCC>
이 경우의 수는 2!이 되겠습니다. 제가 첫 번째 생각이라고 했거든요. 이렇게 생각하는 거 말고 다르게도 생각할 수 있어요. 두 번째 생각으로 한번 가볼게요.
<SYNC Start=1005295><P Class=KRCC>
두 번째 생각으로 한번 가볼게요. 원형 탁자를 가지고 올게요. 원형 탁자를 가지고 오면, 이렇게 생겼어요. 이제 여기에다가 누군가 1명을 먼저 배치할 거예요.
<SYNC Start=1016840><P Class=KRCC>
1명을 먼저 배치하면 저는 그냥 A라고 할게요, A. 그렇죠? A. 그런데 그 1명을 이렇게 배치를 해도.
<SYNC Start=1027373><P Class=KRCC>
여기에 배치해도, 이 경우의 수는 어떤가요? 회전하면 일치하죠. 그렇기 때문에 결국에는 같아요. 이것도 같구나. 심지어는 또 마지막 자리.
<SYNC Start=1038830><P Class=KRCC>
안 해봐도 알겠지만, 해 볼게요. 이 자리에 배치를 해도 얘를 또 회전을 한 번 하면 여기에 오기 때문에 이 3개가 모두 다 같다는 것을 알 수가 있습니다.
<SYNC Start=1049703><P Class=KRCC>
그래서 원순열에서 1명을 배치하는 것은 경우의 수가 일단 지금 현재 1가지입니다. 그런데 말입니다. 이 1명을 배치하고 나면 나머지 두 자리가 있는데
<SYNC Start=1061787><P Class=KRCC>
나머지 두 자리가 극명하게 구분이 돼요. 이 자리랑 이 자리요. 왜 극명하게 구분이 되느냐면, A를 기준으로 해서 이 파란색 자리는.
<SYNC Start=1075785><P Class=KRCC>
여러분, A에 한번 빙의해 보시겠어요? 여러분, A가 됐습니다. A가 돼서 팔을 쭉 뻗었어요. 여기가 어디 자리예요? A를 기준으로 해서 오른쪽 자리죠.
<SYNC Start=1084484><P Class=KRCC>
그래서 A를 기준으로 여기가 오른쪽 자리라는 것을 알 수 있어요. 또다시 A에 빙의해서 팔을 뻗어보시면 왼팔에 누가 있는 거예요?
<SYNC Start=1093368><P Class=KRCC>
A의 왼팔에 분홍색 네모 자리가 있구나라는 사실을 알 수가 있습니다. 자리가 결국에는 어떻게 됐나요? 구분이 됐어요. 2개가 정확히 구별이 된다고요.
<SYNC Start=1107921><P Class=KRCC>
결국에 무엇이 중요해졌다? 맞아요, 순서가 중요해졌습니다.
<SYNC Start=1115935><P Class=KRCC>
순서가 중요해졌기 때문에 얘는 뭐로써 고려한다? 바로 순열을 적용할 수가 있는 거예요. 그러면 한번 볼까요? 1명을 먼저 배치하는 경우의 수는 1개였어요, 1개.
<SYNC Start=1128949><P Class=KRCC>
그 1가지에다가 나머지를 배열하는 경우의 수는 그냥 순열이니까, 2명을 일렬로 나열하는 거니까 2!이 되겠죠. 그래서 결과는 어떻습니까?
<SYNC Start=1139437><P Class=KRCC>
두 개가 서로 같다는 것을 알 수가 있습니다. 그래서 첫 번째 생각은 뭐냐면, 전체 경우의 수를 순열로 계산을 한 다음에 회전을 했을 때
<SYNC Start=1151697><P Class=KRCC>
자리가 같은 경우의 수만큼 나누어서 접근하는 방식이 있고요. 아니면 1명을 먼저 배치하는 순간, 이 사람을 기준으로 해서 다른 모든 자리들이 구별이 돼 버려요.
<SYNC Start=1162793><P Class=KRCC>
그래서 무엇으로 고려할 수 있다? 순서를 나타내는 순열로 생각을 할 수가 있다고 볼 수 있다는 거죠. 그래서 이런 방식으로 접근하게 됐을 때, 이제 일반화를 한번 시켜보고 싶습니다.
<SYNC Start=1175998><P Class=KRCC>
지금 제가 3명을 가지고 얘기를 했더니, 2!이 나왔잖아요. 그러면 n명을 가지고 본다면 몇 팩토리얼이 나올까요? (n-1)!이 나오겠죠.
<SYNC Start=1187466><P Class=KRCC>
그래서 한번 같이 볼게요. 서로 다른 것을 원형으로 배열하는 방법의 수는 (n-1)!이 나올 거다. 그러면 이게 왜 그런다고요?
<SYNC Start=1196823><P Class=KRCC>
전체 순열의 수에서, 그러면 n명 나열하니까 n!. 자리가 같은 경우의 수만큼을 나눠 줬대요. 자리가 같은 경우의 수, 아까 3명일 때 원형 배열했을 때 3개였죠.
<SYNC Start=1209058><P Class=KRCC>
n명일 때는 n가지가 있을 거예요. 그래서 (n-1)!. 한 명을 먼저 배치한다. 그 한 명을 먼저 배치하는 경우의 수는 1가지였어요.
<SYNC Start=1219864><P Class=KRCC>
1가지였고, 나머지를 배열하는 경우의 수는 남은 인원 수만큼이니까 (n-1)!이었습니다. 얘도 마찬가지로 결과는 (n-1)!이 되겠네요.
<SYNC Start=1231920><P Class=KRCC>
그래서 (n-1)!로 정리를 할 수 있어요. 그런데 제가 이렇게 또 설명을 하면 여러분들은 그럴 거예요. ‘선생님, 왜 이렇게 쉬운 걸 복잡하게 표현합니까? 그냥 (n-1)! 외우면 되잖아요.’라고 생각하는데
<SYNC Start=1246649><P Class=KRCC>
제가 여러분들한테 공식을 외우라고 추천하지 않는 이유가 있어요. 왜 그러느냐. 응용된 문제에서 잘못 적용해서 틀릴 위험성이 있습니다.
<SYNC Start=1256559><P Class=KRCC>
대표적인 사례를 하나 보여 드릴까요? 활용. 6명의 학생이 그림과 같이 정삼각형 모양의 책상에 둘러앉는 방법의 수를 물어봤는데, 여러분이 이걸 보고 어쨌든 이렇게 동그랗게 배열하는 거니까
<SYNC Start=1270671><P Class=KRCC>
(6명-1)!이라고 해서 5!이라고 쓰면 맞을까요, 틀릴까요? 당연히 제가 틀리니까 물어보겠죠? 틀렸습니다. 정확히 틀렸어요.
<SYNC Start=1282873><P Class=KRCC>
얘는 똑같은 방식으로 접근을 해 보셔야 되는데, 첫 번째 생각. 전체 순열의 수에서 자리가 같은 경우의 수로 나눠 주거나, 아니면 한 명을 먼저 배치한 다음에 나머지를 배열해 주시면 돼요.
<SYNC Start=1296110><P Class=KRCC>
그러면 볼게요. 대부분의 학생들이 전체 순열의 수는 잘 구해요. 6명이니까 6!이구나까지는 잘 구하는데, 자리가 같은 경우의 수를 구하는 걸 굉장히 어려워하더라고요.
<SYNC Start=1310582><P Class=KRCC>
그래서 어떻게 나눌지 이제 같이 한번 고려를 해 볼게요. 어떻게 나누면 좋을까? 얘를 해결하는 방법은 무엇이냐면, 하나의 정렬을 정해 가지고요. 순서를 정해서, 배치 하나를 정해서.
<SYNC Start=1338156><P Class=KRCC>
회전을 해 보시면 돼요. 그래서 하나의 배치를 딱 정해 놓고 그걸 직접 굴려 보시면 몇 개가 나오는지 알 수 있어요. 왜냐하면 자리가 같은 경우의 수를 구할 것이기 때문에
<SYNC Start=1351896><P Class=KRCC>
배치를 하나만 체크해 보시면 돼요. 왜냐하면 내가 같아지는 걸 찾아야 되니까 1, 2, 3, 4, 5, 6. 1, 2, 3, 4, 5, 6. 이렇게 따져봐야겠죠?
<SYNC Start=1360197><P Class=KRCC>
그래서 얘를 예시로 설명할 거니까, 제가 그 배치를 그냥 1, 2, 3, 4, 5, 6을 예시로 한번 설명해 보도록 할게요.
<SYNC Start=1369870><P Class=KRCC>
삼각형이 이렇게 있어요. 정삼각형이 있는데, 1, 2, 3, 4, 5, 6을 이렇게 한번 굴려보는 거예요.
<SYNC Start=1378711><P Class=KRCC>
또 이제 삼각형을 그립니다. 다시 1, 2, 3, 4, 5, 6인데 아까 여기부터 배치했으니까, 회전시키기로 했으니까 하나 더 올려요. 그래서 회전을 또 시켜 봐요.
<SYNC Start=1392207><P Class=KRCC>
그다음에 또 한 번 가볼까요? 여기에 또 삼각형을 그리고요. 1, 2, 3, 4, 5, 6을 또 배치할게요. 아까 여기에서 했으니까 이번에는 여기에서부터 가면 되겠죠.
<SYNC Start=1403842><P Class=KRCC>
또 한 번 할게요. 삼각형을 가지고 와서 또다시 회전을 시켜 볼게요. 1, 2, 3, 4, 5, 6. 또다시 삼각형을 가지고 와서 한 칸씩 미뤄서 1, 2, 3, 4, 5, 6. 회전을 시켜 봅니다.
<SYNC Start=1421709><P Class=KRCC>
마지막까지, 1, 2, 3, 4, 5, 6을 회전을 시켜 보면 우리는 자리가 같은 경우의 수를 구할 수가 있습니다.
<SYNC Start=1433253><P Class=KRCC>
이렇게 쭉 나열을 했는데요. 왜 여기에서 끝냈느냐? 다시 1을 여기로 보내면 아까와 같은 배열로 나올 거니까 더 이상 할 필요가 없어요.
<SYNC Start=1441235><P Class=KRCC>
그러면 자리가 같은 건 어떻게 찾느냐고요? 위치관계를 보시면 돼요. 1 짝꿍이 2인 경우를 한번 볼게요. 1 짝꿍 2, 1 짝꿍 2, 1 짝꿍 2.
<SYNC Start=1452234><P Class=KRCC>
1 짝꿍이 2가 아닌 경우도 있잖아요. 1 짝꿍이 2가 아닌 경우, 1 짝꿍이 2가 아닌 경우, 1 짝꿍이 2가 아닌 경우. 얘네들을 먼저 보시겠나요? 회전해 볼게요.
<SYNC Start=1462883><P Class=KRCC>
회전하면 정확히 이거 나오죠. 회전하면 정확히 이 경우가 나옵니다. 그건 무슨 뜻이냐? 이 3개는 다 어떻게 따지겠다? 똑같이 따지겠다는 내용이겠죠.
<SYNC Start=1477165><P Class=KRCC>
얘네 3개는 똑같구나. 회전해서 일치하니까 3개를 몇 개로 세겠다? 하나로 세겠다는 얘기예요. 또 있죠? 여기도 보시면 얘를 회전하면 이게 나오고 이것을 다시 오른쪽으로 회전하면 이게 나오죠.
<SYNC Start=1492320><P Class=KRCC>
그래서 이 3가지도 어떻다는 걸 알 수 있나요? 똑같다는 것을 알 수가 있습니다. 그래서 3개마다 하나로 세게 되는 거예요.
<SYNC Start=1501167><P Class=KRCC>
그러면 자리가 같은 경우의 수는 얘는 총 몇 가지가 나오는 거예요? 바로 자리가 같은 경우의 수는 3가지가 나오니까 3으로 나누어 주시면 되겠습니다.
<SYNC Start=1518084><P Class=KRCC>
직접 이렇게 여러분들이 해 보셔야 돼요. 그래서 이게 첫 번째 생각. 그러면 두 번째 접근법으로 가볼게요. 두 번째 접근법은 1명을 먼저 배치한 다음에 나머지를 배열하는 거니까
<SYNC Start=1531384><P Class=KRCC>
여러분들은 뭐만 알면 될까요? 1명을 먼저 배치하는 경우만 알면 되겠죠. 이것만 알면 됩니다. 그러면 나머지는 여러분들이 너무 잘 찾아요. 1명을 배치하고 나면 나머지 5명인데
<SYNC Start=1544265><P Class=KRCC>
자리가 다 구별되니까 그냥 5!이겠죠. 그래서 뭔지 모르겠는 걸 빼놓고 5!. 이건 잘 찾습니다. 이제 우리는 여기 빈칸에 들어갈 1명을 먼저 배치하는 경우의 수를 구할 거예요.
<SYNC Start=1557261><P Class=KRCC>
그래서 1명을 먼저 배치하는 경우의 수는 어떻게 찾느냐면, 1명을 각 자리에 배치해 보시면 돼요.
<SYNC Start=1574346><P Class=KRCC>
1명을 각 자리에 직접 배치해 보시면, 다른 경우의 수를 찾아주시면 돼요. 한번 볼게요. 이제 두 번째 생각 갑니다.
<SYNC Start=1584087><P Class=KRCC>
삼각형 이 모양이 있는데, 어차피 앉을 수 있는 자리는 총 6가지니까 각 자리마다 배치를 여러분들이 해 보시면 돼요. 이렇게 또 삼각형들을 쭉 그려봤습니다.
<SYNC Start=1598187><P Class=KRCC>
여러분들은 판서 노트에 제가 삼각형을 다 그려드렸으니까 그 동그라미에다가 숫자만 쓰시면 돼요. 그래서 저는 그냥 아무나 1명 불러왔어요.
<SYNC Start=1606328><P Class=KRCC>
1, 여기에 배치했어요. 그다음에 또 굴려 가지고 1. 여기다가 한번 배치해 봤어요. 그다음에 여기에 배치해 봤고요. 그다음 자리는 이 자리죠. 여기에도 배치해 봤고요.
<SYNC Start=1618978><P Class=KRCC>
그다음에 여기에도 배치해 봤고요. 그다음 한 칸 돌려서 여기에도 배치해 봤어요. 그러면 전체 다 앉혀본 거죠? 회전을 해 볼게요. 얘를 오른쪽으로 회전하면 얘랑 똑같고
<SYNC Start=1630540><P Class=KRCC>
얘를 다시 오른쪽으로 회전하면 얘랑 똑같아요. 결과는 어떻습니까? 이거 3개가 다 똑같구나라는 사실을 알 수 있으니까 1가지로 세겠죠, 1명을 배치하는 경우의 수니까.
<SYNC Start=1645437><P Class=KRCC>
그다음 마찬가지로 이것도 똑같이 회전해 보면 이 3가지 경우의 수가 1가지로 세어진다는 것을 알 수 있어요. 이 3가지가 다 똑같잖아요. 그런데 우리가 원하는 건 무엇인가요?
<SYNC Start=1659429><P Class=KRCC>
1명을 배치하는 경우의 수예요. 경우의 수는 결과가 같은 것은 하나로 본다. 그렇기 때문에 1가지, 2가지가 돼서 1명을 배치하는 경우의 수는 몇 가지가 되는 거예요?
<SYNC Start=1671972><P Class=KRCC>
2가지가 되는 거예요. 그래서 1명을 먼저 배치하는 경우의 수는 여기에서 몇 가지다? 2가지라는 사실을 알 수가 있습니다. 2개의 결과값, 어떤가요? 똑같죠.
<SYNC Start=1685336><P Class=KRCC>
왜냐하면 이 6!이라는 것이 결국 6×5!이니까 3으로 약분하면 2×5!이 나오거든요. 그래서 계산한 결과값이 같다는 것도 알 수 있습니다.
<SYNC Start=1700087><P Class=KRCC>
이렇게 좀 뭔가 설명을 해 보니까 윤곽이 잡히시나요? 이제 여러분들이 제가 설명을 해 준 걸 토대로 한 문제를 더 풀어볼 거예요.
<SYNC Start=1710124><P Class=KRCC>
왜냐하면 뭔가 응용된 문제는 한 번만 풀고 넘어가기엔 아쉬움이 남거든요. 그래서 정확히 이해하고 있는지 그다음 문제를 통해서 실험을 해 볼게요.
<SYNC Start=1720463><P Class=KRCC>
똑같습니다. 6명의 학생을 이번에는 조금 모양이 다른 이런 사각형 모양에다가 앉힌대요. 그래서 직사각형 모양에 앉힐 건데, 얘도 마찬가지로 2가지로 나눠서 한번 풀어볼게요.
<SYNC Start=1734141><P Class=KRCC>
전체 순열의 수는 6명이니까 6!이겠구나라는 걸 알고 있고요. 자리가 같은 경우의 수는 직접 배열 하나를 정해서 굴려보시면 되겠죠.
<SYNC Start=1745339><P Class=KRCC>
그래서 직접 배열 하나를 정해서 굴려서 뭐로 나눠 줘야 될지 한번 같이 찾아봅시다. 그러면 저는 여기다가 옮겨서 써볼게요.
<SYNC Start=1756337><P Class=KRCC>
직사각형을 하나 가지고 옵시다. 직사각형을 계속 하나씩 가지고 오는데, 어차피 6명이기 때문에 어차피 여섯 자리만큼 그려놔야겠죠.
<SYNC Start=1769110><P Class=KRCC>
저는 여기서부터 출발해 볼게요. 1, 2, 3, 4, 5, 6. 똑같이 한 칸 옮겨서 1, 2, 3, 4, 5, 6. 똑같이 한 칸 옮겨서 1, 2, 3, 4, 5, 6입니다.
<SYNC Start=1784597><P Class=KRCC>
두 번째, 또 줄에 써야겠죠? 왜냐하면 아직 원래대로 안 돌아왔잖아요, 얘들이. 그렇죠? 그래서 1이 여기에 왔는데, 이번에는 여기서부터 1, 2, 3, 4, 5, 6.
<SYNC Start=1797986><P Class=KRCC>
또 마찬가지로 한 칸 더 이동을 시켜 볼까요? 이번에는 여기서부터 1, 2, 3, 4, 5, 6. 그다음 또 한 칸 이동시켜 볼게요. 여기서부터 1, 2, 3, 4, 5, 6.
<SYNC Start=1818561><P Class=KRCC>
그러면 다 했어요. 왜냐? 얘를 다시 여기로 옮겨 놓으면 똑같잖아요. 그래서 배열 하나를 1, 2, 3, 4, 5, 6으로 정해서 한 손, 한 손 다 굴려서 회전을 해 봤습니다.
<SYNC Start=1829675><P Class=KRCC>
그러면 이제 여러분들은 자리가 같은 경우의 수를 찾아야겠죠. 똑같은 자리의 경우의 수만큼 찾아야 되니까, 여러분들 이제 보세요. 1하고 4랑 서로 마주보고 있어요.
<SYNC Start=1842624><P Class=KRCC>
그런데 얘는 아니죠. 자리가 다르겠죠. 1하고 4랑 마주보고 있는 걸 하나만 더 찾아보세요. 여기 있죠. 그래서 이거 2개가 결국 같은 자리가 되는 경우의 수라는 걸 알 수 있습니다.
<SYNC Start=1857391><P Class=KRCC>
실제로 얘를 이렇게 한번 회전시켜 보면, 이 경우와 정확히 일치를 합니다. 또 한 번 볼까요? 뭐가 있어요? 1, 2가 짝꿍인 경우가 하나 있네요. 여기도 1, 2가 짝꿍인 경우가 하나 있습니다.
<SYNC Start=1870646><P Class=KRCC>
얘도 마찬가지로 회전을 해 보시면 정확히 2개가 일치합니다. 또 하나 더 볼게요. 1, 6이 짝꿍인데 이 경우도 1, 6이 짝꿍이죠? 회전을 해 보시면 2개가 정확히 같아지는 것을 알 수 있어요.
<SYNC Start=1887740><P Class=KRCC>
자리가 같은 경우의 수, 몇 개인가요? 2가지죠. 그래서 자리가 같은 경우의 수는 2가지라는 걸 알 수 있어서 2로 나누시면 이 문제에 대한 정답이 될 거예요.
<SYNC Start=1906731><P Class=KRCC>
하나 더 갈게요. 이제 한 명을 먼저 배치해 가지고 나머지를 나열하는 건에, 한 명은 지금 얼마나 배치됐는지를 모르니까 비워 두시고요.
<SYNC Start=1915722><P Class=KRCC>
한 명을 배치하는 순간 나머지 자리가 다 구별이 되죠? 기준이 생겼기 때문에. 그래서 5!만 나중에 곱해 주면 될 거예요. 이제 이 빈칸에 들어갈 1명을 먼저 배치하는 경우의 수를
<SYNC Start=1927685><P Class=KRCC>
저는 이제 바로 여기에서 찾아볼게요. 여러분들의 판서 노트에는 어차피 제가 6개로 다 그려드렸으니까 그 위에 쓰시면 되는데, 저는 여기에서 바로 찾아보려고요.
<SYNC Start=1939214><P Class=KRCC>
그래서 그 1명을 먼저 배치하는 경우를 제가 여기에 표시해 볼게요. 그 1명의 자리를 여기라고 해 볼게요. 둘, 셋, 넷, 다섯, 여섯.
<SYNC Start=1955678><P Class=KRCC>
여섯 자리에 다 앉혀봤죠? 나머지는 지금 없다고 생각하시면 됩니다. 그러면 보시겠어요? 지금 얘랑 얘는 똑같죠. 회전하면 같으니까.
<SYNC Start=1964733><P Class=KRCC>
이것도 2개가 똑같죠. 회전하면 같으니까. 이 2개도 같습니다. 회전하면 같으니까. 그런데 얘는 아무리 회전해 봤자 얘랑은 같지 않아요.
<SYNC Start=1975752><P Class=KRCC>
얘도 마찬가지로 아무리 회전해 봤자 얘랑은 절대 같을 수가 없죠. 그러면 누군가 1명을 앉히는 경우의 수는 이것은 같으니까 하나. 이거 2개, 이거 3개니까 이런 것도 알 수 있겠구나.
<SYNC Start=1990914><P Class=KRCC>
세 번째, 1명을 배치하는 경우의 수는 몇 개구나? 3가지구나라는 사실을 알 수가 있어요. 그래서 1명을 먼저 배치하는 경우의 수는 3가지가 되고
<SYNC Start=2007581><P Class=KRCC>
나머지를 배열하면, 결국 이 2개의 숫자는 같겠구나라는 사실도 알 수 있습니다. 실제로 6!은 뭐니까요? 6×5!이니까 6을 2로 나누게 되면 3으로 바로 나오죠?
<SYNC Start=2022809><P Class=KRCC>
그래서 어떻게 생각하든 같은 답을 도출해 낼 수가 있습니다. 그래서 원순열부터 해 가지고 원순열의 활용까지 쭉 가봤는데, 좀 연습이 많이 되어 있어야 돼요.
<SYNC Start=2035715><P Class=KRCC>
그래서 여러분들이 그냥 바로 암기해서 풀면 다음번에 응용을 못해요. 그래서 직접 그림을 그려 가지고 한 땀, 한 땀 따져서, 자리가 같은 경우의 수는 몇 개인지.
<SYNC Start=2047873><P Class=KRCC>
혹은 1명을 먼저 배치하는 경우의 수는 몇 개인지 직접 따져보셔야 돼요. 그래서 손노동을 많이 하는 만큼 성적도 많이 오를 거예요. 그다음 볼게요.
<SYNC Start=2059400><P Class=KRCC>
중복순열입니다. 순열 앞에 중복이 붙었어요. 그러면 굉장히 심플할 것 같죠? 서로 다른 n개 중에서, 조건이 추가됐습니다. 중복을 허락한대요. 중복을 허락한다.
<SYNC Start=2071825><P Class=KRCC>
중복을 허용해서 일렬로 나열한대요. 그러면 수능 버전에서 중복만 하나 추가됐을 뿐이에요. 그러면 얘는 어떤 기호를 쓰느냐면, 순열은 P를 썼잖아요. 중복순열은 ∏를 씁니다.
<SYNC Start=2084822><P Class=KRCC>
여러분들이 알고 있던 원주율 ∏의 대문자 버전이에요. 그래서 서로 다른 n개 중에서 중복을 허용해서 r개를 택해서 일렬로 나열하라는 의미입니다.
<SYNC Start=2096605><P Class=KRCC>
그러면 예시를 볼게요. 2∏3. 서로 다른 2개 중에서 중복을 허용해서 3개를 택하라. 그러고 나서 일렬로 나열하라는 거죠.
<SYNC Start=2107515><P Class=KRCC>
순열과의 차이점이 극명하게 보이죠. 순열은 r이 n보다 항상 작거나 같았어야 됐어요. 그렇잖아요. 있는 것 중에서 중복을 허용하기 때문에 최대로 많이 뽑아봤자
<SYNC Start=2121471><P Class=KRCC>
있는 것 내부에서 볼 수 있으니까. 그렇죠? 그런데 중복을 허용하게 되면 똑같은 게 있어도 여러 번 뽑을 수 있죠. 그러니까 개수가 더 앞 숫자보다 커질 수가 있는 겁니다.
<SYNC Start=2133563><P Class=KRCC>
그래서 1, 2로 중복을 허락해서 만들 수 있는 세 자리 자연수까지 나올 수 있다는 거죠. 그래서 두 개로 중복을 허용해서 세 자리 자연수를 만들라는 건 뭐냐면
<SYNC Start=2145997><P Class=KRCC>
세 칸만큼 나열됐다는 얘기예요, 세 칸만큼 나열됐다. 그렇죠? 세 자리 자연수를 만들려면 새 자리였어야 하잖아. 그 상태에서 이 앞에 올 수 있는 경우의 수는 1 또는 2니까 두 가지.
<SYNC Start=2160574><P Class=KRCC>
그다음에 올 수 있는 것도 2가지. 그다음에 올 수 있는 것도 2가지가 되겠죠? 그러고 나서 곱의 법칙을 적용해 주시면, 2의 몇 제곱?
<SYNC Start=2171644><P Class=KRCC>
3제곱이 된다는 것을 알 수 있습니다. 결국 이게 2∏3이 된다는 이야기죠. 그래서 순열하고 똑같은데, 중복을 허용한다. 여기까지 기억을 해 주시면 좋겠습니다.
<SYNC Start=2185011><P Class=KRCC>
그러면 얘도 마찬가지로 일반화를 시켜 봐야 될 것 같아요. 일반화를 시키게 되면 n∏r인데, 이 결과는 n의 r제곱이 나와요. n의 r제곱이라고 쓰여 있는데
<SYNC Start=2198036><P Class=KRCC>
이걸 매번 암기하시면 여러분이 헷갈릴 수 있어요. r의 n제곱인가? n의 r제곱인가? 그렇기 때문에 원리를 이해하셔야 돼요, 의미.
<SYNC Start=2207967><P Class=KRCC>
서로 다른 n개 중에서 중복을 허용해서 r개만큼 택해, 일렬로 배치해라. 그러면 논리적으로 생각해 보면 r개를 일렬로 배열하면 이렇게 r개 칸만큼 있을 거 아닙니까? 그렇죠?
<SYNC Start=2224439><P Class=KRCC>
그러니까 서로 다른 n개 중이니까, 처음에 n개. 중복을 허용하니까 똑같이 n개, n개, n개. n개가 총 몇 개가 있는 거예요? r개만큼 있는 거니까 n을 총 몇 번 곱하는 건가요?
<SYNC Start=2237671><P Class=KRCC>
r을 곱하는 거잖아요. 그래서 지수법칙에 의해서 n의 r제곱이 되겠네요. 이렇게 기억을 해 주셔야지, 나중에 잘못 외워 가지고 r의 n제곱이라고 풀면 큰일 나겠죠?
<SYNC Start=2250496><P Class=KRCC>
그래서 대표유형부터 한번 보도록 할게요. 대표유형, '두 집합 {1, 2}와 {a, b, c)에 대하여 다음을 구하시오.'라고 되어 있습니다.
<SYNC Start=2260557><P Class=KRCC>
첫 번째는 뭐냐면, 함수의 개수예요. 함수, 함수. 되게 많은 학생들이 경우의 수를 풀면서 함수의 개수를 구하는 게 어렵다고 이야기를 하는데, 그거는 함수를 몰라서 그래요.
<SYNC Start=2273943><P Class=KRCC>
그래서 함수가 뭔지부터 설명을 할게요. 함수는 딱 2개만 만족하면 돼요, 딱 2가지만. 첫 번째는 뭐냐면, 첫 번째는 정의역. 여기에서는 X죠. 정의역의 모든 원소가.
<SYNC Start=2290114><P Class=KRCC>
정의역의 모든 원소가.
<SYNC Start=2304054><P Class=KRCC>
주어가 나왔어요. 주어가 나오면 얘가 뭔가 액션을 취해야겠죠? 무슨 액션을 취할 거냐면, 선택을 해야 돼. 어떤 선택을 해야 되느냐면, 딱 한 번만 선택을 해야 돼요. 한 번의 선택을 한다.
<SYNC Start=2317827><P Class=KRCC>
한 번의 선택을 한다.
<SYNC Start=2326152><P Class=KRCC>
이 2개의 조건만 만족하면 함수가 됩니다. 정의역의 모든 원소가 한 번의 선택을 한다. 대표적인 예시가 뭐가 있느냐면, 여러분이 초등학교 때 중학교 배정을 받는 게 함수의 대표 사례예요.
<SYNC Start=2339058><P Class=KRCC>
왜냐하면 중학교는 의무교육과정이기 때문에 반드시 중학교를 가긴 가야 되거든요. 그러면 여러분들이 초등학교 6학년 때 이런 경험이 있을 겁니다.
<SYNC Start=2348903><P Class=KRCC>
‘너 중학교 어디 배정됐어? 나 A 중학교야.’ ‘어? 나도! 그러면 우리 같이 가면 되겠다.’ 이런 얘기를 하거나, ‘너 B 중학교 됐어? 나랑 떨어졌네.’ 이런 얘기도 했을 거예요.
<SYNC Start=2359186><P Class=KRCC>
무슨 얘기를 하고 싶느냐? 같은 중학교에 배정됐던 친구들 기억나시죠? 같은 중학교 때 배정됐다는 건 뭐가 허용됐다는 걸까요?
<SYNC Start=2367980><P Class=KRCC>
바로 중복이 허용됐다는 거예요. 그래서 이 선택에는 제한이 없어 가지고 중복이 허용되는 그런 선택이 바로 함수예요.
<SYNC Start=2381085><P Class=KRCC>
그래서 X의 모든 원소가 한 번의 선택을 하는데, 중복을 허용한다는 특징을 가지고 있습니다.
<SYNC Start=2388758><P Class=KRCC>
그러면 ‘선생님, 중복 허용되는 것까지는 좋아요. 그런데 이게 중복순열인지, 아니면 뒤에서 배울 중복조합인지 어떻게 아나요? 함수는 선택이니까 조합 아닌가요?’ 이런 질문을 해요.
<SYNC Start=2400676><P Class=KRCC>
이제부터 설명을 할게요. X라는 집합이 있고요. Y라는 집합이 있어요.
<SYNC Start=2411199><P Class=KRCC>
이때 X에서 Y로 가는 집합을 제가 함수 f라고 명명을 할게요. 그러면 여기에 있는 정의역에 있는 원소가 Y에 있는 공역의 원소를 선택하는 거잖아요.
<SYNC Start=2422929><P Class=KRCC>
그래서 결과적으로 뭐가 나오게 돼요? 함숫값들이 나오게 돼요. 그래서 1이 선택할 수 있는, 즉 f(1)의 값으로 가능한 것은 a, b, c 3가지가 되죠.
<SYNC Start=2438258><P Class=KRCC>
여기에다가 a, b, c 3가지가 되니까 경우의 수 3개가 됩니다. 마찬가지, f(2)로 가는 값도 중복을 허용하기 때문에 a, b, c 3가지가 되죠. 그래서 여기도 3가지가 돼요.
<SYNC Start=2452267><P Class=KRCC>
결국 서로 다른 3개의 원소 중에서 중복을 허용해서 여기에 나열하는 거잖아요. a, a. a, b. a, c 이런 식으로 나열하는 것이기 때문에 순열이 되고요.
<SYNC Start=2463287><P Class=KRCC>
결과적으로는 이것들의 선택을 세트로 모아놓은 게 함수이기 때문에 곱의 법칙을 적용해서 3²이 되겠습니다.
<SYNC Start=2473214><P Class=KRCC>
정답은 9예요. 그래서 사실은 중복순열이라는 개념을 모르더라도 곱의 법칙을 통해서 함수의 개수를 찾을 수가 있어요.
<SYNC Start=2481811><P Class=KRCC>
그런데 결과적으로 봤을 때 얘는 결국 중복을 허용해서 여기에 있는 원소들을 나열하는 형태니, 결국 '얘를 3∏2라고 생각할 수 있겠구나.'라는 결론을 얻을 수 있는 거죠.
<SYNC Start=2495179><P Class=KRCC>
그래서 함수의 개수를 찾는 건 중복순열의 대표 유형으로 자리가 잡힌 거예요. 그렇지만 사실 몰라도 풀 수는 있다는 것.
<SYNC Start=2505784><P Class=KRCC>
그래서 함수 내용을 몰랐기 때문에 함수의 개수를 찾는 걸 잘 못 찾으셨던 겁니다. 그러면 함수랑 또 세트인 애가 하나 있죠. 여러분들이 별로 좋아하시지 않는, 매번 헷갈리는 그 녀석.
<SYNC Start=2519981><P Class=KRCC>
바로 일대일함수입니다. 함수와 일대일함수의 대표적인 차이점은 뭘까요? 일대일함수.
<SYNC Start=2529214><P Class=KRCC>
일단 일대일함수는 함수예요. 이름이 함수라고 붙어 있잖아요. 그런데 종류가 하나 추가된 거니까, 얘는 함수이긴 함수인데 특정한 조건을 갖춘 함수가 되겠죠.
<SYNC Start=2540351><P Class=KRCC>
그러면 그 특정한 조건이 뭐냐면, 제가 좀 더 쉽게 설명해 드릴게요. 얘는 이렇게 기억하면 여러분들이 훨씬 와 닿을 거예요. 경쟁이 없는 함수다.
<SYNC Start=2556266><P Class=KRCC>
경쟁이 없는 함수라는 건 어떤 의미냐면, 내가 선택한 걸 다른 사람이 선택할 수 없다는 거예요. 그러니까 정의역에 있는 원소들끼리 중복해서 선택을 하지 않는다는 거예요.
<SYNC Start=2568378><P Class=KRCC>
내가 고른 건 다른 사람이 고를 수 없어. 대표적인 사례가 뭐가 있느냐면, 주민등록번호가 있어요. 여러분들은 태어나면 고유의 주민등록번호를 받는데요.
<SYNC Start=2578417><P Class=KRCC>
그 번호는 어느 누구하고 겹칠 수가 없어요. 그래서 내 번호를 다른 사람하고 공유하지 않는, 즉 나한테만 고유로 번호가 부여되는 그런 상황을 일대일함수적 상황이라고 생각하시면 돼요.
<SYNC Start=2594431><P Class=KRCC>
그러면 경쟁이 없다는 건 뭐라고요? 중복을 허용한다, 안 한다? 중복을 허용하지 않는다는 얘기예요. 그런데 아까 함수가 뭐였어요?
<SYNC Start=2605482><P Class=KRCC>
중복순열이었죠. 그러면 당연히 일대일함수는 무슨 순열이 되겠어요? 중복이 안 되는 순열. 얘는 그냥 순열이 되겠구나.
<SYNC Start=2618390><P Class=KRCC>
중복을 허용하지 않았으니까 그냥 일반순열이 되겠구나라는 사실을 알 수가 있겠네요. 그러면 다시 여기로 돌아갈게요. 여기로 돌아가서 f(1)이 선택할 수 있는 것은 a, b, c 3개죠. 그렇죠?
<SYNC Start=2632391><P Class=KRCC>
그래서 3개가 동일하게 가는데, 이제 일대일함수가 되는 순간 중복을 허용하지 않으니까, 여기 2는 f(1)이 선택했던 것을 고를 수가 없어요. 무슨 말이라고요?
<SYNC Start=2644442><P Class=KRCC>
이 두 값이 달라야 된다고요. 그래서 몇 개로 줄게 되느냐면, 1이 선택한 거 하나를 더 이상 고를 수 없기 때문에 여기가 2개로 들어오고요.
<SYNC Start=2655386><P Class=KRCC>
결과적으로 곱의 법칙을 통해서 3×2가 되는 거예요. 이 부분이 뭐로 바뀐다고요? 3×2=6이 됩니다. 그러면 뭐라고요? 이게 결과적으로 '이건 순열의 수 3P2가 되는구나.'라는 사실을 알 수 있습니다.
<SYNC Start=2676340><P Class=KRCC>
그래서 순열 하는 순간 일대일함수의 개수와 똑같다는 게 여러분 머릿속에 박혀 있었으면 좋겠어요. 왜냐?
<SYNC Start=2685070><P Class=KRCC>
순열은 중복을 허용하지 않기 때문에. 일대일함수는 경쟁이 없는 함수이기 때문에 중복이 없다. 이렇게 연결을 지어주시면 중복순열이 함수. 일대일함수는 순열.
<SYNC Start=2696145><P Class=KRCC>
이렇게 뭔가 머릿속에 조금 정립이 되실 거예요. 이렇게 우리가 중복순열의 수 n∏r까지 같이 가봤는데요. 이제 학생들이 가장 많이 하는 질문이라는 코너로
<SYNC Start=2711380><P Class=KRCC>
제가 궁금한 부분들을 시원하게 해결해 드린다고 했잖아요. 그러면 원순열과 중복순열에서 가장 많이 나오는 질문은 뭐냐면, 이 단원명이 사실 여러 가지 순열이에요.
<SYNC Start=2724358><P Class=KRCC>
그냥 순열이긴 한데 앞에 ‘여러 가지’가 붙어 있으니까 문제가 섞어서 나옵니다. 그래서 학생들이 이런 질문을 해요. 어떤 문제가 원순열인지, 중복순열인지 구별이 잘 안 된다.
<SYNC Start=2736049><P Class=KRCC>
시험을 볼 때는 어떻게 해야 되느냐? 정답은 바로 이렇습니다. 회전해서 같은 것이 있는 순열은 원순열이었죠. 그렇죠? 그래서 문제의 조건에 회전해서 같은 것으로 취급한다는 조건이 붙어 있으면
<SYNC Start=2749377><P Class=KRCC>
원순열을 떠올리시면 돼요. 중복을 허용한다는 단서가 있다. 그러면 중복순열입니다. 그런데 중복을 허용한다는 게 대놓고 중복을 허용할 거라고 나오기도 하지만
<SYNC Start=2763099><P Class=KRCC>
아까 함수의 사례에서처럼 함수라는 개념에 선택의 중복이 포함된다는 게 이미 녹아들어가 있죠. 그래서 여러분은 중복을 허용하는 어떤 사례들.
<SYNC Start=2773542><P Class=KRCC>
함수든지 이런 것들을 머릿속에 어느 정도 정립해 두시면, 문제를 보자마자 ‘이거 중복순열의 문제구나.’라고 바로 해결을 하실 수가 있을 거예요.
<SYNC Start=2785295><P Class=KRCC>
그러면 이 내용들을 통해서 직접 문제를 같이 한번 볼게요. 내신 유형 문제입니다. A, B를 포함한 5명이 원형의 탁자에 둘러앉을 때 A와 B가 이웃하게 앉는 경우의 수를 구하라고 하네요.
<SYNC Start=2800551><P Class=KRCC>
한번 단서들을 볼게요. 이 문제를 분석해 보면.
<SYNC Start=2808257><P Class=KRCC>
원형의 탁자라는 말이 있어요. 그리고 마지막에 조건이 하나 붙어 있죠. 회전해서 일치하는 것은 같은 것으로 본다. 이런 표현이 있으면 100%예요. 원순열이구나.
<SYNC Start=2820704><P Class=KRCC>
얘는 원순열 문제예요. 그런데 조건이 또 하나가 있어요. 눈에 띄는 조건이 하나가 보이는데, 그게 바로 뭐냐? 이웃한대요. 이것도 아까 앞에서 설명했었죠. 이웃하는 순열.
<SYNC Start=2834674><P Class=KRCC>
그러면 이 2개의 개념을 묻고자 하는 거예요, 이 문제는. 그러면 내가 이걸 분석했으니까 어떻게 해야겠어요? 어떻게 접근해야 할지 접근법을 살펴봐야 되겠죠?
<SYNC Start=2846504><P Class=KRCC>
우선 이웃하는 순열은 어떻게 생각한다고 했어요? 이웃하는 것을 하나로 취급한다고 했었죠. 한 묶음으로 취급하자.
<SYNC Start=2859608><P Class=KRCC>
그다음 원순열은 2가지 생각으로 바뀐다고 했는데, 전체 순열의 수에서 자리가 같은 경우의 수만큼 나눠 주면 된다고 했어요.
<SYNC Start=2866654><P Class=KRCC>
자리가 같은 경우의 수만큼. 혹은 1명을 배치하고 나머지를 배치하는 경우의 수로 생각해 주셔도 되겠죠. 그다음 세 번째, 여기에서 끝나면 안 되죠.
<SYNC Start=2883263><P Class=KRCC>
한 묶음 취급했던 것들끼리 어떤 일들도 일어나요? 자리가 바뀌는 경우도 일어나요. 그래서 자리가 바뀌는 경우의 수.
<SYNC Start=2898662><P Class=KRCC>
이렇게 3개의 세트로 같이 보시면 문제를 해결할 수가 있습니다. 같이 가볼게요. 한 묶음 취급할 거예요. 그래서 누구를 한 묶음 취급할 거냐?
<SYNC Start=2908585><P Class=KRCC>
A, B를 한 묶음 취급할 거죠. A, B를 한 묶음 처리하겠습니다. 그런 다음에 C, D, E가 있겠죠. 그러면 이제 총 몇 명이 됐는지 세어볼게요.
<SYNC Start=2920515><P Class=KRCC>
1명, 2명, 3명, 4명. 그러면 순열의 수는 몇 팩토리얼? 4!이 될 건데, 자리가 같은 경우의 수만큼 나눠야 하는데 우리 아까 3명 앉혔을 때 자리가 같은 경우는 3개였죠?
<SYNC Start=2933756><P Class=KRCC>
n명일 때 n개였어요. 그러니까 당연히 자리가 같은 경우의 수, 4명일 때는 당연히 4개가 되겠죠. 그래서 3!이 되겠습니다.
<SYNC Start=2944341><P Class=KRCC>
여기에서 끝나면 큰일 나죠. 이제 뭐도 고려해야 된다? 자리가 바뀌는 경우의 수. 묶음 내에서 자리가 바뀌는 경우의 수를 고려해야 하는데, 2명이죠. 그러니까 몇 팩토리얼?
<SYNC Start=2953811><P Class=KRCC>
2!이 된다는 것도 알 수 있어요. 그런데 이 모든 세트는 동시에 잇따라서 우리가 고려한 거죠. 그러니까 무슨 법칙을 써야 돼요?
<SYNC Start=2963310><P Class=KRCC>
맞아요, 곱의 법칙을 쓰셔야 돼요. 그래서 곱하면 3!=6이고 2!=2니까 6×2=12가 정답이 되겠습니다. 그래서 이렇게 내신 유형도 같이 봤는데
<SYNC Start=2978530><P Class=KRCC>
여러분들이 문제를 풀 때 이 문제에 대한 단서들을 살펴보고, 어떤 내용을 묻고자 하는지를 낱낱이 분석해서 가셔야 돼요. 한 문제를 풀더라도 이런 식으로 분석하고 접근해서 문제를 해결하시면
<SYNC Start=2992663><P Class=KRCC>
여러분도 어느 순간부터는 저처럼 풀 수 있게 됩니다. 그래서 여러분들이 연습을 많이 하셨으면 좋겠습니다.
<SYNC Start=3001388><P Class=KRCC>
이제 여러분들하고 원순열하고 중복순열에 대해서 학습을 해 봤어요. 그래서 이제 곧 학습 내용 정리가 나갈 거고요. 뒷부분에서 이벤트가 나갈 건데
<SYNC Start=3011796><P Class=KRCC>
오늘이 1강이다 보니까 제가 선물을 많이 준비했습니다. 그래서 학습 내용을 정리하시고요. 그 뒤에 이벤트 문제를 보시고 참여하시면
<SYNC Start=3021316><P Class=KRCC>
제가 해당되는 학생들의 반 전체에게 선물을 보내 드리도록 하겠습니다. 감사합니다.
<SYNC Start=3029073><P Class=KRCC>
&nbsp;
</BODY>
</SAMI>