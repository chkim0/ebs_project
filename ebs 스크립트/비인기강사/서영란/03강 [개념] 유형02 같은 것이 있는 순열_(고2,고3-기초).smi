<SAMI>
<HEAD>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=10309><P Class=KRCC>
여러분들의 눈높이에서 개념부터 문제 해결에 이르는 길까지 차근차근 짚어드리겠습니다. EBS 수학 영역의 서영란입니다.
<SYNC Start=19800><P Class=KRCC>
이제 우리 두 번째 유형 시간에 왔는데요. 두 번째 유형에서 우리가 배울 내용은 같은 것이 있는 순열입니다. 같은 것이 있는 순열을 배우기 전에 제가 Q&A 게시판을 봤더니
<SYNC Start=31658><P Class=KRCC>
확률과 통계에서 배우는 순열과 고등수학(하)에서 배우는 순열의 차이점이 무엇이냐는 글이 게시판에 올라왔는데요.
<SYNC Start=39048><P Class=KRCC>
그래서 그 부분에 대해서 간단하게 언급하고 이번 시간에 배울 내용을 시작하도록 하겠습니다. 우리가 맨 처음에 고등수학(하)에서 배운 순열은 무엇이냐면
<SYNC Start=49429><P Class=KRCC>
서로 다른 n개에서 r개를 택해서 일렬로 나열하는 방법의 수입니다. 그냥 일반적으로 어떤 서로 다른 것이 있는데 그것들을 일렬로 나열하는 것을 순열이라고 합니다.
<SYNC Start=60958><P Class=KRCC>
그런데 우리가 확률과 통계 시간에 배운 순열은 무엇이냐면, 여러 가지 순열이라는 단원으로 좀 더 세분화가 됩니다. 첫 번째는 원순열, 두 번째는 중복순열, 세 번째는 같은 것이 있는 순열인데요.
<SYNC Start=74316><P Class=KRCC>
원순열은 일반적으로 일렬로 나열하는 수열을 원형으로 배열하는 것이고요. 그다음에 중복순열은, 원래 기존의 수열은 중복을 허용하지 않는데 중복을 허용한다는 조건을 붙여서 얘기하는 겁니다.
<SYNC Start=88659><P Class=KRCC>
그래서 지난 시간에 원순열과 중복순열, 이 2가지를 한꺼번에 묶어서 유형1에서 다뤘고요. 이번 시간에 다룰 유형2는 바로 같은 것이 있는 순열을 얘기하는데
<SYNC Start=101352><P Class=KRCC>
서로 다른 n개 중에서 일렬로 나열하는 것 중에 ‘서로 다른’이라는 조건을 변형해서 같은 것도 포함하고 있는데, 이것을 일렬로 나열하면 어떻게 될지가 우리가 이번 시간에 학습해야 될 내용이에요.
<SYNC Start=114110><P Class=KRCC>
그러면 같은 것이 있는 순열에 대해서 본격적으로 들어가 보도록 하겠습니다. 같은 것이 있는 순열이에요. 서로 다른 n개라는 표현이 없죠. 그렇죠?
<SYNC Start=124683><P Class=KRCC>
그래서 n개들 중에서 같은 것이 p개씩, q개씩, r개씩 있을 때 이들 n개를 모두 일렬로 배열하는 순열의 수는 하고 나와 있습니다.
<SYNC Start=133910><P Class=KRCC>
원래는 일반적으로 서로 다른 n개면 그냥 n!이 될 텐데, 지금 보시면 같은 것들을 일렬로 나열하는 수만큼 나눠 주고 있어요.
<SYNC Start=143508><P Class=KRCC>
그러면 같은 것이 있는 순열의 수는 같은 것들만큼 일렬로 배열하는 것을 나눠 주면 되는구나라고 생각을 하면 되는데, 구체적으로 왜 그렇게 되는지 예시를 통해서 알아보도록 하겠습니다.
<SYNC Start=156563><P Class=KRCC>
예제 1번을 보시면 a, a, a, b를 일렬로 배열하는 방법의 수를 구하는 문제인데요. 우선 우리가 이것을 어떻게 생각해 봐야 되느냐면, 기존에 알고 있는 지식은 일반적인 순열이에요.
<SYNC Start=168994><P Class=KRCC>
그렇기 때문에 a, a, a를 서로 다른 a로 분화한 다음에 일반적 순열에 대해서 생각을 해 보도록 할게요.
<SYNC Start=177761><P Class=KRCC>
그래서 첫 번째 생각은 무엇이냐면, 우리가 알고 있던 a, a, a, b를 서로 다른 것으로 인식해서 이렇게 첨자를 매겨줄게요. 그러면 a₁, a₂, a₃로 구분 지어서 보면 되겠죠.
<SYNC Start=193778><P Class=KRCC>
그러면 우리가 일반적으로 또다시 순열로 생각해 보면, 이것들을 일렬로 나열하는 것을 한번 쭉 써보도록 할게요. a₂로 시작하는 것. 그다음에 a₂a₃a₁b.
<SYNC Start=207523><P Class=KRCC>
그다음에 a₃로 시작하는 경우도 있겠죠? 그래서 제가 쭉 한번 얘네들을 서로 다른 거라고 인식했을 때 나오는 것들을 다 나열해 보았습니다.
<SYNC Start=218145><P Class=KRCC>
이렇게 되면 지금 현재 보니까 하나, 둘, 셋, 넷, 다섯, 여섯 개. 총 6가지가 나오죠? 그래서 이만큼이 다 6가지가 나오는구나라는 사실을 알 수가 있어요.
<SYNC Start=230017><P Class=KRCC>
그런데 실제로는 a₁, a₂, a₃가 전부 다 같은 것이죠. 그러면 얘네들은 사실 같은 것을 일렬로 배열하는 방법의 수라는 관점에서 본다면 어떻게 되겠나요?
<SYNC Start=244242><P Class=KRCC>
그냥 aaab로 볼 수 있겠죠. 얘네들을 지금 다르다고 인식해서 쭉 쓴 것과, 다 같은 것으로 본다면 aaab로 보게 된다는 얘기예요.
<SYNC Start=257315><P Class=KRCC>
즉 같은 것이 있는 순열의 수에서는 이 경우를 몇 가지로 센다? 한 가지로 센다는 이야기입니다. 그러면 물어볼게요. 원래 기존에 있는 순열의 수보다 같은 것을 포함하고 있는 순열의 수가
<SYNC Start=270620><P Class=KRCC>
점점 더 작겠죠. 지금 왜냐? 6가지를 하나로 세고 있으니까요. 그러면 6가지에서 1가지로 세는 것으로 가려면 어떻게 해야 된다?
<SYNC Start=281035><P Class=KRCC>
이 과정에서 ÷6이 되어야 한다는 사실을 알 수가 있어요. 그러면 이제 물어볼게요. 6이라는 숫자는 도대체 무슨 숫자일까요?
<SYNC Start=290316><P Class=KRCC>
지금 보시면 6이라는 숫자는 우리가 지금 같다고 봐야 될 것을 서로 다르다고 보고요. 같은 것을 서로 다른 것으로 취급해서
<SYNC Start=303090><P Class=KRCC>
&nbsp;
<SYNC Start=308726><P Class=KRCC>
나열한 경우의 수가 되는 거예요. 같은 것을 서로 다른 것으로 취급하여 나열하는 경우의 수다.
<SYNC Start=315519><P Class=KRCC>
&nbsp;
<SYNC Start=319258><P Class=KRCC>
즉 같은 것이 있는 것만큼 일렬로 나열한 경우의 수가 6이 된다는 거죠. 결국 3개를 일렬로 배열하는 거니까 3!, 그래서 그 값이 6이 되는구나라는 것을 확인해 보실 수 있습니다.
<SYNC Start=333004><P Class=KRCC>
그러면 결과적으로 aaab를 일렬로 나열하는 경우의 수는 어떻게 구할까요? 전체 순열의 수를 구한 다음에 같은 것들만큼. 같은 것들이 지금 현재 몇 개 있어요?
<SYNC Start=347478><P Class=KRCC>
3개만큼 있는 거죠. 그 경우만큼 나눠 주시면 되겠죠. 그래서 우리가 얻을 수 있는 결론은 무엇이다? 4라는 사실을 알 수가 있습니다.
<SYNC Start=357368><P Class=KRCC>
그래서 같은 것들만큼 일렬로 배열하는 수로 나눠 주시면 원하는 결과를 얻으실 수가 있어요. 그러면 우리가 이렇게도 생각을 해 볼 수 있지만 또 다르게도 볼 수 있겠죠.
<SYNC Start=368045><P Class=KRCC>
어떻게 하면 또 다르게 볼 수 있느냐. a랑 a랑 a는 서로 위치가 바뀌어도 전혀 영향을 주지 않아요. 그렇죠? 서로 순서를 바꿔도 전혀 영향을 주지 않기 때문에
<SYNC Start=380240><P Class=KRCC>
순열의 관점에서 생각하지 말고 그냥 4개의 자리 중에서 a가 들어갈 수 있는 자리를 선택만 해 주면 되겠죠. 무슨 관점에서 보겠다?
<SYNC Start=389490><P Class=KRCC>
선택. 조합의 관점에서 보겠습니다. 그러면 분명히 저 a들끼리는 서로 위치를 바꿔도 상관이 없어요. 그래서 a들끼리는. 그렇죠?
<SYNC Start=402006><P Class=KRCC>
a들끼리는 순서를 고려하지 않는다는 사실을 알 수 있어요. 그러면 a들끼리 순서를 고려하지 않는다는 것은 무엇이냐면, 이것을 어떻게 생각하겠다?
<SYNC Start=416488><P Class=KRCC>
조합의 관점에서 보겠다는 내용이거든요. 그래서 총 몇 개의 자리 중에서? 4개의 자리 중에서 a가 들어갈 자리를 선택할 거예요.
<SYNC Start=425691><P Class=KRCC>
a가 들어갈 자리를 선택하겠습니다. a가 들어갈 자리를 선택한다. 조합이죠? 조합이니까 선택만 해 주시면 돼요.
<SYNC Start=439393><P Class=KRCC>
그러면 서로 4개의 자리 중에서 a가 들어갈 3자리를 선택하면 되니까 4C3이 되겠죠. 4C3은 4C1과 같죠. 그래서 4C1과 같아서 그 경우의 수는 4가 되겠습니다.
<SYNC Start=457405><P Class=KRCC>
그래서 같은 것이 있는 순열의 수에 대해서 쭉 알아봤는데, 같은 것들이 있는 것만큼 이들을 일렬로 배열하는 경우의 수를 전체 순열의 수에서 나눠 주시면 돼요.
<SYNC Start=468494><P Class=KRCC>
그래서 같은 것이 p개씩, q개씩, r개씩 있다고 했기 때문에 p개씩 있는 것을 일렬로 배열하는 방법의 수, q개씩 있는 것을 일렬로 배열하는 방법의 수.
<SYNC Start=479978><P Class=KRCC>
r개씩 있는 것을 일렬로 배열하는 방법의 수만큼 나누어 주시면 같은 것이 있는 순열을 해결하실 수가 있습니다.
<SYNC Start=488495><P Class=KRCC>
그러면 기본적인 내용에 대해서 설명을 했고요. 여기에서 또 얘기하고 싶은 건, 순열의 활용이에요. 같은 것이 있는 순열은 이런 식으로도 나올 수가 있어요. 바로 무엇이다?
<SYNC Start=500461><P Class=KRCC>
최단거리로 이동하는 경우의 수입니다. 최단거리로 가는 경우의 수를 봐야 되는데, 지금 그림과 같은 도로망이 있어요.
<SYNC Start=508880><P Class=KRCC>
이 도로망을 따라서 A 지점에서 출발해서 B 지점까지 최단거리로 가는 경우의 수를 구할 거예요. 그러면 한번 생각해 봅시다.
<SYNC Start=517755><P Class=KRCC>
내가 A부터 B까지 만약에 이동하고 싶으면 어떻게 가야겠어요? 우선 오른쪽으로 한 칸, 다시 오른쪽으로 한 칸, 오른쪽으로 한 칸, 그리고 위로 한 칸 가면 되겠죠.
<SYNC Start=528908><P Class=KRCC>
그래서 여러분들은 이렇게 생각할 수가 있어요. 어떻게 생각할 수 있다? 오른쪽으로 한 칸, 오른쪽으로 한 칸, 그리고 오른쪽으로 한 칸, 위로 한 칸 가면 A부터 B까지 갈 수 있구나.
<SYNC Start=544028><P Class=KRCC>
그러면 이 경우 말고 또 있죠? 오른쪽으로 한 칸, 오른쪽으로 한 칸, 위로 한 칸, 다시 오른쪽으로 한 칸. 그렇죠?
<SYNC Start=551873><P Class=KRCC>
그래서 오른쪽으로 한 칸, 오른쪽으로 한 칸, 위로 한 칸, 오른쪽으로 한 칸으로 갈 수 있을 거예요. 또 다르게도 생각할 수 있죠.
<SYNC Start=560141><P Class=KRCC>
다시 오른쪽으로 한 칸, 위로 한 칸, 오른쪽, 오른쪽. 그래서 오른쪽 한 칸, 위로 한 칸, 오른쪽, 오른쪽. 하나 더 있죠?
<SYNC Start=570450><P Class=KRCC>
먼저 위로 간 다음에 나중에 다 오른쪽으로 이동하는 방법. 그리고 우리가 얻은 이 결과를 잠깐 보시면 어떤 특징을 가지고 있나요? 결과적으로 무엇을 나열했어요?
<SYNC Start=582864><P Class=KRCC>
맞습니다. 화살표, 4개의 화살표를 나열했어요. 깨끗이 쓸게요. 4개의 화살표를 일렬로 나열한 형태가 돼 버렸어요.
<SYNC Start=599119><P Class=KRCC>
&nbsp;
<SYNC Start=602492><P Class=KRCC>
그런데 이 4개의 화살표는 총 구성원들이 누가 있나 봤더니, 오른쪽으로 가는 게 총 3개가 있고요. 위로 가는 게 총 하나가 있다는 상황을 알 수 있어요.
<SYNC Start=613540><P Class=KRCC>
결과적으로 뭐다? 같은 것을 포함하고 있네요. 몇 개? 3개나 포함하고 있네요. 총 몇 개 나열할 건데요? 4개 나열할 건데요. 그러니까 당연히 4!을 3!로 나눈 4가 이 문제에 대한 정답이 되겠죠.
<SYNC Start=628838><P Class=KRCC>
그렇죠? 그래서 별거 없어요. 그래서 이거는 최단거리의 문제이긴 한데, 같은 것을 포함한 순열로 인식할 수 있구나. 화살표 4개를 일렬로 나열할 건데
<SYNC Start=639531><P Class=KRCC>
오른쪽으로 가는 건 똑같은 게 3개가 있기 때문에. 그래서 이런 식으로 접근을 하시면 되겠습니다. 그러면 이제 뭐에 대해서도 살펴볼 수 있을까요?
<SYNC Start=651231><P Class=KRCC>
아까 설명해 드린 대로 조합의 관점에서도 살펴볼 수 있을 거예요. 지금 보시면 이 화살표 오른쪽들짜리는 서로 위치가 바뀌어도 결과가 그대로예요. 순서가 중요하지 않다는 거죠.
<SYNC Start=664595><P Class=KRCC>
순서가 중요하지 않으면 조합이죠. 그렇기 때문에 총 4개의 자리 중에서 오른쪽으로 가는 화살표 자리 3개를 선택해 주시면 되겠네요.
<SYNC Start=674339><P Class=KRCC>
그러면 아까에서는 a였지만 이번에는 어떻다고요? 오른쪽으로 가는 화살표들끼리는 순서를 고려할 필요가 없다. 그러니 조합이니, 이제 오른쪽 화살표가 들어갈 자리를 뭐만 해 주면 된다?
<SYNC Start=688889><P Class=KRCC>
선택만 해 주면 되겠구나. 그래서 4C3에서 4C1이 되고 결과는 4로 동일하게 됩니다. 신기하죠? 아까와 달리 이번에는 A가 아니고 오른쪽 화살표에 대해서로 싹 다 문제 내용이 바뀐 거예요.
<SYNC Start=706322><P Class=KRCC>
그러면 이제 또 다른 문제 하나 가볼게요. 또 다른 건 또 뭐가 있을까? 같은 것이 있는 순열의 수의 활용에서 순서가 정해진 순열의 수가 있어요.
<SYNC Start=718375><P Class=KRCC>
1, 2, 3, 4를 일렬로 배열할 때 1, 2, 3만을 크기순으로 배열하는 방법의 수. 그러니까 나열할 건데 1, 2, 3은 어쨌건 1, 2, 3 순서로 있어야 된다는 뜻이에요.
<SYNC Start=729439><P Class=KRCC>
그러면 이 1, 2, 3을 제가 하트로 보겠다. 하트로 보면 어떤 일이 일어나는지 볼게요. 결국 하트 3개와 4 하나를 일렬로 나열하는 거죠. 그래서 하트, 하트, 하트, 4.
<SYNC Start=750336><P Class=KRCC>
이렇게 쓸 수 있고요. 하트 2개에 4, 하트 하나 쓸 수 있고요. 하트를 한 다음에 4, 하트, 하트로 볼 수 있고요. 4가 맨 앞에 와 있고 하트 3개를 연달아 그릴 수도 있겠죠. 제가 왜 이렇게 했느냐?
<SYNC Start=767177><P Class=KRCC>
내가 똑같이 봤던 1, 2, 3을 이 자리에 그대로 갖다가 쓰면 돼요. 그대로 갖다 써볼게요. 그러면 얘는 결과적으로 1, 2, 3, 4로 얘기하는 거고요.
<SYNC Start=777241><P Class=KRCC>
내가 똑같이 봤던 이 하트 자리에 1, 2, 3 순서로 그대로 쓰자고요. 그러면 1 2 4 3. 얘는요? 1 4 2 3. 이 경우는요? 4 1 2 3이 되겠구나. 어떤가요?
<SYNC Start=791748><P Class=KRCC>
똑같이 보게 되면 이 자리에 우리가 문제에서 정해 준 순서대로 쓰기만 하면 되니까 되게 편리하게 갈 수 있죠? 결과적으로 뭐다?
<SYNC Start=800850><P Class=KRCC>
같은 것을 포함한 순열의 수로 고려해서 풀 수 있겠네요. 같은 게 총 몇 개가 있나요? 3개가 있죠. 그래서 4!을 3!로 나눈 4가 결국 이 문제에 대한 정답이 되는 겁니다.
<SYNC Start=815573><P Class=KRCC>
그리고 하나 더, 크기순. 크기순으로 배열했다. 그러면 이건 무슨 뜻이죠? 크기순으로 배열했다. 순서가 이미 어떻게 됐다는 얘기예요?
<SYNC Start=827943><P Class=KRCC>
고정됐다는 뜻이에요. 순서가 고정됐다는 뜻은 뭐를 고려하지 않아도 되겠어요? 순서를 고려하지 않아도 돼요. 순서를 고려하지 않아도 된다는 것은 순열이 아니죠.
<SYNC Start=843062><P Class=KRCC>
그러면 이제 여러분이 배운 건 딱 하나 있습니다. 뭐죠? 조합이에요. 그래서 순서를 고려하지 않으니까 얘는 조합으로 해결할 수 있겠구나라고 생각을 할 수 있다는 거죠.
<SYNC Start=853947><P Class=KRCC>
그러면 조합의 관점에서 본다면 결국 내가 뽑을 건데 1, 2, 3은 크기순으로 배열하기로 했으니까 1, 2, 3을 뽑기만 하면 되겠네.
<SYNC Start=864161><P Class=KRCC>
즉 4개의 자리 중에서 1, 2, 3이 들어갈 자리를 3개 뽑아내면 되는 거죠. 그래서 다시 조합의 관점에서 보면, 지금 누구들끼리는?
<SYNC Start=874352><P Class=KRCC>
1, 2, 3끼리는 순서를 고려하지 않아도 돼요. 그렇죠? 크기순으로 하겠다고 했으니까. 그러면 1, 2, 3이 들어갈 자리를 어떻게만 해 주면 돼요? 선택만 해 주시면 돼요. 몇 자리?
<SYNC Start=888667><P Class=KRCC>
3자리. 그래서 4C3은 4C1과 같으니까 정답은 똑같이 4가 됩니다. 지금 제가 계속 처음에 썼던 판서를 그대로 유지한 상태로 계속 뭔가 변형만 하고 있죠?
<SYNC Start=904239><P Class=KRCC>
이제 우리 같이 예제를 한번 모아서 살펴볼게요. 예제를 싹 다 모아보면, 짠! 예제 1, 예제 2, 예제 3의 정답과 풀이 과정이 다 똑같은 걸 알 수 있어요.
<SYNC Start=918831><P Class=KRCC>
그래서 여러분이 지금까지 우리가 다룬 예제 3개를 눈으로 계속 보고 ‘얘네 3개는 원리가 같아. 같은 내용이야.’라고 인식을 하시면 되는데, 어떻게 하면 그걸 인식할 수 있느냐.
<SYNC Start=930094><P Class=KRCC>
얘는 a, a, a, b를 일렬로 배열하는 거죠. 두 번째 문제는 오른쪽으로 가는 화살표 3개, 위로 가는 화살표 하나 해 가지고 그 화살표들을 일렬로 나열하면 되는데
<SYNC Start=944191><P Class=KRCC>
오른쪽으로 가는 화살표를 a, 위로 가는 화살표를 b로 본다면 결과적으로 aaab를 일렬로 나열하는 것과 똑같은 상황이 될 거예요.
<SYNC Start=956560><P Class=KRCC>
하나 더, 예제 3번에서 1, 2, 3을 일렬로 배열할 때 1, 2, 3만을 크기순으로. 크기가 결정됐다는 건 자리가 정해졌다는 거니까 순서를 고려할 필요가 없어요.
<SYNC Start=967560><P Class=KRCC>
그러면 똑같이 생각하면 되겠죠? 그래서 얘를 aaa로 보면 결국 aaa와 4를 b로 보면 b를 일렬로 배열하는 방법의 수와 정확히 같습니다.
<SYNC Start=980668><P Class=KRCC>
그래서 여러분들이 예제 1번, 예제 2번, 예제 3번을 모두 같은 것이 있는 순열인데, 같은 것이 몇 개 있다? 3개 있는 순열의 수라고 인지만 하시면 돼요.
<SYNC Start=992557><P Class=KRCC>
그래서 3가지 문제가 같은 것을 지향하고 있구나. 이 내용을 알고 계시면 좀 더 이해가 편하실 겁니다.
<SYNC Start=1000678><P Class=KRCC>
문제 전에 일단 순열 파트를 총 정리하고 갈 건데요. 우리가 순열을 총 3가지를 배웠죠? 첫 번째 원순열, 그다음 두 번째 중복순열, 세 번째는 같은 것이 있는 순열이에요.
<SYNC Start=1012042><P Class=KRCC>
원순열은 어땠냐면 서로 다른 n개 중에서 r개를 택해서 원형으로 배열하는 게 원순열이었고요. 중복순열은 순열이긴 순열인데 중복을 허용하는 순열이 중복순열이었습니다.
<SYNC Start=1024483><P Class=KRCC>
그다음 마지막으로 이번 시간에 배운 같은 것이 있는 순열은, 보세요. 서로 다른 n개, 서로 다른 n개인데 조건이 변형됐죠?
<SYNC Start=1032291><P Class=KRCC>
같은 것을 포함한 n개 중에서 그중에서 택해서 일렬로 나열하는 것이 같은 것이 있는 순열이에요. 그러면 경우의 수를 구하는 법은 제가 다 알려드렸어요.
<SYNC Start=1042956><P Class=KRCC>
원순열은 어떻게 한다고요? 전체 순열의 수를 구한 다음에 자리가 같은 경우의 수만큼 나눠 주시거나 아니면 1명을 배치하면 나머지 자리가 다 구별되니까
<SYNC Start=1052962><P Class=KRCC>
그다음에 순열을 고려하시면 된다고 했었죠. 그리고 중복순열에서는 제가 이걸 강조했었어요. n∏r, 이거 계산하는 법. 기호가 새로운 게 등장한다?
<SYNC Start=1062849><P Class=KRCC>
그러면 그 기호를 보고 어떻게 계산하는지 정확하게 인지하고 계셔야 하고요. 그다음에 같은 것을 포함한 것은 같은 것들의 개수가 정해져 있을 때
<SYNC Start=1071580><P Class=KRCC>
걔네들을 일렬로 나열하는 것만큼 나누어서 해결을 하시면 되겠습니다. 그러면 단원만 알면 이제 여러분들은 막 풀 수가 있을 거예요.
<SYNC Start=1081623><P Class=KRCC>
그런데 도대체 문제를 딱 접했을 때 이게 무슨 단원인지 잘 모르시잖아요. 그래서 그 문제가 어떤 단원인지 냄새를 맡을 수 있는 감을 잡는 방법을 알려드릴게요.
<SYNC Start=1092276><P Class=KRCC>
원순열은 분명히 이 조건이 나와요. 이 조건이 뭐냐? 회전해서 같은 것은 하나로 본다는 조건이 문제에 반드시 있어요. 그래서 회전해서 일치하는 것은 같은 것으로 본다는 문장이 딱 떴다.
<SYNC Start=1105294><P Class=KRCC>
그러면 여러분들은 ‘이거 원순열이야.’라고 해서 원순열 문제로 해결하시면 되겠습니다. 그리고 중복순열의 경우는 중복을 허용한다는 단어가 숨겨져 있거나 대놓고 드러나거나, 둘 중 하나일 거고요.
<SYNC Start=1117827><P Class=KRCC>
그다음에 같은 것이 있는 순열은, 같은 것이 있는데 일렬로 나열하면 같은 것이 있는 순열이겠죠? 그리고 두 번째, 최단거리 문제. 이게 조금 파악하기 어려운데
<SYNC Start=1127284><P Class=KRCC>
최단거리 문제는 같은 것이 있는 순열의 대표 유형이니까 꼭 기억을 하고 계세요. 그리고 세 번째는 순서가 정해진 경우는 똑같은 것으로 보고 나열한 다음에
<SYNC Start=1137471><P Class=KRCC>
문제에서 맞춘 순서대로 나열만 하면 되니까, 같은 것이 있는 순열로 볼 수 있겠구나라고 생각을 해 두시면 좋을 것 같습니다.
<SYNC Start=1146261><P Class=KRCC>
그러면 이제 우리 항상 매번 개념 단원에서 하는 코너 있죠? 학생들이 많이 하는 질문 코너로 가겠습니다.
<SYNC Start=1154299><P Class=KRCC>
문제에 따라서 어떤 경우는 다른 걸 같게 보고 순열로 해결을 하던데, 다른 것을 같게 보는 경우는 언제인가요? 이게 굉장히 헷갈리죠.
<SYNC Start=1163994><P Class=KRCC>
다른 걸 같게 보는 경우는 이런 경우를 얘기해요. 순서가 정해진 순열의 수. 순서가 이미 정해졌어요. 그러면 순서가 정해진 것들을 같은 것으로 보고 문제를 해결하셔야 돼요.
<SYNC Start=1177183><P Class=KRCC>
왠지 이제 논리적으로 설명을 해 볼게요. 보세요. 순서가 정해졌다. 무슨 뜻이에요? 순서가 이미 정해졌다는 것은 순서를 고려할 필요가 있다, 없다?
<SYNC Start=1188821><P Class=KRCC>
고려할 필요가 없다는 얘기예요. 순서를 고려할 필요가 없다는 것은 우리가 뭐만 하면 된다는 뜻이에요? 선택만 하면 된다는 뜻이니까 조합으로도 생각을 할 수가 있겠죠. 그렇죠?
<SYNC Start=1201500><P Class=KRCC>
뿐만 아니라 순서가 고려되지 않는다는 건 얘네들이 자리가 바뀌어도 상관이 있다는 얘기예요, 없다는 얘기예요? 전혀 상관없다는 얘기죠. 그래서 뭐로 취급할 수 있다?
<SYNC Start=1211478><P Class=KRCC>
같은 것으로 보면 됩니다. 그래서 같은 것으로 보고 푼다. 그래서 같은 것으로 어떻게 하면 돼요? 취급하고 문제를 해결하시면 되겠습니다.
<SYNC Start=1222967><P Class=KRCC>
그래서 이러한 생각의 고리에 따라서 여러분들이 같은 것으로 취급해서 같은 것이 있는 순열의 수로 계산을 하셔도 되고, 아니면 조합으로 문제를 해결하셔도 되겠습니다.
<SYNC Start=1234937><P Class=KRCC>
그러면 이 2가지 아이디어를 활용해서 문제들을 직접 해결해 보도록 하겠습니다.
<SYNC Start=1240550><P Class=KRCC>
&nbsp;
<SYNC Start=1246176><P Class=KRCC>
6개의 문자 B, A, N, A, N, A를 일렬로 나열해서 만들 수 있는 서로 다른 문자열의 개수를 물어보는 문항인데요. 문제 분석 같이 가볼게요. 문제 분석을 해 봅시다.
<SYNC Start=1259131><P Class=KRCC>
&nbsp;
<SYNC Start=1263559><P Class=KRCC>
6개의 문자인데요. 지금 문자 중에서 똑같은 게 3개나 보이네요. 그런데 얘네들을 일렬로 나열한대요. 같은 것이 있는 순열이죠.
<SYNC Start=1272701><P Class=KRCC>
이 문제는 분명히 같은 것이 있는 순열의 수를 물어보는 문제구나라고 바로 파악을 하실 수가 있어요. 문제에 다 드러나잖아요.
<SYNC Start=1282880><P Class=KRCC>
그러면 이런 문제들은 어떻게 푼다고 했어요? 그 접근법은 같은 것을 포함하는 것만큼 일렬로 배열한 걸 나눠 주면 된다고 했어요.
<SYNC Start=1292288><P Class=KRCC>
그래서 전체의 순열의 수에서 같은 것을 포함한 것만큼 나누어 가지고 계산을 해 주면 된다고 이야기를 했었죠. 그래서 얘네들을 활용하면 되는데, 이제 그러면 각 문자별로 쭉 살펴보도록 할게요.
<SYNC Start=1307109><P Class=KRCC>
첫 번째 풀이입니다. 그러면 같은 것을 포함한 순열의 수로 볼 건데, 지금 현재 보니까 A가 총 3개가 있어요. A가 몇 개 있다고요? 총 3개. A가 총 3개가 있습니다.
<SYNC Start=1322346><P Class=KRCC>
&nbsp;
<SYNC Start=1325527><P Class=KRCC>
그다음에 또 봤더니 N이 총 몇 개 있어요? 2개가 있네요. N이라는 게 지금 총 몇 개가 있구나? 2개가 있구나.
<SYNC Start=1334034><P Class=KRCC>
그다음 B가 이제 혼자 1개가 있습니다. 그러면 총 몇 개를 나열할 거예요? B가 지금 1개 있고 A가 3개, N이 2개 있으니까 총 6개죠.
<SYNC Start=1345267><P Class=KRCC>
그래서 6개를 일렬로 나열할 건데, 같은 것이 있는 것을 일렬로 배열하는 것만큼 나눠 주면 된다고 했죠. 그래서 3개, 3!. 2개, 2!만큼 나누어 주시면 돼요.
<SYNC Start=1359504><P Class=KRCC>
사실 얘는 1!이기 때문에 1이어 가지고 굳이 신경 쓰지 않으셔도 되겠습니다. 그러면 계산할게요. 6!은 6×5×4를 한 다음에 뒤에 3!인데, 약분돼서 2!만 고려해 주시면 될 거예요.
<SYNC Start=1374835><P Class=KRCC>
약분하면 여기 2가 되니까 정답은 60이 되겠죠. 그래서 첫 번째 생각, 같은 것이 있는 순열의 수로 보게 되면 60가지가 된다는 사실을 알 수가 있어요.
<SYNC Start=1386960><P Class=KRCC>
다른 풀이 하나 더 해야겠죠. 뭘 것 같아요? 조합을 활용할게요. 두 번째 생각입니다.
<SYNC Start=1392880><P Class=KRCC>
&nbsp;
<SYNC Start=1396844><P Class=KRCC>
일단 이 A들끼리는 위치가 바뀌어도 결과가 똑같아요. 순서를 고려하지 않아도 돼요. A는 똑같기 때문에 총 이렇게 6개의 자리 중에서 A가 들어갈 3자리를 골라 주시면 돼요.
<SYNC Start=1410163><P Class=KRCC>
그래서 어떻게 할 거다? 첫 번째, A가 들어갈 자리를 선택을 해 주시면 돼요. 총 몇 개의 자리 중에서? 6개의 자리 중에서 A가 지금 3개니까 A가 들어갈 자리는 3개가 있겠죠?
<SYNC Start=1426783><P Class=KRCC>
그래서 6개 중에 A가 들어갈 자리를 선택하면 6C3이겠구나. 그다음 누구 자리를 선택해 주면 되겠어요? N 자리를 선택해 주면 되겠죠.
<SYNC Start=1436631><P Class=KRCC>
그래서 N이 들어갈 자리를 마찬가지로 선택을 해 볼게요. 그러면 N은 이제 총 몇 자리가 남은 상태에서 고려하는 거냐면, 이미 A가 3자리에 들어가 있어요. 그러면 남은 자리가 3가지죠.
<SYNC Start=1452273><P Class=KRCC>
그래서 남은 3자리에다가 N이 들어갈 건 2자리잖아요. 2자리를 선택해 주시면 돼요. 그러면 자리가 5개가 채워졌죠. 남는 자리는 몇 자리예요?
<SYNC Start=1461984><P Class=KRCC>
1자리예요. 거기에 누가 들어가면 돼요? B가 들어가면 돼요. 그래서 B가 들어갈 자리를 고르는 경우의 수는, 이미 끝났어요. 나머지가 다 들어가 있기 때문에. 그래서 그 경우는 몇 가지다?
<SYNC Start=1474598><P Class=KRCC>
1가지다라는 사실도 알 수 있습니다. 우리는 얘네들이 다 들어가서 6자리의 한 구성, 세트를 원해요. 그러니까 무슨 법칙을 써야겠어요?
<SYNC Start=1485946><P Class=KRCC>
곱의 법칙을 써야겠죠. 그래서 이 경우를 모두 다 곱하면 되겠구나라고 생각을 하시면 되겠습니다. 그러면 6C3은 얼마죠? 6C3은 6×5×4를 3×2×1로 나눈 것이기 때문에 20이 되고요.
<SYNC Start=1502166><P Class=KRCC>
3C2는 3C1과 동일하기 때문에 3이죠. 20×3×1은 얼마다? 똑같이 60이 나온다는 것을 알 수가 있습니다. 그래서 이렇게 2가지 방식으로 풀어봤고요.
<SYNC Start=1516327><P Class=KRCC>
여러분들은 2가지 방식을 다 알고 있으면 (가), (나), (다)를 맞히는 문제도 해결할 수 있다고 했었어요. 모의고사에 과정형 문제가 은근히 많이 나오거든요. 특히 확률과 통계에서.
<SYNC Start=1526544><P Class=KRCC>
그래서 2개 다 알아두시면 도움이 많이 되실 겁니다. 그러면 이제 내신 유형. 내신에 가장 많이 나올 것 같은 유형을 풀어봤는데, 이제 그다음 문제로 한번 가보도록 할게요.
<SYNC Start=1538918><P Class=KRCC>
이번에는 수능 유형인데, 여러분들이 조금 어려워했을 것 같기도 해요. 일단 문제 분석을 또 같이 가볼게요. 문제를 분석해 보면.
<SYNC Start=1550302><P Class=KRCC>
&nbsp;
<SYNC Start=1553429><P Class=KRCC>
저 아래에다가 쓸게요.
<SYNC Start=1555483><P Class=KRCC>
&nbsp;
<SYNC Start=1558919><P Class=KRCC>
그림과 같이 좌표평면 위에 한 변의 길이가 1인 정사각형 16개를 붙여놨대요. 점 P가 원점 O를 출발해서 정사각형의 변과 꼭짓점을 따라서 결국 점 A (4, 4)로 최단거리로 간다고 하네요.
<SYNC Start=1573729><P Class=KRCC>
최단거리. 여기에서 바로 냄새를 맡으셔야 돼요. 뭐죠? 같은 것이 있는 순열로 가겠다는 얘기예요. 분석, 분명히 최단거리 문제는 뭐라고 했다고요?
<SYNC Start=1583529><P Class=KRCC>
같은 것이 있는 순열의 수를 의심해 봐라라고 이야기를 했었죠. 그래서 같은 것이 있는 순열로 생각을 해 보되, 그런데 좌표평면에서 원 위의 점을 지나지 않고 이동하는 경우의 수라고 했는데
<SYNC Start=1597102><P Class=KRCC>
그러면 여기에 또 뭐가 얘기가 돼 있는 거예요? 원의 방정식이 뭔가 결합이 되어 있어요. 그러면 아마 이런 생각을 할 거예요. ‘나 고등수학에서 원 진짜 못했었는데. 이거 못 푸나보다.’
<SYNC Start=1611035><P Class=KRCC>
그러면서 손을 놓으면 못 푸는 거죠. 그러면 원의 방정식이 뭔지 저 개념부터 다시 설명해 드릴게요. 원은 뭘까요? 여러분들한테 원의 개념에 대해서 간단하게 설명할 거예요.
<SYNC Start=1623274><P Class=KRCC>
원은 뭐냐면 중심으로부터, 한 점으로부터 같은 거리만큼 떨어져 있는 점들의 모임이 원이에요. 다시, 한 점으로부터 같은 거리만큼 떨어져 있는 점들의 모임이에요.
<SYNC Start=1635353><P Class=KRCC>
그래서 그 한 점을 뭐라고 하느냐면, 원의 중심이라고 부르고요. 그 중심으로부터 같은 거리에 떨어져 있는 그 부분을 반지름의 길이라고 부릅니다. 뭐라고요?
<SYNC Start=1645680><P Class=KRCC>
중심이 (a, b)고요. 반지름의 길이가 r인 원에 대해서 제가 여러분들한테 얘기를 해 드리려고 합니다. 그러면 중심이 (a, b)이고 반지름이 r인 원에 대해서 제가 그려보면
<SYNC Start=1667210><P Class=KRCC>
중심 (a, b)가 어떻게 생겼는지는 모르겠지만, 아무 데에나 찍고요. 반지름의 길이가 r이라고 했으니까 반지름의 길이 r을 이만큼 정해줘 가지고 ‘이만큼이 r이구나.’
<SYNC Start=1677572><P Class=KRCC>
그러면 같은 거리만큼 떨어져 있는 점들을 싹 다 모아야 하니까 이렇게 생겼겠죠, 대략. 이렇게 원이 생겼을 거예요.
<SYNC Start=1685498><P Class=KRCC>
그러면 이런 원 상태에서 나는 결과적으로 보고 싶은 건 이 점점들마다의 좌표니까 그 점 중에 하나를 (x, y)라고 쓰면 되겠죠.
<SYNC Start=1696205><P Class=KRCC>
그래서 x, y에 관련된 식 하나를 구성하시면 돼요. 그러면 생각해 보세요. 이 점, 그리고 이 점. 기울어져 있는 지금 하나의 이 선분이 보이죠? 그 길이가 r이에요.
<SYNC Start=1708674><P Class=KRCC>
그러면 기울어져 있는 걸 찾고 싶으면 뭘 만들어 내요, 항상? 바로 직각삼각형을 만들어 내서 직각삼각형을 보면 떠오르는 정리. 피타고라스 정리를 적용하시면 돼요.
<SYNC Start=1718074><P Class=KRCC>
이 부분의 길이는 x좌표와 x좌표의 차이죠. (x-a). 세로의 길이는 y좌표와 y좌표의 차이죠. (b-y). 그러면 이 길이 제곱과 이 길이의 제곱은 뭐가 되느냐면
<SYNC Start=1730999><P Class=KRCC>
(x-a)²에 (y-b)²이 되고요. 그때 길이가 뭐예요? 반지름 길이 r이니까 빗변의 길이의 제곱이구나라고 해서 중심이 (a, b)이고 반지름의 길이가 r인 원은 이렇게 나와요.
<SYNC Start=1746904><P Class=KRCC>
(x-a)²에 (y-b)²에 r²이구나. 그래서 원의 방정식을 이렇게 추론하실 수가 있어요. 즉 이 제곱 안에 들어가 있는 인수를 0으로 만들어 주는 것을 중심이라고 볼 수 있고요.
<SYNC Start=1762751><P Class=KRCC>
여기에 있는 제곱되어 있는 이 r이 바로 뭐다? 반지름의 길이입니다. 그러면 이 문제를 이제 해석할 수 있게 됐어요. 해석해 볼게요.
<SYNC Start=1771870><P Class=KRCC>
분석했으면 이제 접근을 해야 되는데, 어떻게 접근할 거냐. 첫 번째, 내가 갈 수 있는 곳을 보기 전에 갈 수 없는 곳부터 체크할게요.
<SYNC Start=1784467><P Class=KRCC>
지금 여기는 지나지 않는다고 했으니까 지날 수 없는 곳을 보겠다.
<SYNC Start=1790825><P Class=KRCC>
&nbsp;
<SYNC Start=1797761><P Class=KRCC>
그러면 지날 수 없는 곳을 저 문제에서 봤더니, 저 원 위에 있는 점은 지나지 않는다고 했으니까 이 원의 방정식을 여기다가 그려줘야 될 것 같아요. 원이 어떻게 생겼는지.
<SYNC Start=1808252><P Class=KRCC>
중심이 (1, 3)이네요, 중심. 반지름이 1이네요. 반지름이 1인 원. 이렇게 그려지겠죠. 그러면 지금 원 위의 점은 지나지 않는다고 했으니까, 지나지 않는 점들은 다 X표를 해 주세요.
<SYNC Start=1823062><P Class=KRCC>
원 위의 점은 지나지 않는다고 했으니까. 그래서 이 점, 이 점, 이 점, 이 점은 지날 수가 없습니다. 됐죠? 이 상태에서 지날 수 없는 곳을 확인했으니까, 이제 뭐해야 돼요?
<SYNC Start=1833233><P Class=KRCC>
지날 수 있는 곳을 확인합시다.
<SYNC Start=1835947><P Class=KRCC>
&nbsp;
<SYNC Start=1839165><P Class=KRCC>
지날 수 있는 곳을 확인해야지 최단거리로 가는 것들을 찾아낼 수 있잖아요. 그래서 지날 수 있는 곳을 내가 확인해 볼게요.
<SYNC Start=1846549><P Class=KRCC>
그러면 여기에서 여기까지 갈 수 있어요. 여기는 가나마나죠. 왜? 얘 다음에 갈 수 있는 곳이 다 막혔으니까 굳이 갈 필요가 없겠죠. 그래서 여기까지 갈 수 있고요.
<SYNC Start=1856485><P Class=KRCC>
옆으로 이동 가능, 위에 막혔으니까 다시 오른쪽으로. 여기까지 올라가서 위에 막혔으니까 다시 오른쪽으로, 다시 위까지 딱 올라갈 수 있어서
<SYNC Start=1866066><P Class=KRCC>
지날 수 있는 곳을 제가 지금 주황색으로 표시해 보니까 이 부분이 되겠네요. 이제 알았어요. 알았으니까 뭘 써먹을 수 있어요?
<SYNC Start=1874230><P Class=KRCC>
이거 2개를 활용해서 같은 것이 있는 순열의 수를 생각해 보면 되겠구나라는 생각을 하시면 되겠습니다. 그래 놓고 이제 애들이 이런 생각을 합니다.
<SYNC Start=1886540><P Class=KRCC>
‘선생님, 오른쪽으로 하나, 둘, 셋, 넷. 위로 하나, 둘, 셋, 넷. 그러니까 총 8개가 될 것 같아요.’라고 해서 이런 풀이를 제시해요.
<SYNC Start=1895596><P Class=KRCC>
화살표가 오른쪽으로 하나, 둘, 셋, 넷. 위로 하나, 둘, 셋, 네 개가 있으니까 8!을 4!4! 해서 이렇게 답을 내는 친구들이 있어요. 8×7×6×5, 4×3×2×1은 사라지고 4×3×2×1 해 가지고
<SYNC Start=1914095><P Class=KRCC>
지워지고 지워지고 지워지고 지워지고 해서 70. 이렇게 쓰는 사람들이 있습니다. 답지를 보세요, 답지. 70 있어요, 없어요?
<SYNC Start=1923029><P Class=KRCC>
없어요. 답은 전부 다 십의 자리수가 2로 시작하고 있어요. 투머치하다는 거죠. 너무 많이 셌다는 뜻이에요. 그러면 여러분, 이게 왜 답이 안 되는지도 생각해 보셔야 돼요. 이거 왜 답이 안 되죠?
<SYNC Start=1935328><P Class=KRCC>
이 안에는 뭐가 포함돼 있느냐면, 위로 쭉 4번 갔다가 오른쪽으로 쭉 4번 간 경우도 포함되죠. 그러면 한번 보세요. 위로 쭉 4번 가요. 하나, 둘, 셋.
<SYNC Start=1949735><P Class=KRCC>
망했죠. 왜 망했어요? 여기 지나면 된다고 했어요, 안 된다고 했어요? 안 된다고 했잖아요. 그러니까 이런 경우는 포함하지 않아. 그래서 이 문제는 틀린 풀이예요.
<SYNC Start=1961370><P Class=KRCC>
&nbsp;
<SYNC Start=1962920><P Class=KRCC>
그래서 이렇게 풀었다면 이유도 알고 계셔야 돼요. 뭐 때문에? 이 안에는 얘네들을 일렬로 나열하는 경우는 얘도 포함이 돼 있는데, 얘는 문제 조건을 만족하지 않는다고요. 이해되셨죠?
<SYNC Start=1975605><P Class=KRCC>
그러면 이제 어떻게 문제를 해결해야 되는지 생각을 해 보는 거예요. 그러면 이건 막 쓰면 안 되겠네? 그러면 같은 것을 포함한 순열, 같은 것이 있는 순열을 어떻게 써먹느냐.
<SYNC Start=1986268><P Class=KRCC>
이 부분에서 어떤 핵심이 있습니다. 여기에서 써먹기 위해서는 모양이 정확하게 사각형 모양이어야 돼요. 지금 보시면, 어때요? 쭈글쭈글해졌죠?
<SYNC Start=1996665><P Class=KRCC>
이런 경우는 막 쓰시면 안 됩니다. 그러면 여기는 어떻게 해 줘야 하느냐면, 경로를 나눠서 생각해 주셔야 돼요. 경로를 나누어 생각해 주자.
<SYNC Start=2007275><P Class=KRCC>
&nbsp;
<SYNC Start=2009178><P Class=KRCC>
그런데 이 경로는 어떤 식으로 나누면 좋느냐면, 동시에 갈 수 없는 경로로 나눠서 합의 법칙을 활용하시면 문제를 해결하실 수가 있어요.
<SYNC Start=2018520><P Class=KRCC>
그래서 어떻게 나눌까 하고 봤더니, 얘는 가급적이면 대각선으로 나누는 게 좋아요. 제가 아무 거나 대각선 하나 잡아볼게요. 이렇게 대각선.
<SYNC Start=2029706><P Class=KRCC>
제가 여기에 왔어요. 그러면 여기를 가거나 여기를 가거나 둘 중에 하나를 골라야 되죠. 동시에 갈 수 있나요, 없나요?
<SYNC Start=2035485><P Class=KRCC>
없죠. 동시에 이렇게 슝 갈 수가 없어요. 슝, 불가능. 그렇죠? 그래서 이 점을 지나는 경우의 수와 이 점을 지나는 경우의 수를 구해서 합해 주시면 돼요.
<SYNC Start=2045425><P Class=KRCC>
그런데 물론 이렇게 쪼개도 답은 나와요. 나오는데, 저는 여러분들이 계산을 조금 쉽고 빠르게 하는 방법을 또 하나 소개를 해 드릴게요.
<SYNC Start=2054741><P Class=KRCC>
정확하게 지금 이 모양이 희한하게 생기긴 했지만, 이렇게 쪼개면 어떤가요? 반반 대칭 모양이죠. 그러면 계산을 할 때 이 점을 지나는 경우의 수도 어떤 수의 제곱으로 나올 거고요.
<SYNC Start=2068571><P Class=KRCC>
이 점을 지나는 경우의 수도 어떤 수의 제곱으로 나올 거고요. 이 경우를 지나는 것도 어떤 수의 제곱으로 나올 것 같아요. 조금 더 계산이 편리해지겠죠?
<SYNC Start=2079017><P Class=KRCC>
그래서 가급적 경로를 나눌 때는 반띵해서 구하시면 좀 편리합니다. 그러면 이 점을 지날 때, 이 점을 지날 때, 이 점을 지날 때는 서로 동시에 일어날 수가 없습니다.
<SYNC Start=2090156><P Class=KRCC>
그래서 이 점을 B라고 하고요. 이 점을 C라고 하고요. 이 점을 D라고 하겠습니다. 그래서 B점을 지나는 경우, C점을 지나는 경우, D점을 지나는 경우로 경로를 나눠서 문제에 접근하겠습니다.
<SYNC Start=2103465><P Class=KRCC>
그러면 이 부분을 제가 지우고 설명을 써보도록 할게요. 첫 번째 풀이.
<SYNC Start=2110430><P Class=KRCC>
&nbsp;
<SYNC Start=2115271><P Class=KRCC>
B점을 지날 때와, 어떤 점? C점을 지날 때와 그다음 마지막, D점을 지날 때로 나눠서 해결할 건데
<SYNC Start=2125037><P Class=KRCC>
내가 이 B점을 지나서 가려고 하면 원점에서 분명히 (2, 1)을 지나야만 B점으로 가겠죠? 그래서 얘는 경로가 원점을 지나고 (2, 1) 지나고 B 지나야 될 거예요.
<SYNC Start=2138746><P Class=KRCC>
그러면 B에 왔어요. 그러면 무조건 어디로밖에 못 가느냐면, 지금 (3, 2) 지점으로밖에 못 가요. 그리고 (3, 2) 지점으로 갔다가 A점으로 가면 되겠구나.
<SYNC Start=2149742><P Class=KRCC>
그러면 한번 구해 볼게요. O라는 점에서, 원점이라는 점에서 (2, 1) 여기를 갈 거예요. 그러면 지금 정확히 무슨 모양?
<SYNC Start=2158060><P Class=KRCC>
직사각형 모양이니까 안심하고 쓰면 될 것 같아요.
<SYNC Start=2161651><P Class=KRCC>
오른쪽으로 화살표 2개, 위로 화살표 하나를 고려하면, 내가 여기에서 여기로 갈 때는 오른쪽으로 화살표 2개, 위로 화살표 하나를 구해야 되니까
<SYNC Start=2171145><P Class=KRCC>
결과적으로 3개의 화살표를 나열하되 똑같은 화살표가 2개가 있구나라는 사실을 알 수 있겠죠? 그래서 2개만큼 나누어 주시면 될 것 같아요.
<SYNC Start=2180947><P Class=KRCC>
그다음에 (2, 1)에서 B를 지나는 건 무조건 하나밖에 없죠. 다이렉트로 가는 경우 하나니까 이 경우는 몇 가지구나? 한 가지가 나오는구나.
<SYNC Start=2189665><P Class=KRCC>
그다음 B에서 (3, 2)에 간다. B에서 (3, 2)에 간다? 이것도 딱 직선으로 가는 거 하나니까 분명히 여기도 1개가 나온다는 사실을 알 수가 있어요.
<SYNC Start=2200313><P Class=KRCC>
그다음 (3, 2)에서 A로 갑니다. 오른쪽의 1칸, 위로 2칸을 일렬로 나열하면 되겠죠? 오른쪽으로 1칸, 그다음에 위로 가는 거 2칸을 일렬로 나열하시면 될 것 같아요.
<SYNC Start=2213380><P Class=KRCC>
그런데 지금 보세요. 결과적으로 3개를 나열하는데 똑같은 거 2개가 있으니까 똑같은 걸 2개로 나누면 되겠죠. 정말 대칭인 거 보이시나요?
<SYNC Start=2224023><P Class=KRCC>
그래서 계산할 때 더 빨리 계산할 수가 있어요. 그래서 이건 3, 이거 1, 이거 1, 이거 3. 곱의 법칙을 이용하면 9가 된다는 사실을 알 수가 있습니다.
<SYNC Start=2235452><P Class=KRCC>
이제 C를 볼게요. 원점에서 C 갔다가 C에서 A로 가면 되겠죠. 그래서 C의 경우는 원점에서 C 갔다가 C에서 A를 가면 되는데, 내가 원점에서 C로 간다는 건 뭐예요?
<SYNC Start=2248690><P Class=KRCC>
오른쪽으로 하나, 둘, 셋. 위로 하나죠. 그래서 결과적으로는 오른쪽으로 가는 화살표 3개와 위로 가는 화살표 하나를 보시면 돼요.
<SYNC Start=2258338><P Class=KRCC>
그러면 결과적으로 화살표 몇 개 나열? 4개를 나열하는 건데, 같은 것이 몇 개 포함돼 있어요? 3개 포함돼 있네.
<SYNC Start=2267863><P Class=KRCC>
그러면 이제 이쪽은 사실 뭐예요? 보나마나죠. 정확히 대칭이에요. 보세요. 3×1짜리, 1×3짜리의 형태잖아요. 그래서 여기도 보나마나 오른쪽으로 1칸, 위로 가는 게 총 3칸이니까
<SYNC Start=2282378><P Class=KRCC>
같은 것이 있는 순열이니까 4!을 뭐로 나눈다? 3!로 나누게 되면 C에서 A까지 가는 경우의 수가 나오겠구나. 4×4=16이죠. 역시 예측대로입니다. 제곱수예요, 계속.
<SYNC Start=2296968><P Class=KRCC>
그다음에 D를 거쳐서 가는 경우를 볼게요. 얘는 직선도로 한방에, 얘도 직선도로 한방에. 몇 가지, 몇 가지? 1가지, 1가지밖에 없으니까 1×1. 몇 개다?
<SYNC Start=2307179><P Class=KRCC>
이 경우는 1가지밖에 없습니다. 그러면 1가지, 16가지, 9가지. 이 3개의 경로로 쪼갰어요. 동시에 일어날 수 있어요, 없어요? 없어요. 무슨 법칙?
<SYNC Start=2318696><P Class=KRCC>
합의 법칙을 적용하겠습니다. 합의 법칙을 적용하면 9+16+1은 얼마다? 26이다. 그래서 이 문제에 대한 정답이 26이 됨을 아실 수 있습니다.
<SYNC Start=2334647><P Class=KRCC>
이렇게 제가 열변을 토했는데, 얘는 다른 방법도 하나 있어요, 다른 방법. 그래서 두 번째 방법으로 한번 소개를 해 보도록 할게요.
<SYNC Start=2344364><P Class=KRCC>
&nbsp;
<SYNC Start=2346941><P Class=KRCC>
두 번째 방법을 하기 전에 아까 기존에 있는 건 분석한 걸 그대로 가지고 갈게요. 여러분들이 이 모양은 그대로 가지고 있어요. 이 모양을 따라서 원점부터 A까지 가는 거잖아요, 지금 현재.
<SYNC Start=2360397><P Class=KRCC>
그런데 얘는 어떤 걸 이용하면 또 빨리 풀 수 있느냐면, 합의 법칙을 이용하면 빨리 풀 수 있어요. 두 번째 생각은 제가 여기에다가 정리를 한번 바로 할게요.
<SYNC Start=2370693><P Class=KRCC>
여러분, 아마 초등학교 때 혹은 중학교 때 이런 걸 많이 해 봤을 거예요. 1 1 1 1 1 1, 이렇게 쓰잖아요. 왜 썼느냐.
<SYNC Start=2378218><P Class=KRCC>
이 점으로부터 이 점까지 갈 수 있는 방법의 수는 1가지예요, 최단거리로. 여기도 1가지, 여기에서 이리로 가는 거 1가지죠. 1가지×1가지 해서 여기가 1가지인 거예요.
<SYNC Start=2389601><P Class=KRCC>
그러면 쭉 1가지씩이죠. 그러면 물어볼게요. 내가 원점으로부터 출발해서 여기 가고 싶어요. 경로가 몇 개예요? 2개죠. 이리로 가거나 이리로 가거나. 무슨 법칙을 써야 돼요?
<SYNC Start=2401617><P Class=KRCC>
합의 법칙. 그래서 여기는 얼마다? 2다. 그러면 그다음 거는요? 3이죠. 그다음 거는요? 4. 그다음 거는요? 5예요. 그래서 더하신 거예요. 무슨 법칙을 쓴 거예요?
<SYNC Start=2414199><P Class=KRCC>
동시에 일어날 수 없기 때문에 합의 법칙을 쓴 거라고요. 그러면 내가 이제 여기에 가고 싶어요. 여기까지 온 게 3가지인데, 여기부터 여기까지 가는 것은 1가지죠. 3×1. 총 몇 개? 3개.
<SYNC Start=2426853><P Class=KRCC>
다시 합의 법칙을 쓸 수 있어요. 다시 합의 법칙을 쓸 수 있어요. 7개, 여기서부터 여기까지는 1개. 7×1=7. 19개, 여기도 7개죠. 2개 더하면 26개. 답 나왔어요.
<SYNC Start=2441345><P Class=KRCC>
그래서 1 1 1 1 써서 구한 건 다 뭘 이용한 거냐면, 합의 법칙과 곱의 법칙을 활용하신 거예요. 그래서 같은 것이 있는 순열의 수로 최단거리 경로 문제를 해결하셔도 되는데
<SYNC Start=2452932><P Class=KRCC>
이렇게 합의 법칙과 곱의 법칙을 활용해 가지고 그냥 쭉 더하기만 하면 되니까 얼마나 편리합니까? 그래서 이런 방식으로도 해결해 보실 수가 있습니다.
<SYNC Start=2463527><P Class=KRCC>
그래서 지금까지 여러분들하고 숨 가쁘게 같은 것이 있는 순열의 수의 개념부터 관련된 문제들까지 차근차근 해결해 봤고요.
<SYNC Start=2473756><P Class=KRCC>
이제 뒤에 있을 개념정리 파트를 보시고 이벤트도 참여하시면 되겠습니다. 우리는 4강에서 뵙도록 하겠습니다.
<SYNC Start=2480623><P Class=KRCC>
&nbsp;
</BODY>
</SAMI>