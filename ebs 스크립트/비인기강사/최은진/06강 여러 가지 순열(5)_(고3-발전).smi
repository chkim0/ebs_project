<SAMI>
<HEAD>
<TITLE>Time Tools (C) CCNSOFT 2005</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=9831><P Class=KRCC>
반갑습니다. 여러분의 든든한 조력자가 되겠습니다. 저는 체인지 수학 최은진이고요. 오늘을 2022학년도 확률과 통계 수능 특강 강의에는 오셨고, 오늘이 여섯 번째네요.
<SYNC Start=21218><P Class=KRCC>
자, 오늘은 이제 여러 가지 순열을 사실 마무리하는 시간입니다. 마지막 시간이라는 뜻이죠. 여러 가지 순열에서 연계 교재 문제 풀이를 지금 하는 중이었고요.
<SYNC Start=32565><P Class=KRCC>
오늘은 레벨3에 있는 문제들을 마무리하면서 마지막에 있는 기출 문제 풀이까지 마무리를 짓고 이제 여러 가지 순열을 끝내는 시간이 되겠습니다. 레벨3 문제는 사실 조금 어렵습니다.
<SYNC Start=46505><P Class=KRCC>
수능특강 올해 교재가 제가 느끼기에 체감 난이도는 작년에 비해서 전반적으로는 문제가 난이도가 덜 어려운 느낌이 들어요. 아주 쉽다고 하면 푸는 친구들 좀 화나죠.
<SYNC Start=59911><P Class=KRCC>
나는 어렵게 느꼈는데, 최은진이 저 앞에서 쉽다고 얘기하네. 이러면 진짜 화가 나거든요. 엄청 쉬워. 그건 아니에요. 그렇지만 작년에 비하면, 작년 수특 교재에 비하면 제가 체감하는 난이도는 다소 수월하게 느껴지는 건 사실이에요.
<SYNC Start=78004><P Class=KRCC>
아무래도 그런 것을 반영한 것일 수도 있겠다 싶어요. 기존에는 가형과 나형, 그러니까 이과 문과가 없어지긴 했지만, 그 자연계열과 인문계열의 대학 진로를 희망하는 모든 학생이 다 응시하던 과목이었다면
<SYNC Start=97036><P Class=KRCC>
이제는 인문계열을 희망하는 학생의 대부분이 응시하고, 자연계열에 일부 정도만 응시하는 과목이라고 생각한다면, 다소 이 변별의 의미에서도 조금 수월하게 가도 되지 않을까 하는 것도 반영이 된 것 같고요, 제 느낌은.
<SYNC Start=117091><P Class=KRCC>
그리고 평가원에서 이것을 선택 과목으로 이제부터는 수능에 출제를 하기 때문에 선택 과목의 난이도가 아주 많이 높아지지는 않을 거다. 그래도 이제 어려운 문제는 있죠, 당연히.
<SYNC Start=129098><P Class=KRCC>
그렇지만 다소 난이도 조절을 좀 할 거다, 라는 예상도 조금은 좀 해볼 수 있고요. 그래서 여러 가지의 의미에서 올해 수능특강이 작년에 비해서는 예년에 비해서는 다소 수월해진 느낌은 좀 있습니다만
<SYNC Start=142428><P Class=KRCC>
그럼에도 불구하고 레벨3 문제는 고민해야 될 소재들이 조금 있습니다. 그래서 여러분이 좀 꼼꼼하게 보여야 되고요. 그런 의미에서 오늘 제가 여러분과 함께 할 감성 코드는 '끈기'입니다.
<SYNC Start=156826><P Class=KRCC>
오늘은 한 문제를 풀어도 다소 시간이 걸리거나 노력이 많이 드는 문제가 있을 수 있습니다. 그런 문제들을 다 끈기를 가지고 좀 임하면 좋겠다, 이런 생각이 들어서 끈기라고 잡아봤고요.
<SYNC Start=170808><P Class=KRCC>
제가 지난 시간에도 말씀드렸다시피 여러분 배울 건 다 배웠기 때문에 여러분이 한번 고민해 보고 생각해 보는 시간을 좀 가졌으면 좋겠습니다. 물론 오늘 새로 나오는 코드가 있긴 합니다.
<SYNC Start=182740><P Class=KRCC>
오늘 이제 함수의 개수와 관련해서 우리 이제 공부를 하긴 할건데요. 어쨌든 전반적으로는 배웠던 내용들을 활용하는 시간이 되긴 할 겁니다. 자, 일단 전면으로 오늘 어떤 내용 공부할지 같이 보고 가시죠.
<SYNC Start=197960><P Class=KRCC>
오늘은 연계교재 문제풀이를 마무리하는 시간이고요. 레벨3 문제를 주로 살펴볼 겁니다. 오늘의 코드는 한 가지입니다. 18번째 코드고요. 함수의 개수에 관한 코드 한번 정리해 보도록 하겠습니다. 
<SYNC Start=209941><P Class=KRCC>
자, 그러면 지금부터 같이 문제 풀이하면서 시작해 볼게요. 레벨3의 1번 문제 할 차례거든요. 레벨3은 제가 한 문제도 풀지는 않았고요. 아직 이제 시작하는 겁니다.
<SYNC Start=220473><P Class=KRCC>
자, 1부터 9까지 자연수가 하나씩 적혀 있는 9개의 공을 일정한 간격을 두고 원형의 탁자 위에 원형으로 배열하고 싶다. 그럴 때, 이것 만만치 않은 조건이네요.
<SYNC Start=235982><P Class=KRCC>
서로 이웃한 2개의 공에 적혀 있는 수는 반드시 서로소가 되고 싶대요. 서로소가 무슨 의미지? 공통된 약수가 1뿐인 거죠. 맞아요. (2, 3) (3, 10) (5, 12) 서로 공통된 약수가 1밖에 없는 거예요.
<SYNC Start=269038><P Class=KRCC>
예를 들어서는 3하고 9다. 이런 건 안 된다. 왜냐하면 공통된 약수가 3도 있잖아요. 그런 것 안 되고, 그래서 공통된 약수가 1뿐이다. 
<SYNC Start=282023><P Class=KRCC>
서로소 관계에 있다고 얘기를 하는데, 그렇다면 자연스럽게 누구누구는, 그러니까 이웃한 2개는 서로소가 되어야 되니까 누구누구누구는 이웃을 할 수 없는지, 이웃하지 못하는 수의 후보군을 정해 놓을 필요가 있겠네요. 
<SYNC Start=296112><P Class=KRCC>
그래서 이웃하면 안 되는 수가 누구누구누구냐하면, 2의 배수인 2, 4, 6, 8은 서로 이웃하면 큰일 나죠. 그 누구끼리도 서로 이웃할 수 없어요. 
<SYNC Start=308181><P Class=KRCC>
4, 8 당연하고요. 2, 6도 마찬가지 2, 8 다 할 것 없이. 그다음 6, 8도 안 되고, 이들끼리 서로서로 이웃하면 안 돼요. 또 이웃하면 안 되는 게 3하고 6이네요. 9도 되네요. 이렇게는 서로서로 이웃할 수 없어요.
<SYNC Start=324725><P Class=KRCC>
그런 의미에서 6이 약간 공통으로 들어가 있어서 좀 고민을 많이 해보셔야 되는 부분이 되겠네요. 왜냐하면 6은 2, 4, 8이랑도 이웃하면 안 되지만, 3, 9랑도 이웃하면 안 되기 때문에, 6 옆에 오는 건 좀 제한적이겠다.
<SYNC Start=339808><P Class=KRCC>
그런 생각을 좀 할 수 있을 것 같아요. 일단 이웃하지 않아야 되는 2, 4, 6, 8은 개수가 4개 많잖아요, 생각보다. 그러니까 자리가 9개이기 때문에 2, 4, 6, 8을 만약에 배정하잖아요.
<SYNC Start=354730><P Class=KRCC>
그러면 여기 2, 여기 4, 여기 6 이런 식으로 하나씩 떼고 배정을 하면 한 칸 띄고 배정하고, 한 칸 띄고 배정하면 누군가의 둘 사이에는 2칸이 남을 수밖에 없어요. 무슨 말인지 아세요?
<SYNC Start=370621><P Class=KRCC>
여기 1칸, 여기 1칸, 여기 1칸이 남지만 전체가 9개 자리이기 때문에 1칸씩 비워놓고 배치를 하다 보면, 누군가 누군가 사이에는 2, 4, 6, 8 사이에는 두 자리가 빌 수밖에 싶다. 이런 판단이 들어요.
<SYNC Start=384309><P Class=KRCC>
그래서 저는 어떻게 접근할 거냐 하면, 어쨌든 생소한 유형이나 낯선 문제를 보면, 경우를 잘 나누셔야 되거든요, 기준을 세워서.
<SYNC Start=393694><P Class=KRCC>
그래서 저는 2, 4, 6, 8을 배정하는 것부터 시작할 건데 2, 4, 6, 8을 배치할 때 누구누구 자리 사이에 2칸이 비도록 배치를 할지 그것을 생각해 보려고 해요, 그것을 기준으로.
<SYNC Start=408688><P Class=KRCC>
그런데 그 두 자리를 결정할 때 여기 6이 끼느냐 안 끼느냐는 굉장히 중요해져요. 왜냐하면, 그 옆에는 또 3, 9는 못 오니까. 그래서 이렇게 가보려고요. 사이에 2칸이 빈다.
<SYNC Start=431974><P Class=KRCC>
그런데 누구누구 사이냐 하면, 그것을 기준으로 나눌건데요. 그 사이에 누구누구가 들어오냐? 이 4개 중의 2개를 뽑으면 4×3=12 하니까 6이죠. 6가지가 총 나오거든요. 그중에 6을 안 낀 것.
<SYNC Start=447209><P Class=KRCC>
(2, 4) (2, 8) (4, 8) 이런 덩어리들. 여기가 (2, 8) (2, 4) (4, 8) 이렇게 오는 것. 둘 사이라는 게 이렇게 둘이 되는 경우를 한번 생각해 보고요. 아니면 그 둘 사이에라고 할 때, 6을 끼는 거예요.
<SYNC Start=467641><P Class=KRCC>
(2, 6) (4, 6) (8, 6) 6이 끼는. 그래서 이 사이에 (2, 6) 아니면 (4, 6) (8, 6) 이런 식으로 2칸이 비어 있는 것 그 바로 옆에 6이 끼어 있는 경우와 안 끼어 있는 경우 구분해 보면 어떨까?
<SYNC Start=482761><P Class=KRCC>
그래서 둘을, 2칸 사이에 배열하는 그 숫자 2가지를 선택하는 게 총 6가지니까 이렇게 6가지를 나눠서 셋, 셋으로 구분해서 생각을 먼저 해볼 생각이고요. 
<SYNC Start=497409><P Class=KRCC>
만약에 이 케이스라고 한다면, 예를 들어 (2, 8)인 경우 한번 생각해 볼게요. 그러면 3하고 9는 어디에 올 수밖에 없죠? 3하고 9는. 그렇죠, 6 옆에 놓을 수가 없으니까 이 자리랑 이 자리에 일단 3하고 9가 못 오고요.
<SYNC Start=517362><P Class=KRCC>
3하고 9가 올 수 있는 것은 여기, 여기, 여기 중의 하나인데요. 문제는 여기, 여기에 둘 다 3하고 9가 다 나오면 또 3, 9가 서로 이웃하게 되잖아요. 그러니까 3, 9를 또 붙여 놓을 수는 없어요.
<SYNC Start=529007><P Class=KRCC>
그래서 3, 9의 위치를 잡을 때, 여기냐 여기냐. 그러니까 여기를 예를 들어, 잘 안 보이시죠? A, B, C라고 한다면 A B에 오냐 아니면 A C에 오냐. 그것밖에 안 되는 거죠. 맞아요?
<SYNC Start=552717><P Class=KRCC>
그런데 A B에 오더라도 여기에 3, 9가 올 수도 있고, 9, 3이 올 수도 있으니까 2를 또 곱해주셔야죠. 그리고 이제 이 앞의 경우를 이제 배열을 해볼게요. 자, 우선 (2, 4) (2, 8) (4, 8) 3가지 케이스가 나온 건 아시겠죠.
<SYNC Start=568966><P Class=KRCC>
그래서 3가지를 하시고요. 그런데 그때마다 예를 들어서 2, 8이 왔다면 여기가 8, 2가 될 수도 있잖아요. 그러니까 이들이 자리 바꾸는 방법이 있기 때문에 2!을 또 같이 곱해주셔야 돼요. 이해되시죠?
<SYNC Start=581488><P Class=KRCC>
그래서 이들끼리 자리 정하고, 케이스별로 자리 바꾸는 방법을 했고요. 나머지 2, 4, 6, 8중에 예를 들어서 여기 2, 8이 왔다면 나머지 4, 6이 오는데, 4, 6 끼리도 자리를 바꿀 수 있는 것 아닌가요?
<SYNC Start=595729><P Class=KRCC>
4, 6이 바꿔 앉을 수도 있잖아, 6, 4로 여기가. 그렇죠? 그래서 4, 6이 자리 바꾸는 방법인 2!까지 해줘야 하는, 즉 여기를 이렇게 계산을 다 해줘야 비로소 2, 4, 6, 8을 배열하게 되는 거예요. 이해가 되시나요?
<SYNC Start=610817><P Class=KRCC>
이게 잘 안 보이니까 제가 밑에다 다시 써드릴게요. 2에다가 3가지 케이스 했죠, 그다음 2에다가. 그러니까 이 3은 이 3가지 케이스, 2는 2, 4가 자리 바꾸거나 2, 8 자리 바꾸는 경우.
<SYNC Start=631034><P Class=KRCC>
그다음 2는 하나를 배열하고 나면 나머지 6, 8이 있으니까 그 둘이 자리 바꾸는 경우. 그렇게 해서 이 앞에 같이 곱해야 된다 이 얘기고.
<SYNC Start=640764><P Class=KRCC>
자, 그다음 마지막으로 우리는 빈 자리를 찾아가시면 돼요. 남은 카드는 뭐가 있냐 하면, 남은 공은 1, 5, 7 이렇게 3가지가 있죠. 그런데 이들은 완전히 자유로워요. 뭐에서? 서로소에서.
<SYNC Start=658244><P Class=KRCC>
그 어떤 거랑도 서로소가 되지 않죠. 따라서 여기에다가 이들의 자리가 남았거든요. 어디 어디 남았냐 하면, 여기에 배치를 만약에 했다고 치면 남은 자리가 2, 4, 6, 8 되고 나서 여기 3, 9의 위치를 어딘가를 잡을 거 아니에요.
<SYNC Start=673992><P Class=KRCC>
예를 들어 3, 9를 잡았다. 이렇게 할까요? 잘 안 보이시지만, 이렇게 3, 9를 잡았다면, 여기 배열 안 됐고, 여기 안 됐고, 여기 안 됐으니까 3자리가 남았는데, 그 3자리는 1, 5, 9를 자유롭게 배치하면 되니까 3! 하면 되죠.
<SYNC Start=690207><P Class=KRCC>
누군가의 자리가 정해졌기 때문에 원탁에 앉히더라도 더이상은 원순열이 아니다. 따라서 이들을 곱해주시면, 48에다가 6까지 곱하나요? 288이네요. 그래서 이렇게 해서 첫 번째 케이스를 정리해 주시면 됩니다. 여기까지 되셨죠?
<SYNC Start=711246><P Class=KRCC>
자, 그다음에는 (2, 6) (4, 6) (6, 8) 이렇게 가볼까요? (2, 6) (4, 6) (6, 8)로 간다면, 이제는 약간 판이 바뀌죠. 왜냐하면, 이 둘이 나오는, 둘이 사이에 위치하는 것에 6하고 8이 위치한다는 거고요.
<SYNC Start=730236><P Class=KRCC>
물론 자리 바꿀 수 있고, 8 대신에 2나 4나 다른 게 들어갈 수도 있지만 어쨌든 6이 낀다는 게 중요하고요. 그리고 여기 비워놓고, 또 숫자 들어가고, 여기 비워놓고, 그래서 여기는 2랑 여기 비워놓고 여기 4.
<SYNC Start=745564><P Class=KRCC>
이런 식으로 들어간다는 얘기예요. 그래서 사이에 2칸 비는 경우에 6을 꼭 넣는다는 케이스가 이 경우죠. 그러면 여기도 배열을 좀 해볼까요? 똑같아요.
<SYNC Start=757922><P Class=KRCC>
3가지 케이스에다가 2, 6이나 혹은 6, 8이 왔다고 하면, 저것 자리 바꾸는 것 있을 거고, 나머지 자리 배치하는 것 있을 거니까 이렇게 다 곱하시는 게 맞죠. 앞에는 그렇고요.
<SYNC Start=769047><P Class=KRCC>
마찬가지로 이렇게 3, 9의 위치를 잡으셔야 돼요. 3, 9는 6하고는 겹칠 수 없기 때문에 여기에서 좀 조심하셔야 돼요. 6하고 겹칠 수 없기 때문에 이 자리, 이 자리는 당연히 올 수가 없고요.
<SYNC Start=780352><P Class=KRCC>
만약에 여기 6, 8이 왔다면, 그러면 3, 9가 올 수 있는 위치는 여기, 그다음 여기, 그다음 빈자리가 또 어디 있어요? 여기, 그다음에 여기 이렇게 3자리 있죠.
<SYNC Start=793353><P Class=KRCC>
그 세 자리는 자유롭게 와도 상관이 없겠죠. 맞습니까? 되세요? 그래서 3하고 9의 위치를 잡을 때, 여기에 약간 변동이 생겨요. 세 자리 중에 두 자리를 선택하면 되고 3, 9가 자리 바꿀 수도 있으니까 P로 뽑아도 상관없죠, 한 번에.
<SYNC Start=816231><P Class=KRCC>
아니면 3C2 한 다음에 2! 하셔도 되고. 빈 구석의 6 옆의 자리만 제외하고는 다 올 수 있더라. 그래서 이렇게 곱하시고요. 이게 이거랑 큰 차이에요.
<SYNC Start=831122><P Class=KRCC>
그다음에 1, 5, 7을 배열해야 되는데요. 1, 5, 7은 아까도 말했지만, 서로소라는 개념에서는 완전히 동떨어져 있기 때문에 어느 자리에 오든 상관이 없어요. 그래서 남은 자리 3개 역시 배열하시면 돼요.
<SYNC Start=846449><P Class=KRCC>
그러면 6×2=12, 여기 또 6이네요. 그렇죠? 그러면 72, 거기다 또 6 곱하네요. 432인데요. 그러면 이런 케이스도 있고, 아래 케이스도 있는 거니까 이제 2개를 더해서 정답을 구하셔야죠. 720인가요?
<SYNC Start=869985><P Class=KRCC>
그래서 정답은 이렇게 5번이라고 마무리 해주시면 되겠습니다. 문제가 뭔가 엄청 어려운 요소가 있는 거라기 보다는 경우를 나눠서 하나하나 해야 돼서 솔직하게 말씀드리면 좀 하기 싫다.
<SYNC Start=889240><P Class=KRCC>
이런 생각이 들 수 있는 문제인 건 사실이에요. 그런데 그럴 때일수록 하나하나 기준을 잡아서 하나씩 써보면서 하다 보면 뭔가 길이 보이거든요.
<SYNC Start=900883><P Class=KRCC>
그래서 지금 같은 경우는 2, 4, 6, 8을 먼저 배치를 하다 보니까 어떤 것은 특정한 것 2개 사이에는 무조건 빈칸이 2개 들어가겠구나. 2, 4, 6, 8 이외의 수가 2개 들어가겠구나.
<SYNC Start=913939><P Class=KRCC>
그 생각에 착안해서 기준을 나누고, 그러고 나서 더불어서 3, 6, 9도 이웃하면 안 되니까, 그렇다면 이제 6이 어느 위치에 오는지를 가지고 기준을 좀 더 명확하게 나눈 다음에 약간의 수작업을 거쳐서 배치를 마친 겁니다.
<SYNC Start=930942><P Class=KRCC>
만만한 문제는 당연히 아니었고요. 고민 좀 해보셔야 되는 문제입니다. 이 문제가 제일 느끼기에는 레벨3에서는 제일 좀 느낌이 어렵지 않을까 싶어요.
<SYNC Start=941733><P Class=KRCC>
그야말로 오늘의 제가 말씀드렸던 감성 코드 중에 끈기를 가지고 해야 되는 문제가 아닌가 하는 생각이 듭니다. 레벨3의 2번 문제로 가볼게요.
<SYNC Start=954173><P Class=KRCC>
자, 저기 있는 문자 중에서 5개를 선택해서 일렬로 나열하고 싶고, 문자 c는 3번 이상 나오고 싶대요. 그러면 5개를 선택하고 싶으니까 (가) 조건에 의하면, c가 3번 나올 수도 있고요. c가 4번 나올 수도 있고요.
<SYNC Start=976971><P Class=KRCC>
다섯 자리 만드는 거라 c가 5번 나올 수도 있다고 생각할 수도 있겠지만, c는 3번 이상 나온다고 했는데, 그중에 c가 4개까지밖에 가지고 있지 않아서 c를, 5번은 일단 X.
<SYNC Start=990895><P Class=KRCC>
그래서 이 두 가지로 케이스를 크게 구분해 주시면 될 것 같아요. 그러면 5개 중에 c가 3번이 들어간다면 나머지는 a, b를 채워야 되거든요. 그 경우를 좀 디테일하게 나눠야 되지 않을까 싶어요.
<SYNC Start=1007306><P Class=KRCC>
첫 번째 케이스로 c를 3개 넣고, 일단 나열은 안 했어요. 나열은 다 숫자 배열로 정해 놓고 나열 코드를 입력시키면 돼요, 여러분이. 자, b가 2번 나오면 b는 서로 이웃한다고 했거든요.
<SYNC Start=1020559><P Class=KRCC>
그럼 b가 2번이 나올 수도 있고요, 남은 자리 2개에. b는 하나만 넣고, a만 나올 수도 있고요. 사실은 a만 2개 나오면 어떤가를 봤는데, a는 아무리 많아야 1개밖에 없죠. 그래서 이건 어차피 안 돼요.
<SYNC Start=1035989><P Class=KRCC>
그래서 이 케이스, 아니면 이 케이스예요. 그런데 여기 나열할 때 주의하셔야죠. b는 몇 개 나오든 상관없지만 일단 2번이 나오면 b는 무조건 이웃해야 돼. 그 얘기죠. 그러니까 여기에서 b는 이웃해야 돼.
<SYNC Start=1052206><P Class=KRCC>
이것 기억하고 배열할 때, 나열할 때 주의하셔야 되고요. 이번에는 c가 4번이 들어가는 경우는 나머지 하나만 채우면 돼서 b로 채우거나 아니면 a로 채우는 것 말고는 방법이 없네요. 그래서 굉장히 단순하게 경우가 나눠집니다.
<SYNC Start=1072338><P Class=KRCC>
그러면 첫 번째 케이스 같은 경우는 cccbb인데요. 결국 bb는 이웃을 해야 되니까 한 덩어리로 본다면, 4명이 움직이는 거예요. 그리고 게다가 c가 3개나 같아요. 그러면 3!로 나눠주시면 되죠.
<SYNC Start=1089698><P Class=KRCC>
같은 것이 있는 순열 코드로 나열하시면 되고요. 그러고 나서는 이웃한다 핵심은 묶어라. 전체를 나열해라. 안을 들여다봐라. 그랬는데, 안을 들여다 봤자 bb가 자리 바꾸는 건 없거든요. 1이에요, 1. 
<SYNC Start=1107856><P Class=KRCC>
여기는 5! 이고요. 왜냐하면, 묶은 것 없으니까 3개가 같으니까 3!로 나누니까 5×4=20이 되네요. 얘는 4가 되고요. 5!/4! 나누니까 5가 되고요. 
<SYNC Start=1124971><P Class=KRCC>
마찬가지네요. 케이스를 꼼꼼하게 겹치지 않게 나눈 거니까 이때 나온 경우들을 다 더해주시면 되겠죠. 34네요. 정답은 34. 막 어려운 문제는 아니죠.
<SYNC Start=1141215><P Class=KRCC>
제가 봤을 때 이 문제는 레벨3 치고는 수월한 문제에 속하지 않았을까 싶습니다. 그래도 경우를 꼼꼼하게 나눠서 해야 되기 때문에 잘 보긴 하셔야 되고요.
<SYNC Start=1152520><P Class=KRCC>
자, 그다음 문제로 가보겠습니다. 다음 문제가 레벨3에서는 사실 3번 문제로 나와 있는 함수의 개수 문제인데요. 이 문제가 레벨3 마지막 문제인데, 이 문제를 풀기 위해서는 지금 보시는 함수 코드를 좀 아셔야 돼요. 
<SYNC Start=1172601><P Class=KRCC>
함수 코드는 오늘 하는 것 말고 나중에 중복 조합까지 배우고 나면 추가해서 제가 조금 더 알려드릴 거고요, 중복 조합까지 해서.
<SYNC Start=1180685><P Class=KRCC>
오늘은 일반적인 함수의 개수 구하는 것, 일대일 함수 구하는 것, 그리고 증가함수 또는 감소함수의 개수 구하는 것까지 정리하면서 기본 예제를 한번 풀어보고, 그러고 나서 우리 수능특강 문제에 있는 문제까지 연결해서 좀 풀어볼게요.
<SYNC Start=1199020><P Class=KRCC>
함수의 개수는 평가원에서 최근에 좋아하는 주제입니다. 작년 그러니까 2021학년도죠. 2020년에 평가원에서 시행했던 시험들을 살펴보면
<SYNC Start=1216209><P Class=KRCC>
시험에 매번 나왔다고 하기는 좀 그래도, 아니죠, 쉬운 난이도로 나오는 한이 있어도 매번 나왔다고 봐야 되겠네요. 매우 쉽게 중복 조합으로 수능에서는 나왔었고요.
<SYNC Start=1229394><P Class=KRCC>
그리고 6월 모의평가에서는 연계교재에서 연계해서 함수의 개수를 주관식으로 출제했었고요. 어찌 됐든 매번 시험마다 빼놓지 않고 평가원에서 최근에 건들고 있는 주제입니다.
<SYNC Start=1242837><P Class=KRCC>
한 가지 안도를 할 수 있는 점은 함수의 개수는 사실 이렇게 스킬을 제가 알려는 드리겠지만 직접 세어도 실수만 안 하면 맞힐 수 있는 정도의 개수가 나오고는 있기 때문에 최악의 경우 수작업으로 센다고도 생각하시는 게 좋고요.
<SYNC Start=1260217><P Class=KRCC>
그러나 직접 셌을 때는 실수할 여지가 있기 때문에 제가 해드리는 것처럼 공식화해서 문제를 좀 구조화해서 풀 수 있는 힘을 기르기는 하셔야 돼요.
<SYNC Start=1271447><P Class=KRCC>
매년 건드리고 있는 소재고, 엄청 어마 무시 어렵게는 안 내지만 지금 상황으로는, 그렇지만 그래도 완전 쉬운 난이도랑 고난도 사이의 정도, 중난도에서 중고난도 사이로 내고 있기 때문에
<SYNC Start=1285506><P Class=KRCC>
올해도 여전히 여러분한테는 중요한 주제가 될 거라고 생각이 들어요. 그래서 제가 개념 책에서는 사실 한 강의로 구성을 해서 해드리기도 했고요.
<SYNC Start=1296746><P Class=KRCC>
그래서 제가 해드리는 이 함수의 주제를 잘 보시고, 혹시 조금 더 문제를 풀어보고 싶다, 기출까지 해서 그러면 선생님 개념 강의의 28강 또는 29강이었을 거예요. 그 두 강 중의 하나가 함수의 개수인데, 28강이었을 것 같거든요.
<SYNC Start=1314329><P Class=KRCC>
아무튼 그것을 찾아보시는 것도 큰 도움이 될 겁니다, 이것 풀어보시고 나서. 자, 한번 같이 볼게요. X에서 Y로 가는 함수, 이것 7이죠. 4가 겹쳤어요. 1~7에 대하여 함수 X에서 Y로 가는 개수다. 함수의 개수 이 첫 번째.
<SYNC Start=1333436><P Class=KRCC>
그다음 일대일 함수의 개수. 그다음 증가 또는 감소함수의 개수다. 이렇게 해서 3가지를 물어봤는데요. 제가 공식화해서 제시하긴 했지만, 솔직히 말씀드리면 공식이 중요하지는 않아요.
<SYNC Start=1344904><P Class=KRCC>
이것을 여러분이 느낌으로 와닿아야 돼요. 체감하셔야 돼요. 그러기 위해서는 예제를 통해 보셔야 되거든요. 그래서 이것 그대로 이 코드를 문제화 했어요. 그래서 문제를 보시고, 저랑 그리고 코드를 여러분이 말로 연습하시면 돼요.
<SYNC Start=1359325><P Class=KRCC>
조금만 엿보기를 해보면 함수는 π 중복순열을 썼고요. 일대일 함수는 순열을 썼고요. 증가나 감소함수는 조합을 썼습니다. 자, 문제를 보면서 다시 한번 볼게요. 이게 그대로 옮겨 놓은 거고요.
<SYNC Start=1371385><P Class=KRCC>
제가 수능 개념에서 한번 다뤘던 부분이라 리뷰라고 제목을 달았습니다. 자, X Y가 이렇게 생겼는데요. 일단 함수의 개수인데, 이것을 공부하기 전에 여러분 중학교, 아니죠.
<SYNC Start=1388081><P Class=KRCC>
고등학교 1학년 때 배웠던 함수의 개수, 함수에 대한 정의부터 확인하셔야 돼요. 어떤 주어진 대응 관계가 함수가 되려면 반드시 단 하나만 향해 간다. 이 원칙을 지켜주셔야 돼요. 이게 함수의 약속이에요.
<SYNC Start=1411287><P Class=KRCC>
무슨 말이냐 하면, 1~4에서 반드시 출발해야 돼요. 예를 들어 이렇게 가고, 이렇게 가고, 이렇게 가고, 넌 안 갔어. 이러면 함수가 안 돼요. 4가 죽이 되든 밥이 되든 어디로 가든 하나는 가야 돼요.
<SYNC Start=1422909><P Class=KRCC>
그래서 반드시 가야 된다는 얘기가 나오고요. 이렇게라도 꼭. 똑같은 데로 둘이 같이 가도 상관은 없어요. 어쨌든 이렇게 딱 지우고 봤을 때, 화살표가 하나씩 나갔는지만 확인하시면 돼요. 됐죠?
<SYNC Start=1436298><P Class=KRCC>
또 하나는 하나만 향해 간다고 얘기했는데, 이건 뭐냐하면, 이렇게 가리고 봤을 때 X에 있는 화살표가 나갈 때 두 개가 나가지 않았는지, 예를 들어서 여기에서 이렇게 화살표 두 개를 내보냈다. 1에서 두 개 나갔죠. 
<SYNC Start=1452586><P Class=KRCC>
이러면 함수가 안 돼요. 이해되시죠? 그래서 이렇게 가려놓고 봤을 때, 반드시 출발해야 되고요, 하나씩은. 하나만 향해서 출발해야 되고요. 두 개 화살표를 내보내시면 안 되고요.
<SYNC Start=1465531><P Class=KRCC>
그래서 그것만 지켜주시면 예를 들어서 이렇게 한쪽으로 다 몰려도 여기 남는 게 많아도 혹은 남는 게 없어도 어쨌든 가리고 보면 반드시 하나만 향해 갔으니까 함수가 맞아요. 그래서 그 원칙을 지켜서 구하시면 되고요, 그 조건으로.
<SYNC Start=1484570><P Class=KRCC>
그럼 그것 생각하고 해볼까요? 1의 선택권을 가지고 생각할 거예요. 그러면 1은 지금 선택권이 몇 개인가요? 1부터 7까지 모든 것에 다 갈 수 있으니까 7가지죠.
<SYNC Start=1499689><P Class=KRCC>
2는 그때마다 1이 하나를 선택하고 나면 2는 1이 선택한 2를 포함해서 전부 다 갈 수도 있어요. 이렇게 몰려도 된다 했잖아요. 반드시 하나만 향해 출발을 꼭 하기만 하면 돼요. 그래서 얘도 7개의 선택권을 갖고요.
<SYNC Start=1519412><P Class=KRCC>
전부 선택권은 7가지예요. 그래서 7×7×7×7해서 7의 4제곱이 되는 거죠. 됐죠. 계산 안 할게요. 그다음에 i가 j랑 다르면 f(i)가 f(j)랑 다르다 그랬는데 i, j는 X에 있는 원소를 의미하거든요.
<SYNC Start=1543973><P Class=KRCC>
그래서 X에 있는 원소가 서로 다르잖아요. 1, 2가 그러면 그들이 선택한 f(i)와 f(j)도 달라야 된다는 의미를 담고 있어서 (2)번은 1이 만약에 3으로 갔다면 2는 3이 아닌 다른 데로 가야 돼. 그래서 이렇게 다른 데로 가도록 하면 돼요.
<SYNC Start=1562164><P Class=KRCC>
3은? 그러면 1, 3 빼고 다른 데로 가고, 4는 1, 2, 5라는 선택받은 애들 빼고 다른 데로 가도록, 이게 무슨 함수냐 하면 일대일 함수다. 이렇게 이름을 붙여요. 
<SYNC Start=1579352><P Class=KRCC>
선택한 것은 선택하면 안 된다는 거죠. 그래서 선택권의 제한을 받아요. 1의 선택권은 7개죠. 2의 선택권은 여기에서 1이 선택한 애를 선택하지 못해요. 중복을 못 한다는 얘기죠.
<SYNC Start=1593861><P Class=KRCC>
그래서 6개예요. 3의 선택권은 둘이 선택한 건 또 선택을 못 하니까 5개. 4는 개. 그리하여 7개 중에 7, 6, 5, 4까지 곱하게 되는 거죠. 이렇게 되면 여기에서 잠깐만 정리, 아니죠. 조금 이따 같이 정리하자.
<SYNC Start=1615104><P Class=KRCC>
어쨌든 함수의 개수는 이렇고, 일대일 함수의 개수는 이렇고. 됐나요? 이번에는 i가 j보다 다르면 선택한 Y값들도 순서가 유지됐다는 뜻이죠. 이것을 다른 말로 하면 증가함수거든요.
<SYNC Start=1632711><P Class=KRCC>
X에 있는 원소끼리 순서가 정해져 있으면 그들이 선택한 Y들도 순서가 정해져 있다는 뜻이에요. 그러면 이렇게 가면 돼요. 1~4가 선택을 하되, 예를 들어 1하고 2가 이제 뭐죠?
<SYNC Start=1652965><P Class=KRCC>
얘네가 선택하는데, 1이 이리 갔다. 아, 1이 여기 말고 다른 데로 가보자. 1이 만약에 3으로 갔다. 그러면 2는 반드시 3보다 작은 데로 못 가눈 거예요. 1보다 2가 크니까 2는 3보다 큰 데로 간다. 지금 그 얘기를 담고 있는 거예요.
<SYNC Start=1670830><P Class=KRCC>
3은 1이나 2가 선택한 것보다는 큰 것으로 가야 되니까 이런 식으로. 이해 돼요? 4는 3이 간 것보다 큰 데로 가야 되니까 여기로 가는 거죠. 무슨 말이에요? 
<SYNC Start=1682833><P Class=KRCC>
Y에 있는 원소 중에서 4개만 뽑아주면 자동으로 1~4가 키 큰 순서대로 가져가게 되죠. 맞아요? 그런 의미에서 7개 중에 4개를 선택만 해주면 가져가는 게 끝난다. 그 얘기예요. 조합이에요. 
<SYNC Start=1706268><P Class=KRCC>
얘는 그러면 순열이었죠. 7개 중에 4개를 선택하고 그들끼리 순서를 정한거잖아요. Y에 있는 것들 중에서. 얘는 중복순열이죠. 중복을 허락해서 뽑아서 나열한 거죠.
<SYNC Start=1724169><P Class=KRCC>
제가 봤을 때 실질적으로는 이것은 떠올리지 않아도 충분해요. 생각대로 중복순열, 항상 말씀드리죠. 중복순열은 공식에 너무 구애받지 않으셔도 돼요. 생각대로는 순열. 순열도 사실은 그냥 곱의 법칙에서 나온거잖아요.
<SYNC Start=1742797><P Class=KRCC>
그래서 얘도 굳이 떠올리지 않아도 가능하고요. 조합은 솔직히 키 큰 순서대로 나열할 때 조합 쓴다는 것 알잖아요.
<SYNC Start=1750673><P Class=KRCC>
그래서 이것 바로 떠올리면 좀 빨리빨리 갈 수 있는 경향이 있어서 저는 조합 정도는 그래도 바로 떠올리시면 좋을 것 같고, 다른 것들도 떠오르면 좋은데, 억지로 떠올리려고 노력하지 않으셔도 돼요.
<SYNC Start=1762320><P Class=KRCC>
생각대로 가도 충분한 겁니다. 어쨌든 이렇게 됩니다. 함수의 개수, 일대일 함수의 개수, 증가함수의 개수. 이렇게 함수식의 표현이 나올 수도 있고요. 아니면 일대일 함수나 증가함수라고 나올 수도 있습니다.
<SYNC Start=1777681><P Class=KRCC>
증가 대신에 감소 조건을 주게 되면, i가 j보다 작으면 이쪽은 부등호가 바뀐다는 게 감소함수거든요. 그렇게 되더라도 똑같이 7C4로 하시면 돼요.
<SYNC Start=1788943><P Class=KRCC>
그 이유는 i가 j보다 작지만 함숫값은 반대로 뒤집어졌다는 얘기는 키 작은 순서대로 나열했다는 뜻이죠. 이게 키 큰 순서대로 나열한 거라면 반대로 뒤집어진다는 것은 키가 작은 순서대로 나열되는 거라서
<SYNC Start=1805420><P Class=KRCC>
4개를 뽑아만 놓으면, 얘가 제일 작은 것으로 가고, 그다음 것으로 가고, 얘가 그다음 것으로 가고, 얘가 제일 큰 것으로 가는 역순으로 간다는 의미를 담고 있기 때문에
<SYNC Start=1815229><P Class=KRCC>
증가함수냐 감소함수냐의 표현도 물론 알아야겠지만 이렇게 주어진다면 전부 다 조합으로 간다고 기억하실 수 있습니다. 이 함수의 개수에 대한 게 조금 노력도 많이 들고, 생각도 좀 하셔야 돼요.
<SYNC Start=1831577><P Class=KRCC>
제가 개념에서 물론 충분히 해드렸습니다만 수능특강을 들으면서도 함수의 개수는 워낙 중요하기 때문에 보셨던 분은 다시 보시면 좋고요. 좀 더 자세한 설명이 필요하시면 수능 개념을 참고하시면 더 좋고요.
<SYNC Start=1845870><P Class=KRCC>
거기 문제가 더 많거든요. 그래서 아까 말씀드렸듯이 참고해서 보시면 좋겠습니다. 자, 이 문제도 한번 다루고 우리 교재 문제 갈 건데요. X와 Y가 있는데, X에서 Y로의 함수 중에서 치역이 Y인 함수의 개수래요.
<SYNC Start=1862478><P Class=KRCC>
이게 또 너무 유명한 문제라서 안 하고 갈 수 없죠. 게다가 우리 중복순열을 배우고 난 상황이라 이 문제는 너무나 중요해요. 제가 리뷰 달았거든요. 이것 개념에서 한번 했던 거고요.
<SYNC Start=1874211><P Class=KRCC>
그러나 사실 이것 우리가 이미 잘 알고 있는 부분입니다. 이것은 여기에 밑줄 치고 알아두시면 돼요. 치역이 Y인 함수. 지금 했던, 방금 확인했던 이 문제, 즉 말하자면 이 함수의 계수 18 code 있죠. 
<SYNC Start=1892143><P Class=KRCC>
18번째 코드에서 나왔던 함수의 개수는 π를 써서 7π4였고, 일대일 함수는 7P4였고, 증가함수 감소함수는 7C4였고, 이 얘기에다가. 
<SYNC Start=1904764><P Class=KRCC>
이것 이제 코드로 정리하실 수 있겠죠. 제가 자세하게 설명드렸어요. 18번째 코드 정리해 보시고, 일대일 함수다 하면 이렇게도 정리해 보셔야 돼요. 
<SYNC Start=1915403><P Class=KRCC>
i, j가 다르면 f(i), f(j)가 다르다. 그다음 i, j가 차이가 나면 f(i), f(j)가 그 차이를, 그 순서를 유지한다. 혹은 반대로 간다. 이게 증가냐 감소냐죠. 그래서 나중에 코드 정리해서 올리실 때 이렇게 자세하게 올리시면 더 좋겠고요.
<SYNC Start=1934496><P Class=KRCC>
자, 어찌 됐든 이 함수의 개수에다가 지금 리뷰 개념 하나 더 얹어 보려고요. 다시 한번 볼게요. 치역이 Y가 되고 싶대요. 어떻게 하면 돼요? 
<SYNC Start=1952962><P Class=KRCC>
치역이 Y라는 건 Y에 있는 모든 원소가 X의 선택을 받았다는 뜻이에요. 왜냐하면 치역과 대조되는 개념이 공역인데요. 공역은 Y에 있는 모든 원소를 얘기하는 거고요.
<SYNC Start=1967553><P Class=KRCC>
치역은 Y에 있는 모든 원소 중에 X의 선택을 받은 친구들이에요. 그래서 만약에 이렇게 갔다면 이때는 치역이 a밖에 안 되는 거거든요. 치역이 Y가 됐다는 건 모든 학생들이 모든 a, b가 선택을 받았어야 돼요.
<SYNC Start=1985710><P Class=KRCC>
그렇기 때문에 모든 친구들이 선택을 받으려면 적어도 하나씩은 다 받아줘야 되는 거죠.
<SYNC Start=1993599><P Class=KRCC>

<SYNC Start=2008526><P Class=KRCC>
제가 왜 말 안 하는지 궁금하시죠? 
<SYNC Start=2015123><P Class=KRCC>

<SYNC Start=2023637><P Class=KRCC>
읽어 보세요.
<SYNC Start=2025565><P Class=KRCC>

<SYNC Start=2033904><P Class=KRCC>
됐어요? 1~5가 편지라고 하면 a, b, c 우체통 서로 다른 것에다가 넣는 방법이에요. 대신 빈우체통이 없어요. 그러면 하나씩은 무조건 들어가야 되는 거죠. 2개씩 들어가는 것도 있고요.
<SYNC Start=2050462><P Class=KRCC>
전형적인 분배 유형의 중복순열이고, 빈우체통 없는 경우. 빈 것 있는 것 빼주는 경우죠. 그렇게 생각하시면 돼요.
<SYNC Start=2063738><P Class=KRCC>
전체에서 빈 우체통이 생기는 것을 빼는 거죠. 그러면 2π5로 빼면 2개 들어가는 거잖아요, 5개가. 그런데 여기에 다 들어가게 돼요. 그러니까 무슨 말이냐 하면, 2개에 들어가거나 하나에 들어가는 게 여기에 다 포함되죠.
<SYNC Start=2081475><P Class=KRCC>
이 3개 들어간다는 의미는, 3개에 들어가거나 2개에 들어가거나 1개에 들어가는 게 여기에 다 포함되듯이 여기는 2개의 바구니나 우체통에 들어가거나 하나가 비고
<SYNC Start=2091088><P Class=KRCC>
아니면, 2개에 전부 이렇게 나눠서, 아니면 하나가 비고, 1개에만 들어가는 것 다 포함하는 개념이죠. 그래서 그것을 빼면 돼요. 그 대신에 그 2개를 선택은 해주셔야죠. 그런데 제가 뭐라고 했었죠? 여기 분명히 겹치는 게 나온다 그랬죠.
<SYNC Start=2106403><P Class=KRCC>
2개를 선택할 때 a, b 우체통을 선택하고, c를 선택 안 했다면 여기 비어 있죠. 그다음 예를 들어 b, c 우체통을 선택하고, a를 선택 안 했다면 여기 비어 있죠.
<SYNC Start=2120067><P Class=KRCC>
그런데 이 경우에 a가 비어 있고, b에만 넣을 수도 있고요. 이 경우에도 c가 비어 있고, b에만 넣을 수도 있어서 b에만 들어가는 게 여기서도 세고, 여기서도 센다는 거죠. a에만 들어가는 것도, c에만 들어가는 것도.
<SYNC Start=2133252><P Class=KRCC>
그래서 3개를 더해주셔야 돼요, 오히려. 2번씩 뺀 거예요. 얘기 한 번 드렸죠? 지지난 시간에 중복순열할 때. 96+3 해서 150. 이제 답을 거의 외울 지경이죠. 이렇게 되는 함수의 개수.
<SYNC Start=2152210><P Class=KRCC>
그런데 이런 것 이용한 함수의 개수 많이 나와요. 알아두실 필요가 있다는 거죠. 아니면 이제 분할을 하셔도 된다고 말씀드렸죠. 이렇게 생각하셔도 된다고 말씀드렸어요.
<SYNC Start=2165103><P Class=KRCC>
A, B, C에다 나눠서 넣는 거니까 1~5를 적당히 세 묶음으로 나누는 거예요. 이걸 별해로 처리해 드릴게요. 이것도 설명했어요, 사실 지난 시간에. 다 어디에서 설명한거냐하면, 중복순열에서 심화분배 유형으로 설명했어요.
<SYNC Start=2182768><P Class=KRCC>
그런데 너무 중요하고, 여러분이 어려워해서 제가 자꾸 설명하는 거예요. 여기 5개를 세 묶음으로 나눠요.
<SYNC Start=2196496><P Class=KRCC>
그리고 a, b, c에 분배해요. 그러면 몇 개씩 나눌 수 있냐 하면, 3 1 1 아니면 2 2 1 이렇게 나눌 수 있죠. 3묶음 나누는 방법이. 그래서 5개 중에 누구 3개를 묶을지를 결정해야 되잖아요.
<SYNC Start=2215188><P Class=KRCC>
서로 다른 3개 5개니까. 남은 것 중 하나, 이렇게 분할하는 방법이죠, 이게. 그리고 같은 개수 분할이 섞여 있으면 나눈다 그랬어요, 그들끼리 자리 바꾸는 것으로.
<SYNC Start=2228162><P Class=KRCC>
이 분할은요? 이 분할은 5개 중에 2개, 3개 중에 2개, 1개 중에 1개 하고 여기 또 같은 개수 분할 섞여 있죠. 그러니까 2!/1 하시고. 2개 분할 했죠?
<SYNC Start=2243562><P Class=KRCC>
이렇게 분할하거나 이렇게 분할하거나, 그런데 그때마다 각각 a, b, c에게 나눠줘야죠. 이 3개 묶어져 있는 것을, 예를 들어 1, 3, 4를 묶었고, 이것 이것 따로 본다면 이 묶음을 다 b로 보낼지, 그리고 얘 a, 얘 c로 보낼지
<SYNC Start=2258868><P Class=KRCC>
아니면 이 묶음을 a로 보낼지 이런 것 결정해야 되는 게 3!이죠. 너무 강하게 얘기했나요? 3! 이것 계산해도 150이 나와요. 이렇게 하는 방법도 있다고 제가 말씀을 이미 다 드렸어요.
<SYNC Start=2273066><P Class=KRCC>
그런데 너무나 중요하고, 우리 친구들이 이게 연결된다는 것을 생각을 못 하더라고요. 그래서 제가 자꾸 해드리는 거예요. 이제 이 정도 됐으면 다 따라왔을 거라고 생각이 들고요.
<SYNC Start=2285385><P Class=KRCC>
제가 개념 공부할 때도 친구들이 자꾸 물어보잖아요. 질문도 하고 그러면, '아, 이 친구들, 이것 어려워하는구나.' 이 생각이 자꾸 드는 부분이었어요.
<SYNC Start=2294505><P Class=KRCC>
그래서 제가 특강에서는 진짜 확실하게 해줘야겠다 생각을 하고 마음을 먹고 해드리는 거라 개념을 들었던 친구들도 워낙 중요하기도 하지만 어려웠으니까 다시 복습하시면 되고
<SYNC Start=2306059><P Class=KRCC>
새로 보는 친구들도 워낙 중요한 내용이고, 어려워했던 친구들도 그런 내용이니까 강조해서 자꾸 보시면 좋겠습니다. 자, 그러면 우리 수능특강으로 다시 들어와서 레벨3의 3번 문제 풀어볼게요.
<SYNC Start=2319443><P Class=KRCC>
f(1), f(4)는 1~6중에 가져가겠네요. 그런데 4의 약수래요. 그러면 4의 약수는 1, 2, 4밖에 없으니까 이중에 4의 약수 가져와 봐. 1, 2, 4 그렇지? 이것 3개네. 그런데 1은 안 되겠다.
<SYNC Start=2334726><P Class=KRCC>
왜냐하면 어쨌든 이건 함수값이니까 Y값인데, 여기에 있는 원소 중에 1, 1이 최소인데, 1, 1만 가져와도 2가 되는데, 1은 될 수가 없어. 두 수를 더해서 1이 되는 조합을 만들 수가 없어. 그래서 이 더한 게 2 아니면 4다. 이렇게 돼요.
<SYNC Start=2351794><P Class=KRCC>
그래서 여기에서 케이스를 나누는 거죠. 2인 경우와 4인 경우로 케이스를 나눠 버려요. 이 경우는 1, 1밖에 방법은 없네요. 그래서 f(1), f(4)가 1로 갈 수밖에 없어요. 자, 그러면 생각해 보자.
<SYNC Start=2376829><P Class=KRCC>
(나)조건에 의하면 3이하면 f(1)은 1이니까 1이하다 이 얘기죠. 그다음 (다)조건에 의하면 3보다 크면 f(x)가 4, f(4)의 값이 1이니까. 1보다 크거나 같다. 지금 그 얘기죠.
<SYNC Start=2400118><P Class=KRCC>
그렇게 되도록 함수를 정해보라는 얘기예요. 그러니까 수작업을 하라는 얘기죠. 그러면 이 케이스 한번 볼까요? 이렇게 되어 있고, 그러면 3이하다. 그러면 3이하니까 이렇게 3개인데요.
<SYNC Start=2420081><P Class=KRCC>
f(1)은 어차피 고정되어 있으니까, 그러면 2랑 3이 어디로 가는지가 관심이 있죠. 그런데 f(x)는 1 이하로 가야 되니까 1 이하는 1밖에 없네요. 그래서 얘는 전부 다 1로 갈 수밖에 없네요.
<SYNC Start=2433864><P Class=KRCC>
한 가지 케이스고요. 3보다 크다는 건 4, 5, 6인데요. 그때 4는 결정이 됐어요, 이미. 5하고 6인데요. 1 이상이 되죠. 그러면 1부터 6까지 선택권을 다 가지고 있어요.
<SYNC Start=2448743><P Class=KRCC>
f(5)하고 f(6)은 1부터 6까지 제각각 자기 마음대로 자유롭게 가져갈 수 있죠. 그래서 얘 6가지, 그때마다 얘 6가지. 실상은 6π2라고 봐도 되죠.
<SYNC Start=2463136><P Class=KRCC>
결국은 f(x)를 정할 때, 3 이하의, 즉 f(2)와 f(3)은 한 가지 방법이, 1로 갔으니까 1가지가 됐고요. 이때는 36가지 방법이 되죠. 그래서 이 둘을 곱하셔야죠, 이때마다 이렇게 발생하는 거니까. 곱하면 36가지죠.
<SYNC Start=2483816><P Class=KRCC>
자, 그다음 2)번 입니다. f(1)과 f(4)가 4로 갈 때를 한번 생각해 볼게요. 더해서 4로 갈 때, 그러면 이때는 수작업을 조금 하셔야겠어요. 더해서 4가 되는 조합은 (1, 3) (2, 2) (3, 1) 이렇게 되겠네요. 수작업을 좀 하시고요.
<SYNC Start=2504873><P Class=KRCC>
이때는 x가 3이하면 f(x)는 1일 때 함숫값 1이하다. 이 얘기고, x가 3보다 크면 (다)조건에 의하면 f(x)는, f(4)가 여기 오거든요. f(4)는 3이죠. 이렇게 오는 거죠. 여기는?
<SYNC Start=2529498><P Class=KRCC>
3이하면 f(x)는 2이하다. 이렇게 오는 거죠. 3보다 크면 f(x)는, 이때도 2네요. 2 이상이다. x가 3보다 작거나 같으면 f(x)는 3이하다. 
<SYNC Start=2552509><P Class=KRCC>
x가 3보다 크면 f(x)는 1 이상이더라, 1이니까. 이렇게 해서 이제 개수를 또 세어 보려고요. 볼까요? 3이하면 이 위에를 얘기하고, f(1)은 고정됐으니까 f(2), f(3)만 가지고 오면 되는데요.
<SYNC Start=2571180><P Class=KRCC>
f(2)랑 f(3)은 1이하니까 1밖에 방법이 없어서 이때는 1가지. 3보다 클 때는 4, 5, 6인데, 4는 고정이니까 5, 6만 생각하면 되고요. 3이상으로 간다고 했으니까 4가지 중에 선택권이 생기죠. 4×4=16.
<SYNC Start=2594571><P Class=KRCC>
그리고 이 둘은 어떻게 해요? 곱해주셔야죠. 이때마다 이렇게 발생하니까. 3이하, 그중에서도 2, 3을 결정해야 되는데, 2이하로 가니까 1, 2 중에 결정하니까 둘둘의 선택권을 갖죠.
<SYNC Start=2611737><P Class=KRCC>
2×2, 2π2니까. 3보다 큰데, 그렇다면 4빼고 5, 6을 얘기하는 건데요. f(x)는 2이상이니까 2를 포함해서 위로 다 가죠. 5개의 선택권을 가져요. 5×5=25죠. 그 둘을 곱하죠.
<SYNC Start=2629621><P Class=KRCC>
왜냐하면 이때마다 이런 경우가 생기니까. 100가지죠, 100. 마지막, 3이하다. 그렇다면 3이하로 가니까 이 둘이 3이하로 가니까 3가지 선택권을 가져요. 3×3=9. 식 안 쓰고 바로 갈게요, 이제.
<SYNC Start=2650062><P Class=KRCC>
3보다 큰데 1이상을 갖는대요. 여기 4빼고 5, 6인데요. 1 이상을 다 가지네요. 6개 선택권 다 갖죠. 6×6=36이죠. 됐어요. 6×3=18, 18의 제곱 아닌가요? 그러면 324네요.
<SYNC Start=2666978><P Class=KRCC>
그러면 맨 앞에서 했던 36, 16, 100, 324, 그리고 이것 이것 더하면 340인가요. 그러면 440에 476이네요. 그래서 이 문제 정답은 476. 이렇게 계산해 주시면 되겠습니다. 하실 수 있겠죠? 문제 만만치 않습니다.
<SYNC Start=2689076><P Class=KRCC>
그런데 함수의 개수 중요해요. 이런 것 한번 계산해보실 필요 있습니다. 진하게 들어가서 오늘 레벨3 문제들이 다 쉽지 않거든요. 그래도 좀 끈기를 가지고 저처럼 끝까지 좀 해보셨으면 좋겠습니다. 스스로의 힘으로.
<SYNC Start=2705805><P Class=KRCC>
자, 이제 연계교재 대표기출 문제 보면, 이 문제 안 할 거예요. 왜냐하면 이것 지난번에 풀었어요, 2강에서. 제가 똑같이 가져와서 풀어드렸어요, 그때 이미. 그래서 이 문제 정답은 240이다. 넘어갈게요.
<SYNC Start=2720582><P Class=KRCC>
자, 아래 있는 문제 볼게요. 이게 그닥 어렵지 않았는데, 당시에는 또 이게 주관식으로 나와서 정답률이 그렇게 또 높지는 않았더라고요. 1부터 6까지 중에서 중복을 허락해서 5개를 선택하는데, 5자리 자연수를 만들어보재요.
<SYNC Start=2735865><P Class=KRCC>
그러면 홀수는 1, 3, 5고요. 짝수가 2, 4, 6이거든요. 홀수는 이 말이 좀 어려웠나봐. 선생님도 그런데 사실 이 문제 풀 때 처음에 내가 이해한 게 맞나? 이런 생각 좀 하긴 했었던 것 같아요.
<SYNC Start=2748767><P Class=KRCC>
각각의 홀수는 선택을 안 하거나 한 번만 선택한대요. 그러면 홀수는 선택을 안 하거나 한 번만 선택하고, 각각의 짝수는 선택을 안 하거나 두 번만 선택하고, 그러니까 무슨 말이냐 하면
<SYNC Start=2762893><P Class=KRCC>
5개를 만들 때 홀수를 한 번만 선택하거나 선택을 안 하거나, 그러면 홀수를 1번만 선택해서 3개를 다 선택하는 방법도 있긴 하죠. 그러면 두 자리 남으니까 짝수를 이렇게. 2번 선택하는 거죠.
<SYNC Start=2780935><P Class=KRCC>
똑같은 것을 2번 선택한다 그 얘기야. 2번은 같은 것을 선택해도 된다는 의미거든요. 이해가 되세요? 그런데 만약에 이런 것 돼요, 안 돼요? 이건 안 돼요.
<SYNC Start=2791064><P Class=KRCC>
왜냐하면 이렇게 되면 짝수를 2번 선택한 게 아니라 1번씩 선택한거잖아요, 두 종류를. 1종류를 일단 잡았으면 2번을 선택하거나 아예 선택을 안 하거나 그 얘기예요. 이것 안 돼요.
<SYNC Start=2804909><P Class=KRCC>
그러면 홀수 줄여볼까요? 1, 3만 했다. 그러면 여기 이제 이렇게 되거나 이렇게 되어야 되는데, 이것 말이 안 되죠. 왜냐하면 짝수 1번 선택하는 건 안 되거든요. 그런데 안 돼요. 그러면 홀수를 1번만 가져가면? 이것 된다.
<SYNC Start=2819365><P Class=KRCC>
이런 식으로 가져가면 되죠. 홀수 1번만 선택하고, 짝수를 2번, 2번 해서 2개 종류. 홀수를 선택 안 하면? 짝수로 다 채우겠다는 얘기인데, 그러면 어떤 짝수는 1번밖에 안 들어가니까 안 되죠. 케이스가 2가지밖에 없네요.
<SYNC Start=2836910><P Class=KRCC>
그래서 이것을 나열하는 나열 코드를 따지시면 되고요. 조금 천천히 와보시면, 일단 이 짝수를 선택부터 하셔야죠. 2, 4, 6중에 짝수 중에 하나를 선택해서 그 짝수 2개를 가져오고, 이제 나열 코드를 입력해 보세요. 
<SYNC Start=2854223><P Class=KRCC>
같은 것이 있는 순열이에요. 5!을 2!로 나눠 주시면 되겠죠. 그다음 홀수 중에 하나 선택하시고요. 이 홀수 누구 올지 1, 3, 5중에, 그다음 짝수 중에 2개 선택하시고요.
<SYNC Start=2870470><P Class=KRCC>
2하고 4를 두 번씩 쓰겠다 결정하셨으면 이제 나열 코드 입력하셔야죠. 5!을 2!2! 케이스는 이 두 가지밖에 없으니까 두 케이스를 더해주시면 됩니다.
<SYNC Start=2887390><P Class=KRCC>
됐나요? 됐나요? 둘을 더하면 되죠. 그래서 이 문제 정답은 450. 주관식이었고, 만만치는 않았습니다.
<SYNC Start=2906215><P Class=KRCC>
그러나 여러분, 차분하게 풀면 두 번만, 한 번만 선택한다. 이 의미만 잘 살리시면 해볼 만한 문제가 아니었을까 싶습니다. 오늘은 여기까지 하겠습니다. 여러분 정말 수고 많으셨고요.
<SYNC Start=2917852><P Class=KRCC>
이렇게 해서 여러 가지 순열은 제가 마무리를 하겠습니다. 오늘 이제 나가는 것 보시고, 코드 올리면서 오늘 수업도 정리 잘 하시고요. 다음 시간부터는 이제 중복 조합으로 만나보도록 하겠습니다. 수고 많으셨어요.
<SYNC Start=2929763><P Class=KRCC>

</BODY>
</SAMI>
