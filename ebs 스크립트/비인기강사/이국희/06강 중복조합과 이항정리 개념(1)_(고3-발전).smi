<SAMI>
<HEAD>
<TITLE>Time Tools (C) CCNSOFT 2005</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<Sync Start=8680><P Class=KRCC>
반갑습니다. 만점을 향한 최단 경로 
<Sync Start=10786><P Class=KRCC>
2024 수능 특강 확률과 통계 함께하고 있는 저는 이국희입니다. 
<Sync Start=14763><P Class=KRCC>
여러분들, 부모님 휴대전화 전화번호 기억하시나요? 
<Sync Start=17523><P Class=KRCC>
지금 외우라고 하면 외울 수 있나요? 잘 못 외우시죠? 
<Sync Start=21577><P Class=KRCC>
저도 저희 부모님 휴대전화 번호가 한 번 바뀐 뒤로는 못 외웁니다. 
<Sync Start=27712><P Class=KRCC>
부모님께 죄송하기는 한데.
<Sync Start=29910><P Class=KRCC>
이거를 언제 깨닫냐면 휴대전화 배터리가 꺼져서 
<Sync Start=33061><P Class=KRCC>
어디 카페나 이런 데에서 전화를 급하게 해야 할 때
<Sync Start=35874><P Class=KRCC>
그때 정말 답답한 경험을 해본 적이 있어요. 
<Sync Start=40364><P Class=KRCC>
그러니까 휴대전화 번호 몇 개 안 되는데 항상 휴대전화에 저장되어 있다 보니까 
<Sync Start=44885><P Class=KRCC>
특별하게 외울 필요도 없고, 외울 만한 노력을 할 이유도 없고.
<Sync Start=49972><P Class=KRCC>
근데 그게 어떤 순간에, 위급한 순간이 오면 그게 그렇게 아쉬울 때가 있습니다. 
<Sync Start=56580><P Class=KRCC>
공부할 때 여러분들 요즘 태블릿으로 많이 하시죠?
<Sync Start=59148><P Class=KRCC>
태블릿 아니면 휴대전화, 노트북, 많은 것들을 이용해서 하시는데 
<Sync Start=63572><P Class=KRCC>
점점 스마트해지는 것 같기는 하지만,
<Sync Start=67124><P Class=KRCC>
우리에게 필요한 실제 공부의 정서는 아날로그 정서이지 않을까.
<Sync Start=72293><P Class=KRCC>
여러분들이 공부할 때 인터넷 강의 들으면서 하는 거는 당연히 도움이 되고요.
<Sync Start=76215><P Class=KRCC>
그다음에 태블릿 하면서 거기다 필기하고 이러는 것도 당연히 도움은 될 겁니다. 
<Sync Start=80852><P Class=KRCC>
하지만 그 도움의 정도보다 여러분들이 직접 손으로 쓰고요. 
<Sync Start=85849><P Class=KRCC>
여러분들이 직접 책을 읽고요. 내가 그냥 있는 그대로 나의 오감을 다 발휘해서 
<Sync Start=91791><P Class=KRCC>
오감을 예민하게 해서 공부하는 게 훨씬 더 도움이 많이 될 겁니다. 
<Sync Start=97731><P Class=KRCC>
저는 이런 얘기를 하고 싶어요. 아무리 요즘 스마트해지지만, 
<Sync Start=101570><P Class=KRCC>
공부만큼은, 그리고 여러분들 수능 때까지만큼은 
<Sync Start=104791><P Class=KRCC>
아날로그 정서로 공부를 해주셨으면 좋겠다. 
<Sync Start=108913><P Class=KRCC>
그게 결국은 빨리 가는 길이다, 이렇게 생각합니다. 
<Sync Start=112662><P Class=KRCC>
우리 오답 노트 같은 거 태블릿으로 캡처해서 모아놓고 
<Sync Start=118396><P Class=KRCC>
우리 애플리케이션 이용해서 빨리빨리 볼 수 있게끔 하는 거 너무너무 좋습니다. 
<Sync Start=122897><P Class=KRCC>
저도 그렇게 강의 준비도 했어요. 근데 뭐랄까요? 느낌. 
<Sync Start=130521><P Class=KRCC>
이 느낌과 머릿속 기억에 잘 남는 거는 그게 아니에요. 
<Sync Start=133758><P Class=KRCC>
캡처해요. 캡처하고, 끝이에요. 사진 요즘 많이 찍으시죠?
<Sync Start=138423><P Class=KRCC>
솔직히 사진이 몇백 장, 몇천 장, 몇만 장이 되는데도 
<Sync Start=141978><P Class=KRCC>
그중에서 1, 2년 동안 안 보고 있는 거, 
<Sync Start=145110><P Class=KRCC>
길게는 한 3, 4년 동안 안 보는 사진도 꽤 많을 겁니다. 
<Sync Start=148638><P Class=KRCC>
그냥 제가 여행 갈 때도 그래요. 여행 가서 사진 찍기 바쁘게 지내지 말고요. 
<Sync Start=153986><P Class=KRCC>
여행 자체를 그냥 즐기세요. 그러니까 뭔가 막 기록에 남기고, 
<Sync Start=158741><P Class=KRCC>
스마트하게 나중에 SNS나 이런 거에 올리고 하지만, 
<Sync Start=163801><P Class=KRCC>
결국은 우리가 그냥 있는 그대로 느끼는 게 더 
<Sync Start=167805><P Class=KRCC>
머릿속에 각인이 잘되지 않나, 그런 생각을 합니다. 
<Sync Start=170899><P Class=KRCC>
그래서 우리가 하는 수능 특강도 약간은 아날로그 정서를 남겨두시길 바라면서 
<Sync Start=177059><P Class=KRCC>
오늘은 중복조합과 이항정리의 내용을 들어가려고 합니다. 
<Sync Start=181089><P Class=KRCC>
이항정리는 조금 뒤에 할 거고요. 중복조합에 대한 얘기를 오늘 다 할 건데, 
<Sync Start=186926><P Class=KRCC>
너무너무 중요하고요. 우리 중복조합에서는 뺄 게 하나도 없습니다. 
<Sync Start=192251><P Class=KRCC>
심지어 제가 수능 개념에서도 유형화된 걸로 다 소개를 해드렸잖아요. 
<Sync Start=196123><P Class=KRCC>
근데 그거 말고도 활용될 수 있는 영역이 무궁무진해요. 
<Sync Start=199482><P Class=KRCC>
그래서 중복조합은 그냥 다 아우르는 문제로 출제될 수 있다. 
<Sync Start=206447><P Class=KRCC>
그냥 딱 중복조합, 경우의 수, 이게 아니라 
<Sync Start=209130><P Class=KRCC>
확률, 통계, 어디에건 다 연결돼서 출제될 수 있으니까 좀 긴장하시고,
<Sync Start=215469><P Class=KRCC>
여기에 있는 문제들 하나하나를 정말 공들여서 푸시기를 바랍니다. 괜찮아요? 
<Sync Start=220610><P Class=KRCC>
그럼, 간단하게 개념부터 좀 정리를 해볼 건데 
<Sync Start=224327><P Class=KRCC>
중복조합의 뜻은 뭘까요? 중복순열은 배웠잖아요, 우리가. 
<Sync Start=227561><P Class=KRCC>
중복을 허용해서 뽑은 다음에 그 친구를 나열하는 거다. 
<Sync Start=230788><P Class=KRCC>
중복조합은 순열과 조합의 차이처럼 그냥 뽑기만 하는 거예요. 
<Sync Start=234673><P Class=KRCC>
그래서 서로 다른 n개 중에서, 뭘 허용해서요? 중복을 허용해 r개를 택하는 거다. 
<Sync Start=250445><P Class=KRCC>

<Sync Start=252877><P Class=KRCC>
이러면 끝나요, 그냥. r개를 택하는 거다. 
<Sync Start=255649><P Class=KRCC>
근데 이걸 가지고 우리가 수학에서 직접 적용해서 풀 수 있는 거는 하나도 없죠. 
<Sync Start=260009><P Class=KRCC>
그냥 문항 해석하면 이렇게 될까? 그래서 얘를 기호로 표현하는 게 nHr입니다. 
<Sync Start=266721><P Class=KRCC>
그렇죠? 공식부터 그냥 한번 설명을 해볼게요. 
<Sync Start=270501><P Class=KRCC>
전적으로 개념만 공부하는 건 또 아니니까 
<Sync Start=272864><P Class=KRCC>
어느 정도 개념을 했다고 생각하고 조금 진행하잖아요. 
<Sync Start=277185><P Class=KRCC>
그러니까 이 정도는 그냥 바로바로 쓰죠. 
<Sync Start=279338><P Class=KRCC>
n+r-1Cr이라고 계산합니다. 실제로는 우리가 보는 거는 이거죠. 
<Sync Start=286731><P Class=KRCC>
그러면 중복조합의 원리가 중요한데 
<Sync Start=288673><P Class=KRCC>
이 원리는 개념 편 때도 당연히 강조해서 설명하지만, 
<Sync Start=291534><P Class=KRCC>
수능 특강이지만 여기서도 중요하니까 설명을 또 해보려고 합니다. 
<Sync Start=296565><P Class=KRCC>
만약에 서로 다른 아이스크림이 4개 있다고 한번 해볼게요. 
<Sync Start=305610><P Class=KRCC>

<Sync Start=308086><P Class=KRCC>
그런데 내가 중복을 허용해서요. 5개 뽑을까요? 좋아요, 5개. 
<Sync Start=313244><P Class=KRCC>

<Sync Start=317774><P Class=KRCC>
이 상황을 이해해야 하는데 제가 많이 드는 예시가 있죠? 뭐죠? 
<Sync Start=321610><P Class=KRCC>
그렇죠. 아이스크림과 코인입니다, 코인. 여기에 상자가 있고요. 
<Sync Start=325516><P Class=KRCC>
아이스크림을 담는 상자인데 이렇게 나뉘어 있어요. 
<Sync Start=328772><P Class=KRCC>
우리가 기존에 보던 거랑 조금 다르기는 하지만,
<Sync Start=331523><P Class=KRCC>
이게 무슨 뜻이냐면 A, B, C, D라는 아이스크림 이름을 적어두고요. 
<Sync Start=335062><P Class=KRCC>
내가 코인을 몇 개 갖고 있어? 5개를 갖고 있어요. 
<Sync Start=338722><P Class=KRCC>
그럼, 이 코인 5개를 여기다가 이렇게 넣는 거예요. 
<Sync Start=342450><P Class=KRCC>
그럼, 내가 만약에 B에다가 2개를 넣어요, 이렇게. 
<Sync Start=346048><P Class=KRCC>
그러면 B 2개 주세요. 이런 얘기입니다. c에다가 하나 넣어요. c 하나 주세요. 
<Sync Start=352301><P Class=KRCC>
D에다가 2개 넣어요. D 2개 주세요. 그럼 5개 다 주는 거 맞잖아. 맞아요?
<Sync Start=358282><P Class=KRCC>
그럼, 또 이렇게 할 수 있지 않을까요? 만약에 A에다가 3개 넣어요. 
<Sync Start=362008><P Class=KRCC>
저는 약간 레트로, 말이 좋아 레트로지 좀 AG 입맛이라고 하죠. 
<Sync Start=369516><P Class=KRCC>
여기다가 이렇게 2개 넣었습니다. 그럼, A는 3개, C는 2개, 
<Sync Start=374233><P Class=KRCC>
이런 식으로 해서 배열을 하게 되면 결국은 서로 다른 4개 중에서 
<Sync Start=378938><P Class=KRCC>
내가 중복을 허용해서 5개를 뽑는 형태와 똑같아지겠구나. 그렇죠? 
<Sync Start=384874><P Class=KRCC>
그럼, 얘를 계산하는 게 문제인데 
<Sync Start=387051><P Class=KRCC>
이 친구를 간단하게 표현하면 이렇게 되지 않을까요?
<Sync Start=389867><P Class=KRCC>
결국은 내가 이 중간에 가림막 있죠? 이걸 파티션이라고 한번 해볼게요. 
<Sync Start=395084><P Class=KRCC>
그럼, 파티션이 3개가 있습니다. 양쪽 끝은 빼도 돼요. 그냥 없다고 해도 돼요. 
<Sync Start=401260><P Class=KRCC>
그냥 흘리지만 않게 잘 놔놔요. 흘리지 않게 그냥 여기다 살짝 놓으세요, 코인을. 
<Sync Start=406253><P Class=KRCC>
그러면 어쨌든 파티션은 3개야. 거기다가 코인 몇 개예요? 하나, 다른 색깔로.
<Sync Start=410650><P Class=KRCC>

<Sync Start=412863><P Class=KRCC>
하나, 둘, 셋, 넷, 다섯 개입니다. 
<Sync Start=417720><P Class=KRCC>
그러면 이 친구를 그냥 같은 것이 있는 순열처럼 생각하면 어떨까요? 
<Sync Start=424637><P Class=KRCC>
얘가 a이고요. 얘가 b, b, b, b, b예요. 
<Sync Start=428246><P Class=KRCC>
예를 들어서 얘가 a, a, b, b, a, b, b, b야. 개수 맞나요? 8개. 그렇죠? 
<Sync Start=439520><P Class=KRCC>
그리고 이게 무슨 뜻이에요? a라고 하는 거는 파티션이니까 파티션이 여기 오고, 
<Sync Start=444355><P Class=KRCC>
코인 2개 오고요. 코인 3개 와요. 
<Sync Start=449768><P Class=KRCC>
그러면 A에는 있단 얘기야, 없단 얘기야? 없단 얘기예요. 
<Sync Start=455085><P Class=KRCC>
B는 없어. C는 2개, D는 3개를 가져가라, 이런 얘기입니다. 
<Sync Start=461835><P Class=KRCC>
내가 고를 아이스크림은 C 2개에다가 D 3개야, 이런 뜻이죠. 돼요? 
<Sync Start=467532><P Class=KRCC>
또 b, b, b, a, b, a, a, b, 이거 맞나요? 5개에다가 3개 맞죠. 
<Sync Start=477236><P Class=KRCC>
그러면 여기에 있는 것도 
<Sync Start=478458><P Class=KRCC>
코인 3개, 파티션 하나, 코인 하나, 파티션 하나, 파티션 하나, 코인 하나. 
<Sync Start=484574><P Class=KRCC>
그러면 얘는 A 아이스크림 3개, B 아이스크림 하나, C는 없어, D 하나. 되세요? 
<Sync Start=493285><P Class=KRCC>
이렇게 하는 거구나. 그러니까 결국은 이거를 수식으로 쓰면 이런 거 아닌가?
<Sync Start=499798><P Class=KRCC>
전체가 8개이고요. 8개를 내가 3!과 5!로 나누는 거예요. 
<Sync Start=507818><P Class=KRCC>
가만 봤더니 이들의 관계는 8!인데 5가 (8-3)!로 봐도 괜찮겠죠? 되세요? 
<Sync Start=522542><P Class=KRCC>
그러면 얘는, 이게 우리 이렇게 한번 써볼까요?
<Sync Start=526836><P Class=KRCC>
n!, r!(n-1)!, 이게 뭐죠? 고1 때 설명하는 건데, 뭐예요, 이게? nCr이지. 
<Sync Start=536760><P Class=KRCC>

<Sync Start=539339><P Class=KRCC>
그러니까 얘는 뭐요? 8C3이 되는 거예요. 또는 8C5가 되는 겁니다. 
<Sync Start=546977><P Class=KRCC>

<Sync Start=548990><P Class=KRCC>
맞아요? 그러면 우리가 중복조합이라는 걸 이름을 정한 것과 
<Sync Start=554246><P Class=KRCC>
실제 계산하는 관계식이 이렇게 나오는 건데, 
<Sync Start=556919><P Class=KRCC>
이름 붙인 걸 한번 해볼까요? 서로 다른 n개, 좋아요. 
<Sync Start=559735><P Class=KRCC>
서로 다른 n개라면 내가 서로 다른 4개의 아이스크림 중에서 
<Sync Start=564164><P Class=KRCC>
중복을 허용해서 몇 개를 뽑는다? 5개를 뽑는다. 5개 좋아.
<Sync Start=570399><P Class=KRCC>
근데 이 계산 결과를 봤더니, 이렇게, 이렇게 전개해서 봤더니 이게 나왔어요. 
<Sync Start=575899><P Class=KRCC>
그러니까 이 친구는 결국 4에다가 5를 더하고 1을 뺀 8이 나오고,
<Sync Start=581249><P Class=KRCC>
거기다가 콤비네이션 5로 바꿔도 되지만, 이 친구를 3으로 바꿔도 문제는 없다. 
<Sync Start=587569><P Class=KRCC>
이해됐죠? 따라서 우리가 nCr이라고 하는, (n+r-1)Cr이라는 공식이 나오게 된 이유가 
<Sync Start=597199><P Class=KRCC>
이 형태 때문에 그렇다는 겁니다. 괜찮아요? 이게 가장 대표적인 풀이입니다. 
<Sync Start=603269><P Class=KRCC>
이게 첫 번째 풀이라고 쓸까요, 여기? 첫 번째. 
<Sync Start=606611><P Class=KRCC>

<Sync Start=609000><P Class=KRCC>
아이스크림과 코인으로 제가 설명하는 주된 내용이고요. 
<Sync Start=612176><P Class=KRCC>
두 번째 거는 조금 약간 이해하기가 낯설 수 있는데요. 그래도 할 수 있습니다.
<Sync Start=619218><P Class=KRCC>
보시면 이런 거예요. 결국은 코인이 5개가 있고요.
<Sync Start=626656><P Class=KRCC>
그다음에 파티션이 3개가 있습니다. 
<Sync Start=629425><P Class=KRCC>

<Sync Start=632404><P Class=KRCC>
얘를 제가 이렇게 생각을 해볼게요. 가짜 코인을 4개 추가해요. 
<Sync Start=639473><P Class=KRCC>

<Sync Start=641979><P Class=KRCC>
이렇게요. 몇 개 추가한다고요? 4개. 왜 그런지는 이따가 설명하고요. 
<Sync Start=648231><P Class=KRCC>
그러면 이렇게 되거든요. 하나, 둘, 셋, 넷, 다섯, 
<Sync Start=654481><P Class=KRCC>
거기다가 가짜 코인인데 일단은 구분하지 않는 코인입니다. 괜찮아요?
<Sync Start=661801><P Class=KRCC>
그러면 여기에 있는 간격을 봐요. 하나, 다시 여기 빼고요. 
<Sync Start=667417><P Class=KRCC>
하나, 둘, 셋, 넷, 다섯, 여섯, 일곱, 8개가 되겠죠. 
<Sync Start=673897><P Class=KRCC>
그러면 지금 가짜 코인 4개까지 포함해서 이 친구 더하면 코인이 9개가 되는데 
<Sync Start=681574><P Class=KRCC>
그들의 간격에 있는 중간중간, 사이사이만 체크하면 얘가 8개거든요. 
<Sync Start=687217><P Class=KRCC>
이 8개에다가 내가 파티션 3개를 이렇게 설치하면 되지 않을까?
<Sync Start=693109><P Class=KRCC>
그러면 여기 A는 몇 개라는 얘기야? 3개, B 몇 개? 2개, C 2개, D 2개예요. 
<Sync Start=699576><P Class=KRCC>
"선생님, 아이스크림 총 5개 뽑아야 하는데 왜 갑자기 이렇게 개수가 늘어났죠?" 
<Sync Start=704871><P Class=KRCC>
뭘 추가했어요? 가짜 코인을 추가했죠. 
<Sync Start=707872><P Class=KRCC>
그러면 가짜 코인 추가한 거는 이쪽에다가 그냥 넣었지만 
<Sync Start=710735><P Class=KRCC>
아까 내가 말했죠, 구분하지 않는다고. 
<Sync Start=713049><P Class=KRCC>
그럼, 가짜 코인 하나씩을 각 아이스크림의 영역에서 빼줘요. 
<Sync Start=717940><P Class=KRCC>
그럼, 이거 가짜 거 빼, 가짜 하나 빼, 가짜 하나 빼, 가짜 하나 빼.
<Sync Start=721809><P Class=KRCC>
그럼, 이거 몇 개? 2개, 이거 하나, 이거 하나, 이거 하나. 
<Sync Start=725251><P Class=KRCC>
그럼 총 몇 개야? 5개가 되는 거죠. 그러니까 이렇게 생각할 수도 있는 겁니다. 
<Sync Start=731386><P Class=KRCC>
기존에 있던, 지금 다 개수를 잘 파악하셔야 해요. 서로 다른 n개라고 했잖아요. 
<Sync Start=739115><P Class=KRCC>
근데 이거에서 필요한 거는 파티션의 개수가 필요하거든요. 
<Sync Start=744388><P Class=KRCC>
파티션은 몇 개 필요해요? n-1개가 필요합니다. n개로 구분하려면 n-1개만 있으면 돼.
<Sync Start=751641><P Class=KRCC>
거기다가 코인. 중복을 허용해서 내가 5개를 뽑는다. 중복을 허용해서 r개를 뽑는다. 
<Sync Start=757922><P Class=KRCC>
그러니까 코인은 r개가 필요해. 거기다가 가짜 코인이 필요한데요. 
<Sync Start=762431><P Class=KRCC>

<Sync Start=765380><P Class=KRCC>
가짜 코인은 몇 개가 필요할까요? 
<Sync Start=767158><P Class=KRCC>
나중에 하나씩 똑같은 개수만큼을 빼줘야 해요, 하나씩.
<Sync Start=772310><P Class=KRCC>
그럼, 나눠진 영역의 수만큼이죠. 
<Sync Start=776088><P Class=KRCC>
즉 서로 다른 n개, 그 n개만큼을 추가해서 주면 됩니다. n개. 되세요?
<Sync Start=784863><P Class=KRCC>
그러면 이걸 가지고 구성하면 이런 거지. 코인이 실제로 r개가 있고요.
<Sync Start=792422><P Class=KRCC>
거기다가 가짜 코인 n개를 추가해요. 
<Sync Start=795780><P Class=KRCC>
그러면 얘들로 이루어진 간격은 총 몇 개가 되냐면, r부터 하지 말고,
<Sync Start=801916><P Class=KRCC>
n+r-1개가 되는 거죠. 뭐가? 간격의 수가. 
<Sync Start=808754><P Class=KRCC>
근데 그 간격에다가 뭘 설치해? 파티션을 설치해요. 
<Sync Start=812993><P Class=KRCC>
근데 파티션의 개수가 몇 개야? n-1개야. 그러니까 n+r-1Cn-1이 되겠구나. 
<Sync Start=820904><P Class=KRCC>

<Sync Start=823534><P Class=KRCC>
이걸 좀 바꿔요. 
<Sync Start=825306><P Class=KRCC>
얘하고 똑같은 거는 여기에서 이거 뺀 거를 콤비네이션에 놓는 거하고 똑같죠?
<Sync Start=830094><P Class=KRCC>
그럼, n+r-1에서 n-1을 빼. 그러면 n+r-1Cr이겠구나. 
<Sync Start=837500><P Class=KRCC>
이거 어디서 많이 본 거야? 여기에서 많이 본 거죠. 
<Sync Start=839542><P Class=KRCC>

<Sync Start=842947><P Class=KRCC>
돼요? 그래서 중복조합 개념은 두 가지입니다. 
<Sync Start=847837><P Class=KRCC>
첫 번째, 같은 것이 있는 순열로 해석하는 것. 
<Sync Start=852119><P Class=KRCC>
두 번째, 단순 조합으로 해결하는 겁니다. 
<Sync Start=855929><P Class=KRCC>
단순 조합은 내가 파티션을 설치하는 걸로 인식하시고요. 
<Sync Start=859487><P Class=KRCC>
같은 것이 있는 순열이라는 거는 파티션과 코인을 배열하는 걸로 인식하시면 돼요. 
<Sync Start=865267><P Class=KRCC>
그래서 이 두 가지의 개념으로 모든 문제가 다 풀립니다. 
<Sync Start=868175><P Class=KRCC>
심지어 방정식도 다 똑같아요. 원리는 다 이거야. 
<Sync Start=871365><P Class=KRCC>
근데 이걸 표현하기를 방정식으로 하냐, 다르게 문자로 표현하냐, 이 차이거든요. 
<Sync Start=876669><P Class=KRCC>
그래서 문제 풀면서 적용하시면 됩니다. 
<Sync Start=878694><P Class=KRCC>
그래서 그 내용이 여러분들 교재 16페이지에 나와 있는 내용이고요. 
<Sync Start=882965><P Class=KRCC>
우리는 직접 수능다움 유형 편 살짝 보고 문제 들어가 보겠습니다. 
<Sync Start=889783><P Class=KRCC>
수능에 어떤 식으로 나와요? 1. 나누어 주는 경우로 나옵니다. 
<Sync Start=893564><P Class=KRCC>
당연한 거죠, 이거는 경우의 수 파트에서 빠지지 않는 형태이고. 
<Sync Start=897038><P Class=KRCC>
순서쌍의 개수 구하는 걸로 자주 나옵니다. 
<Sync Start=900524><P Class=KRCC>
그래서 어떻게 구성이 되는지, 우리 앞에서도 많이 봤던 형태입니다, 이 2가지.
<Sync Start=905991><P Class=KRCC>
그리고 중복조합에서 가장 많이 나오는 대표 유형은 방정식인데 
<Sync Start=910515><P Class=KRCC>
오히려 방정식은 너무 많이 나와서 이제 수능에서 출제되면 변별력이 없어요. 
<Sync Start=915552><P Class=KRCC>
거의 다 맞춘다고 보시면 되고. 대신 조건들이 조금씩 추가가 될 거예요. 
<Sync Start=919499><P Class=KRCC>
그럼, 그 조건에 대한 해석만 잘해주면 되겠죠. 
<Sync Start=923346><P Class=KRCC>
그다음에 함수의 개수 너무너무 중요하고요. 
<Sync Start=926460><P Class=KRCC>
지속적으로 29번과 30번에 나오는 형태가 함수의 개수 문제입니다. 
<Sync Start=930990><P Class=KRCC>
그래서 이거는 초고난도 문항으로 출제될 확률이 매우 높다. 됐나요?
<Sync Start=937141><P Class=KRCC>
문제 한번 직접 풀어볼게요. 예제, 유제 어렵습니다. 
<Sync Start=940028><P Class=KRCC>
여러분들 레벨 1보다 어렵다고 제가 말씀드렸죠?
<Sync Start=944449><P Class=KRCC>
예제, 유제를 먼저 다 풀고 오셔야 해요. 예제 풀이 있더라도 보지 말고요. 
<Sync Start=949579><P Class=KRCC>
흰 공 1개가 들어있는 상자 A와 흰 공 2개가 들어있는 상자 B가 있다. 
<Sync Start=953479><P Class=KRCC>
그럼, 그려봐요, 여기다. 
<Sync Start=954371><P Class=KRCC>

<Sync Start=956442><P Class=KRCC>
여기 A, 여기 B, 흰 공 하나, 그다음에 흰 공 두 개다. 
<Sync Start=963676><P Class=KRCC>

<Sync Start=966317><P Class=KRCC>
이 상태에서 빨간 공, 파란 공, 노란 공을 두 상자에다 넣는다.
<Sync Start=969561><P Class=KRCC>
빨간 공이랑 파란 공이랑 노란 공. 
<Sync Start=972594><P Class=KRCC>
이때 다음을 만족시키도록 공을 넣는 경우의 수를 구하여라. 
<Sync Start=975107><P Class=KRCC>
같은 색의 공끼리는 구별하지 않고요. 
<Sync Start=976689><P Class=KRCC>
빨간 공, 파란 공, 노란 공은 각각 11개 이상씩 있다. 
<Sync Start=979620><P Class=KRCC>
왠지 11개 이상씩 있다는 거는 내가 충분히 넣을 만한 자격이 된다, 이런 얘기입니다.
<Sync Start=985342><P Class=KRCC>
두 상자 A, B에는 각각 4가지의 색이 모두 들어갈 수 있대요. 
<Sync Start=990046><P Class=KRCC>
들어갈 수 있다는 것보다는 들어가야 한다. 그렇죠? 
<Sync Start=993765><P Class=KRCC>
그러면 체크를 해볼까? 추가되는 거를 연두색으로 하겠습니다. 
<Sync Start=998117><P Class=KRCC>
4가지 색이 다 들어가야 하니까 일단 여기에 있는 거는 하얀색 들어갔고요. 
<Sync Start=1001953><P Class=KRCC>
그다음에 빨간색, 파란색, 노란색. 여기도 빨간색, 파란색, 노란색, 들어가야 해요. 
<Sync Start=1010045><P Class=KRCC>
상자 A에 들어있는 공의 개수는 8개입니다. 맞네! 
<Sync Start=1014571><P Class=KRCC>
그다음에 상자 B에 들어있는 공의 개수는 10개예요. 여기는 총 8개, 여기는 10개야. 
<Sync Start=1021615><P Class=KRCC>
근데 실제로 고정된 게 있죠. 하얀색 하나잖아. 
<Sync Start=1025694><P Class=KRCC>
그러니까 얘는 7개, 추가하는 거고요. 
<Sync Start=1028377><P Class=KRCC>
얘는 몇 개 추가하는 거야? 8개를 추가하는 거지. 됐어요? 
<Sync Start=1033284><P Class=KRCC>
그러면 이렇게 생각할 수 있지 않을까?
<Sync Start=1035335><P Class=KRCC>
7개가, 빨간색의 개수가 만약에 x고요. 파란색의 개수가 y고요. 
<Sync Start=1041226><P Class=KRCC>
그다음에 노란색의 개수가 z예요. 그러면 얘들의 합이 몇 개가 돼야 하는 거예요? 
<Sync Start=1046708><P Class=KRCC>
그렇지. x+y+z=7개가 돼야 해요. "선생님, 이거 방정식으로 푸는 거네요?"
<Sync Start=1053383><P Class=KRCC>
맞아요. 방정식으로 돼 있어야 방정식으로 푸는 게 아니라 
<Sync Start=1057224><P Class=KRCC>
방정식의 형태로 구성해서 풀 수 있으면 그게 더 빠른 겁니다. 
<Sync Start=1060096><P Class=KRCC>
근데 이걸 보자마자 여러분들이 중복조합으로 판단하는 건
<Sync Start=1062897><P Class=KRCC>
조금 이따가 뒤에서 다시 설명하고요. 
<Sync Start=1065329><P Class=KRCC>
여러분들은 이해를 돕기 위해 이렇게 구성만 딱 해놓고 생각하는 거야. 
<Sync Start=1069443><P Class=KRCC>
7개가 돼야 하는데 각 색깔 중에서 적어도 하나씩은 무조건 포함이 돼야 하겠죠. 
<Sync Start=1074434><P Class=KRCC>
그럼, 다시 말하면 빨간색이랑 파란색이랑 노란색이 
<Sync Start=1078418><P Class=KRCC>
추가로 들어가든 안 들어가든 상관없는 건 몇 개냐면 4개입니다. 
<Sync Start=1082697><P Class=KRCC>
왜요? 이렇게 하는 거야. 
<Sync Start=1084565><P Class=KRCC>
여기다가 빨간색, 파란색, 노란색은 그냥 넣어버리고 시작하는 거예요. 
<Sync Start=1089181><P Class=KRCC>
그럼, 3개 넣었죠. 몇 개 남아요? 4개 남았다는 얘기야. 그러면 생각을 해볼까요? 
<Sync Start=1094672><P Class=KRCC>
서로 다른 3개 중에 중복을 허용해서 몇 개를 뽑아? 4개를 뽑아요. 돼요?
<Sync Start=1100785><P Class=KRCC>
그러니까 그냥 이거야. 이렇게요. 
<Sync Start=1104036><P Class=KRCC>
"선생님, 왜 여기서는 안 하나요? 서로 다른 3개 중에 중복을 허용해 7개 뽑으면요?" 
<Sync Start=1107834><P Class=KRCC>
그럼 어떤 게 나오겠어? 이런 게 나오죠. 색깔이니까 빨, 빨, 말하기도 너무 기네요. 
<Sync Start=1115931><P Class=KRCC>
얘가 몇 개예요? 7, 7개. 이런 거 있잖아요. 
<Sync Start=1119539><P Class=KRCC>
그러면 이제 파란색이랑 노란색 못 들어가요. 
<Sync Start=1121565><P Class=KRCC>
그러니까 제가 뭐라고 했어요? 넣고 시작하자.
<Sync Start=1124739><P Class=KRCC>
그게 방정식 파트로 가면 
<Sync Start=1126038><P Class=KRCC>
여기가 x', y', z', 이런 식으로 바뀌는 거죠. 그건 좀 이따가. 
<Sync Start=1131301><P Class=KRCC>
어쨌든 3H4, 이렇게 해결이 될 거고요. 뒤에 있는 것도 마찬가지입니다. 8개예요. 
<Sync Start=1136335><P Class=KRCC>
근데 하나씩 넣고 시작해요. 그럼, 총 몇 개가 남아? 5개.
<Sync Start=1139950><P Class=KRCC>
그럼, 그 5개를 갖다가 구성해야 하니까 
<Sync Start=1142759><P Class=KRCC>
여기 똑같은데 서로 다른 3개 중에 중복을 허용해 5개를 뽑는다.
<Sync Start=1148711><P Class=KRCC>
그럼, 이거 계산하고 이거 계산하면 되겠구나. 되시죠? 
<Sync Start=1152151><P Class=KRCC>
6C2입니다. 이 친구는 7C2예요. 얘는 15개, 21개가 되겠다. 
<Sync Start=1162064><P Class=KRCC>
그러면 이제 A와 B에 골고루 넣는 거기 때문에 
<Sync Start=1164879><P Class=KRCC>
얘하고 얘하고 어떻게 해야 할까요? 곱해야 하겠죠. 곱해요. 
<Sync Start=1167983><P Class=KRCC>

<Sync Start=1170301><P Class=KRCC>
5에다가, 315가지의 경우의 수가 나오겠구나. 가능하시죠? 
<Sync Start=1179822><P Class=KRCC>
그래서 예제 문제 이렇게 처리하면 될 것 같습니다. 이미 넣고 시작해라.
<Sync Start=1185508><P Class=KRCC>
좋아요. 유제 1번, 빨간 공 4개 하고 흰 공 10개를 모두 일렬로 나열한대요. 
<Sync Start=1192508><P Class=KRCC>
그럼, 머릿속에 상상을 해봐요. 빨간 공 4개, 흰색 10개가 섞여 있겠구나.
<Sync Start=1198612><P Class=KRCC>
2개의 빨간 공 사이에는 항상 흰 공이 몇 개 이상 놓여 있대요?
<Sync Start=1202878><P Class=KRCC>
2개 이상 놓여 있대요. 이게 좀 어려웠을 거야, 이 문제가. 
<Sync Start=1207118><P Class=KRCC>
그러니까 가정을 하면 이런 거죠. 빨간색 어디 갔죠? 
<Sync Start=1212286><P Class=KRCC>
빨간색이 여기 있는데 총 4개. 
<Sync Start=1214232><P Class=KRCC>

<Sync Start=1217268><P Class=KRCC>
이 상태에서 흰 공이 2개 이상 놓여있다고 하니까 2개는 먼저 넣고 시작하는 거야. 
<Sync Start=1223682><P Class=KRCC>
그러면 이게 총 몇 개예요? 6개입니다. 그럼, 6개는 이미 시작했고 
<Sync Start=1228486><P Class=KRCC>
흰색이 총 10개니까 남아있는 건 몇 개야? 4개가 될 겁니다. 
<Sync Start=1233135><P Class=KRCC>
그럼, 4개가 여기 들어갈 수 있고, 여기 들어갈 수 있고, 
<Sync Start=1236588><P Class=KRCC>
여기, 여기, 여기 들어갈 수 있는 거야. 맞죠? 
<Sync Start=1240399><P Class=KRCC>
그러면 여기 영역을 내가 A라고 하고요. 
<Sync Start=1242370><P Class=KRCC>
여기는 B라고 하고요. C, D, E라고 한번 해 볼까요? 
<Sync Start=1246769><P Class=KRCC>
그럼, 이거는 결국 뭐예요? 문제를 바꿔봐요. 
<Sync Start=1249730><P Class=KRCC>

<Sync Start=1253537><P Class=KRCC>
파티션이 5개짜리인 아이스크림 바구니입니다. A, B, C, D, E가 있는 거예요. 
<Sync Start=1262860><P Class=KRCC>
그럼, 이 상태에서 흰색 4개를 갖다가 여기다가 넣어야 하겠구나. 
<Sync Start=1267821><P Class=KRCC>
흰색 4개는 뭔데? 코인. 
<Sync Start=1270285><P Class=KRCC>
그러면 서로 다른 5개 중에 중복을 허용해 몇 개를 뽑아요? 4개를 뽑아요. 
<Sync Start=1276330><P Class=KRCC>
그럼 끝나는 거 아니에요? 따라서 8개 중에서 내가 4개를 선택하는 것과 같더라. 
<Sync Start=1284927><P Class=KRCC>
그러니까 이거는 공식이니까요. 4, 3, 2, 1, 8, 7, 6, 5, 4, 2, 8, 3, 2, 6.
<Sync Start=1293954><P Class=KRCC>
그러니까 이거 5, 2, 10 하고 계산하면 70가지가 나오겠다. 
<Sync Start=1297805><P Class=KRCC>
정답은 1번 가시면 됩니다. 그렇죠?
<Sync Start=1300759><P Class=KRCC>
이게 문항을 이해하기가 좀 어려워서 그렇지 막상 풀고 나면 별건 아니잖아요. 
<Sync Start=1304685><P Class=KRCC>
근데 이거를 이렇게 바라볼 수 있는 통찰력은 당연히 필요한 거고요. 
<Sync Start=1309454><P Class=KRCC>
수학에서는 같은 문제지만 표현을 다르게 하므로 어려운 거예요. 
<Sync Start=1314717><P Class=KRCC>
그냥 이런 것도 한번 눈에 익혀두세요. 
<Sync Start=1317165><P Class=KRCC>
저 사이에 몇 개씩 들어가. 그리고 내가 거기에다 넣어야 해. 
<Sync Start=1320159><P Class=KRCC>
그럼, 그 영역이라는 거를 내가 아이스크림 바구니로 생각하고 
<Sync Start=1323264><P Class=KRCC>
나머지들을 코인으로 생각하면 되겠구나. 
<Sync Start=1325109><P Class=KRCC>
이 정도의 아이디어 전개만 가능해도 
<Sync Start=1327893><P Class=KRCC>
충분히 여러분들은 다른 어려운 문제들도 접근할 수 있습니다. 
<Sync Start=1333008><P Class=KRCC>
뒤에 있는 2번 한번 풀어보죠. 
<Sync Start=1336188><P Class=KRCC>
1부터 4까지 있고요. a, b, c가 중간에 되어 있는데, 세 자연수라고 했습니다. 
<Sync Start=1342203><P Class=KRCC>
그럼, 자연수가 1부터 4까지니까 a, b, c가 그게 다 될 수도 있는 거예요. 
<Sync Start=1347803><P Class=KRCC>
그리고 얘는 뒤에서 나오겠지만 
<Sync Start=1350406><P Class=KRCC>
함수의 표현으로 보게 되면 중복조합입니다, 보자마자. 
<Sync Start=1354581><P Class=KRCC>
근데 하지만 우리는 지금 중복조합의 기본 개념, 
<Sync Start=1357663><P Class=KRCC>
즉 의미를 해석해서 내가 중복조합으로 식을 구성하는 단계를 공부하는 거라 
<Sync Start=1362597><P Class=KRCC>
그런 거 다 무시하고요. 그냥 이 자체로 해석을 한번 해볼게요.
<Sync Start=1365865><P Class=KRCC>
모든 순서쌍의 개수는 n인데 
<Sync Start=1367583><P Class=KRCC>
n개의 순서쌍에 대하여 a+b+c의 값을 각각 s₁ 쭉 해서 sn이라고 한다. 
<Sync Start=1372306><P Class=KRCC>
무슨 소리냐면 순서쌍에 있는 모든 숫자를 더한 거를 구해라, 이런 얘기입니다. 맞죠?
<Sync Start=1379655><P Class=KRCC>
순서쌍 하나의 합을 s₁, 순서쌍 하나의 합을 s₂, 이렇게 했는데 
<Sync Start=1383331><P Class=KRCC>
결국은 모든 순서쌍의 합을 구해, 그들의 원소의 합을 다 구해, 이런 얘기입니다. 
<Sync Start=1389933><P Class=KRCC>
그러면 이걸 하기 위해서는 몇 가지 기본 베이스 지식을 알아야 하는데 
<Sync Start=1394557><P Class=KRCC>
만약에요. 1, 
<Sync Start=1396268><P Class=KRCC>

<Sync Start=1399170><P Class=KRCC>
2라고 하면 좀 그런가요? 
<Sync Start=1400422><P Class=KRCC>

<Sync Start=1402868><P Class=KRCC>
1≤a≤b≤2, 이렇게 한번 해볼게요. 
<Sync Start=1409712><P Class=KRCC>
그러면 결국은 a, b의 구성이 1과 2로만 돼야 한다는 얘기거든요. 
<Sync Start=1413328><P Class=KRCC>
이거 지금 설명하는 거 예시입니다, 지금 이 문제를 풀기 위한 베이스.
<Sync Start=1417791><P Class=KRCC>
그러면 이 친구는 (1, 1)이 될 수 있고요. 
<Sync Start=1420725><P Class=KRCC>
(1, 2)가 될 수 있고요. (2, 2)가 될 수 있습니다. 
<Sync Start=1425134><P Class=KRCC>
이렇게만 보면 조금 아직은 느낌이 덜 올 수 있는데, 하나만 더 해봐요. 
<Sync Start=1429062><P Class=KRCC>

<Sync Start=1433564><P Class=KRCC>
3 아니면, 그냥 3까지 해볼까요? 
<Sync Start=1439577><P Class=KRCC>
그럼, 얘는 (1, 1)이고요. (1, 2)고요. (1, 3)입니다. 
<Sync Start=1444810><P Class=KRCC>
(2, 2)가 와야 하고요. (2, 3)이 와야 하고요. 맞아요? 
<Sync Start=1449431><P Class=KRCC>
그다음 또 3에다가 뭐가 와요? 3이 와야 합니다, 이렇게. 
<Sync Start=1455154><P Class=KRCC>
1의 개수 세볼까요? 둘, 셋, 넷. 둘, 셋, 넷. 둘, 셋, 넷, 4개. 
<Sync Start=1466187><P Class=KRCC>
나오는 숫자들의 개수가 어때요? 똑같습니다. 그렇죠? 여기 앞에도 마찬가지예요. 
<Sync Start=1472895><P Class=KRCC>
(1, 1), (1, 2), (2, 2). 1이 3개, 2가 3개. 
<Sync Start=1476541><P Class=KRCC>
결국은 내가 원하는 순서쌍을 다 구하고 나면 나오는 숫자들의 개수는 동일하겠구나, 
<Sync Start=1482595><P Class=KRCC>
모든 순서쌍을 체크했을 때. 
<Sync Start=1485559><P Class=KRCC>
그렇게 해서 시작하면 이제 이 문제의 출발점이 준비가 된 겁니다. 
<Sync Start=1491769><P Class=KRCC>
결국은 이런 얘기죠. 
<Sync Start=1494635><P Class=KRCC>
a, b, c라고 하는 게 1부터 4까지의 숫자들로 배열이 다 돼야 하는 거예요. 
<Sync Start=1499701><P Class=KRCC>
그럼, 해석을 해볼까? 1, 2, 3, 4라고 하는 서로 다른 숫자가 있습니다. 
<Sync Start=1506681><P Class=KRCC>
근데 이 중에서 내가 중복을 허용해 3개를 택해요. 
<Sync Start=1519609><P Class=KRCC>
그러면 이 말은 이렇게도 뽑힐 수 있다는 얘기지. 1, 2, 2, 3. 맞아요? 
<Sync Start=1530122><P Class=KRCC>
그러면 결국은 a가 1이 된다는 얘기고요. 3개 뽑아야 하는데 4개 뽑았네. 
<Sync Start=1536904><P Class=KRCC>
a가 1이 된다는 얘기고요. b가 2가 된다는 얘기고, c가 2가 된다는 얘기입니다. 
<Sync Start=1542273><P Class=KRCC>
또 "선생님, 저는요. 3, 3, 2를 이렇게 뽑는데요."
<Sync Start=1547289><P Class=KRCC>
어차피 뽑는 거니까 순서는 상관할 필요가 없다니까요. 
<Sync Start=1550576><P Class=KRCC>
2가 어디로 가면 돼? a로 가면 돼. b가 3이고, c가 3이라는 얘기예요. 
<Sync Start=1555824><P Class=KRCC>
2, 3, 4는요. 2 a이고, 3이 b이고, 4가 c야. 
<Sync Start=1561602><P Class=KRCC>
따라서 결국 이걸 구하는 과정은 이렇게 되겠다. 
<Sync Start=1564225><P Class=KRCC>
서로 다른 4개 중에서 중복을 허용해 몇 개를 뽑아요? 3개를 뽑아요. 
<Sync Start=1569434><P Class=KRCC>
그러면 얘는 6C3이 될 거고, 3, 2, 1에 6, 5, 4가 될 거니까 몇 개야? 
<Sync Start=1575741><P Class=KRCC>
20개가 나올 겁니다. 됐죠? 
<Sync Start=1579032><P Class=KRCC>

<Sync Start=1580852><P Class=KRCC>
그런데 결국은 지금 이걸 배열하는 게 20개가 나왔다는 얘기인데 
<Sync Start=1586604><P Class=KRCC>
1부터 얼마까지 나올 수 있는 거예요, 전체가? 
<Sync Start=1590393><P Class=KRCC>
4, 4개가, 1, 2, 3, 4가 다 나올 수 있다는 얘기죠. 그렇죠?
<Sync Start=1595529><P Class=KRCC>
그러면 얘들의 개수를 한번 구해볼까요? 
<Sync Start=1597978><P Class=KRCC>

<Sync Start=1600682><P Class=KRCC>
여기 있는 거 하게 되면 전체가 순서쌍 20개니까 60개. 60개의 원소가 존재해요. 
<Sync Start=1609993><P Class=KRCC>

<Sync Start=1611975><P Class=KRCC>
이게 뭔데? 이게 순서쌍의 개수야. 
<Sync Start=1614336><P Class=KRCC>

<Sync Start=1617575><P Class=KRCC>
순서쌍의 개수. 근데 내가 구해야 할 거는 각 자리들의 합이잖아요. 
<Sync Start=1623000><P Class=KRCC>
그러니까 이게 이렇게 해서 얘가 20개가 쭉 나와요. 
<Sync Start=1626393><P Class=KRCC>
근데 각각마다 몇 개씩 들어있어? 3개씩 들어있어요. 
<Sync Start=1630079><P Class=KRCC>
그러니까 이 숫자들의 합은 60개를 이용해서 풀어야 하겠다. 그렇죠? 
<Sync Start=1638025><P Class=KRCC>
근데 다 가능한 숫자들이 뭐예요? 1, 2, 3, 4가 이 안에 나뉘어 있겠죠. 
<Sync Start=1645740><P Class=KRCC>
근데 개수가 아까 보니까 똑같았잖아요. 
<Sync Start=1647916><P Class=KRCC>
그러니까 60개를 1, 2, 3, 4라는 4개의 숫자로 쪼개야 하니까 
<Sync Start=1652253><P Class=KRCC>
각각 몇 개씩이 존재하겠다? 15개씩 존재하겠다. 각 15개. 돼요? 
<Sync Start=1660447><P Class=KRCC>
그럼, 얘들을 다 더 하래요? 그러면 (1+2+3+4)×15 하면 끝 아닌가? 맞죠? 
<Sync Start=1669534><P Class=KRCC>
이거 얼마예요? 10이에요. 그러면 10에다가 15 곱할 거니까 얼마? 150이라는 얘기죠. 
<Sync Start=1676467><P Class=KRCC>
되세요? 이 문제는 중복조합 방정식이나 함수의 표현이나 이런 걸로 
<Sync Start=1682572><P Class=KRCC>
이미 본 친구들은 쉽게 접근할 수 있는 건데 
<Sync Start=1685401><P Class=KRCC>
문항 자체를 해석하는 것이 또 중요한 거니까 한번 이렇게 연습을 해보시고.
<Sync Start=1690972><P Class=KRCC>
그다음에 아까 처음에 설명했던 이 문제를 풀기 위한 기본 베이스,
<Sync Start=1694384><P Class=KRCC>
그것도 왜 그렇게 됐는지에 대한 것까지도 공부하시면 
<Sync Start=1698292><P Class=KRCC>
훨씬 더 폭넓게 문제를 바라볼 수 있습니다. 됐죠? 좋아요. 
<Sync Start=1702599><P Class=KRCC>
그래서 첫 번째 파트는 이렇게 마무리하고요. 
<Sync Start=1705610><P Class=KRCC>
제가 작년 BOGO 문제 가져오려고 봤더니 
<Sync Start=1708669><P Class=KRCC>
올해 문제들로만 풀어도 충분히 괜찮겠다. 
<Sync Start=1711923><P Class=KRCC>
왜냐하면 난이도도 그렇고 문제의 형태도 거의 똑같습니다. 
<Sync Start=1715283><P Class=KRCC>
그래서 오늘 하는 것 중에는 뒤에 한 문제 갖고 오기는 했는데 
<Sync Start=1719010><P Class=KRCC>
부지런히 한번 달려가 보죠. 
<Sync Start=1721196><P Class=KRCC>
중복조합의 활용은 개념 편을 그렇게 길게 갖고 갈 이유는 없습니다,
<Sync Start=1726658><P Class=KRCC>
어느 정도 정형화되어 있기 때문에.
<Sync Start=1729821><P Class=KRCC>
방정식이죠. 여러분들 교재 보면 나올 거예요. 방정식의 해다. 
<Sync Start=1734481><P Class=KRCC>

<Sync Start=1738223><P Class=KRCC>
결국은 내가 아이스크림이나 코인이나 이런 걸로 다 개념 설명을 했지만, 
<Sync Start=1742761><P Class=KRCC>
실제 우리가 풀기 가장 효율적인 거는 이런 형태인 겁니다. 
<Sync Start=1745740><P Class=KRCC>
아이스크림 4종류를 x, y, z, w로 구분을 해볼게요. 엄밀히 말하면 이런 거죠. 
<Sync Start=1753061><P Class=KRCC>
x가 A 아이스크림의 개수, y가 B 아이스크림의 개수, 
<Sync Start=1756685><P Class=KRCC>
z가 C 아이스크림의 개수, w가 D 아이스크림의 개수예요. 
<Sync Start=1761133><P Class=KRCC>
상황으로 이해하자면 여기에 파티션이 하나, 둘, 세 개가 있는 거고, 
<Sync Start=1765173><P Class=KRCC>
4종류의 아이스크림이 순서대로 배열된 거다. 
<Sync Start=1769015><P Class=KRCC>
근데 이 친구가 아이스크림 10개가 된대요. 
<Sync Start=1772860><P Class=KRCC>
그러면 내가 저렇게 아이스크림을 구성하는 종류는 어떻게 보시면 돼요? 
<Sync Start=1777564><P Class=KRCC>
코인 10개를 여기다 적당하게 집어넣으면 되겠죠. 
<Sync Start=1779868><P Class=KRCC>
근데 그거에 대한 공식이 아까도 배웠지만,
<Sync Start=1781897><P Class=KRCC>
서로 다른 4개 중에 중복을 허락해 몇 개를 뽑아요? 10개를 뽑아요. 맞아요? 
<Sync Start=1789144><P Class=KRCC>
그러면 이 친구하고 이 친구가 어떻게 연결이 되냐? 사실은 이런 개념입니다. 
<Sync Start=1794029><P Class=KRCC>
x라고 하는 값이 실제 숫자지만 그 값이 아이스크림의 개수인 거예요. 
<Sync Start=1801095><P Class=KRCC>
그래서 어떤 책들 보면, 제가 개념 편 적을 때도 그렇게 하긴 했는데 
<Sync Start=1804904><P Class=KRCC>
만약에 이게 2+2+2+4예요. 
<Sync Start=1808521><P Class=KRCC>
그럼, 이게 의미하는 거는 x가 2개, y가 2개, z가 2개, w가 4개, 
<Sync Start=1815529><P Class=KRCC>
이렇게 표현해서 이게 전체 합이 10개가 되는 식으로 구성하긴 하는데,
<Sync Start=1820440><P Class=KRCC>
엄밀히 표현하면 얘들의 합이 10이 되는 거고,
<Sync Start=1823752><P Class=KRCC>
이들의 숫자들은 결국 여기 파티션에 들어가는 코인의 개수,
<Sync Start=1828311><P Class=KRCC>
즉 아이스크림의 개수랑 똑같은 거다. 더 할 필요는 없을 것 같아요. 
<Sync Start=1833509><P Class=KRCC>
그렇죠? 너무나 충분히 설명했습니다. 그래서 4H10이라고 하는 걸로 딱 끝나요. 
<Sync Start=1837822><P Class=KRCC>

<Sync Start=1840268><P Class=KRCC>
근데 문제가 되는 건 이런 거죠. 똑같은 방정식의 해인데요.
<Sync Start=1845052><P Class=KRCC>

<Sync Start=1851465><P Class=KRCC>
아이스크림 가게 사장님이 재고가 너무 많이 쌓인 거예요. 
<Sync Start=1854714><P Class=KRCC>
재고를 좀 줄이고 싶어서 "종류별로 하나씩은 무조건 사세요." 강매하는 겁니다. 
<Sync Start=1862571><P Class=KRCC>
그러면 이거 어떻게 할까요? 
<Sync Start=1863909><P Class=KRCC>
코인이 10개 있는데 그 코인 10개를 이미 여기에다 하나씩 넣고 시작하는 거죠. 
<Sync Start=1869245><P Class=KRCC>
근데 "그거는 돈 안 받을게." 이렇게 하는 거예요. 
<Sync Start=1872568><P Class=KRCC>
그러면 이 친구의 구성이 이렇게 바뀌지 않나? 
<Sync Start=1875166><P Class=KRCC>
다른 x라고 한다면 얘가 코인 4개를 이미 뿌렸기 때문에 6개만 남아요. 
<Sync Start=1884192><P Class=KRCC>
그러면 이걸 가지고 중복을 허용해서 뽑아버리면 상관없다는 거죠. 왜? 
<Sync Start=1889355><P Class=KRCC>
여기에 0, 0, 0, 6이 나오면 이건 무슨 소리야? 
<Sync Start=1894122><P Class=KRCC>
실제 A 아이스크림은 1개, B 아이스크림 1개, 
<Sync Start=1897924><P Class=KRCC>
C 아이스크림 1개, D 아이스크림 7개가 된다는 얘기입니다. 왜요? 
<Sync Start=1902672><P Class=KRCC>
이미 하나씩 깔았기 때문에 여기에 있는 숫자를 1에 더해주는 형태로 가야 하니까.
<Sync Start=1907715><P Class=KRCC>
맞죠? 따라서 이 친구를 계산하는 과정을 가만 보니까 
<Sync Start=1913215><P Class=KRCC>
"이 x 대신에 x'+1이라는 걸로 내가 구성을 해놓으면 되지 않을까?"라고 하는 거예요.
<Sync Start=1920689><P Class=KRCC>

<Sync Start=1923502><P Class=KRCC>
그러면 여기에 있는 1들이 오른쪽으로 이양하면서 6으로 바뀌는 거고요. 맞죠?
<Sync Start=1930146><P Class=KRCC>
근데 두 가지 문제의 특징이 있습니다. 
<Sync Start=1934075><P Class=KRCC>
첫 번째 거는 x와 y와 z와 w가 0부터 시작해도 괜찮다는 뜻이에요. 
<Sync Start=1941857><P Class=KRCC>
왜? 단순하게 코인 10개 뿌리면 되니까 5개에 5개를 뿌리든, 2개에 8개를 뿌리든, 
<Sync Start=1948357><P Class=KRCC>
0, 0, 0, 10, 다 가능하다고요. 근데 밑에 있는 건 뭐야? 
<Sync Start=1953776><P Class=KRCC>
x와 y와 z와 w가 무조건 하나씩 갖고 가라고 했죠. 1 이상씩이 되는 거구나. 
<Sync Start=1961020><P Class=KRCC>
그래서 우리가 보편적으로 이걸 유형화되어 있는 책들을 보시면 얘는 뭐예요? 
<Sync Start=1967592><P Class=KRCC>
그렇죠. 자연수, 다시. 
<Sync Start=1971744><P Class=KRCC>

<Sync Start=1973911><P Class=KRCC>
음이 아닌 정수. 그다음에 여기를 뭐라고 해요? 자연수라고 구분을 짓죠. 
<Sync Start=1984853><P Class=KRCC>
그래서 보통 음아정, 자연수, 이렇게 나눕니다. 그러면 거꾸로 가볼까? 
<Sync Start=1990260><P Class=KRCC>
음이 아닌 정수라는 거는 결국 0부터 시작하는 거고,
<Sync Start=1993084><P Class=KRCC>
이 케이스로 만약에 문항이 해석되면 기본 중복조합으로 그냥 써버리면 끝나요. 
<Sync Start=1999024><P Class=KRCC>
근데 자연수가 되는 경우는 좀 다르다. 자연수가 될 때의 팁은 이렇게 하시면 됩니다.
<Sync Start=2005929><P Class=KRCC>
어떤 식을 구성했을 때 이 친구의 미지수가 0부터 시작하는 걸로 넣으시면 돼요. 
<Sync Start=2011556><P Class=KRCC>
예를 들어 지금 자연수라고 했죠. 
<Sync Start=2013428><P Class=KRCC>
그러면 x라고 하는 거를 구성할 때 얘가 자연수가 돼야 할 거 아니에요. 
<Sync Start=2016428><P Class=KRCC>
그러면 무조건 0에다가 뭔가 더하는 형태로, 
<Sync Start=2018927><P Class=KRCC>
아니면 0에다가 문제에 따라 다르겠지만 뭔가 빼는 형태로,
<Sync Start=2021885><P Class=KRCC>
즉 얘는 0부터 더해서 1, 2, 3, 4 이렇게 갈 거 아니에요. 
<Sync Start=2027003><P Class=KRCC>
그러면 이 친구를 자연수를 만들려면 x', 0부터 시작하는 거니까 
<Sync Start=2032625><P Class=KRCC>
여기다가 1을 더하면 얘는 무조건 시작이 1부터 된다고 할 수 있겠죠. 이해돼요?
<Sync Start=2040622><P Class=KRCC>
만약에 문제가 이렇게 나와요. 3 이상의 자연수입니다. 
<Sync Start=2044258><P Class=KRCC>

<Sync Start=2047722><P Class=KRCC>
종류별로 3개씩은 무료로 드릴게요. 
<Sync Start=2051322><P Class=KRCC>
근데 내가 먹어야 할 아이스크림을 너무 많이 먹으면 안 되니까 20개라고 해봐요. 
<Sync Start=2055911><P Class=KRCC>
20개인데 3개씩은 이미 가게에서 주는 거예요. 그러면 3개씩을 깔았어. 그럼, 12개야.
<Sync Start=2062964><P Class=KRCC>
그러면 8개를 내가 구매해야 하겠죠. 그러면 그걸 식으로 구성하면 어떻게 될까? 
<Sync Start=2067982><P Class=KRCC>
일단 x가요. y, z, w까지 다 마찬가지입니다. x가 3 이상이어야 해요.
<Sync Start=2075092><P Class=KRCC>
그럼, 이걸 식으로 세우는 건, 
<Sync Start=2076425><P Class=KRCC>
x라고 하는 건 0에다가 최소 숫자 얼마를 더 해야 해요? 3을 더해야 해요.
<Sync Start=2082329><P Class=KRCC>
근데 0으로 시작하는 걸 뭐로 대체해? x'으로 시작하면 되는 겁니다. 
<Sync Start=2087857><P Class=KRCC>
그러니까 이 문제는 이렇게 돼요. 
<Sync Start=2089942><P Class=KRCC>
조금 전에 x+y+z+w=20이 되면, 만약에 3개 이상씩 사야 합니다. 
<Sync Start=2097163><P Class=KRCC>
그래요? x'+3+y'+3+z'+3+w'+3=20입니다, 이렇게 하고요. 
<Sync Start=2107234><P Class=KRCC>
이때 x'과 y'과 z'과 w'은 시작을 0부터 하는 걸로 했기 때문에 
<Sync Start=2113592><P Class=KRCC>
이렇게 바꾸고 나서 다시 뭐로 가는 거야? 음아정으로 가는 겁니다. 
<Sync Start=2117559><P Class=KRCC>
그러니까 결국은 나는 
<Sync Start=2118847><P Class=KRCC>
음아정의 형태로 만들어 주는 식을 구성하는 게 제일 중요하다는 거죠. 
<Sync Start=2122944><P Class=KRCC>
미지수가 0부터 시작해도 만족하게끔 식을 짜는 게 제일 중요한 거야.
<Sync Start=2127895><P Class=KRCC>
외우는 게 아니에요. 따라서 얘도 결국 이렇게 되겠다. 
<Sync Start=2133190><P Class=KRCC>
x'+y'+z'+w'=8개. 그러니까 얘는 뭐야? 4H8. 됐죠? 결국은 이게 다입니다. 
<Sync Start=2145008><P Class=KRCC>
여러분들 교재에 보시면 중복조합의 활용이라고 해서 방정식으로만 쭉 나와 있고요. 
<Sync Start=2150282><P Class=KRCC>
조건을 만족시키는 함수의 개수, 이렇게 나와 있는데, 
<Sync Start=2153147><P Class=KRCC>
그 친구에 대한 것들은 어차피 여러분들이 함수들의 개수를 구할 때 
<Sync Start=2159355><P Class=KRCC>
중복조합인지 아닌지만 판단하면 금방 나옵니다. 
<Sync Start=2163354><P Class=KRCC>
그래서 그거는 살짝만 설명해 보고 문제로 또 들어가 볼게요. 
<Sync Start=2168822><P Class=KRCC>

<Sync Start=2171893><P Class=KRCC>
보시면 중복조합의 가장 대표적인 형태는 이런 형태입니다. 
<Sync Start=2178633><P Class=KRCC>
x와 y가 이렇게 달라요. x와 y가 달라요. 
<Sync Start=2184115><P Class=KRCC>
이런 상태에서 만약에 f(x)와 f(y)가 이렇게 된대요. 
<Sync Start=2189607><P Class=KRCC>
그러면 얘는 x값들과 정의역들이, 이렇게 하면 좀 헷갈리려나? 
<Sync Start=2196370><P Class=KRCC>
그래요. 변수가 y이면 좀 그렇죠? x₁, x₂. x₁, x₂. 
<Sync Start=2202657><P Class=KRCC>
x값이 커져요. 그러면 함숫값도 커져야 한대. 이거는 중복조합이 아닙니다. 
<Sync Start=2206240><P Class=KRCC>
똑같은 게 들어가지 않는다는 거야. 이해됐죠? 
<Sync Start=2210269><P Class=KRCC>
그럼, 예를 들어 x₁에다가 x₂예요. 
<Sync Start=2214507><P Class=KRCC>
그럼, 이때 f(x₁)≤ f(x₂), 이렇게 한번 해볼까요?
<Sync Start=2221229><P Class=KRCC>
그럼, 이거는 무슨 소리야? 
<Sync Start=2222180><P Class=KRCC>

<Sync Start=2224224><P Class=KRCC>
만약에 숫자로 하면 2와 3이 있는데 2보다 3이 더 커요. 
<Sync Start=2228515><P Class=KRCC>
그러면 함숫값 f(2)와 f(3)이 이런 관계식을 만족한대요. 
<Sync Start=2235678><P Class=KRCC>
그러면 함숫값은 중복을 허용해서 뽑히는 것과 똑같죠? 그렇죠? 
<Sync Start=2243297><P Class=KRCC>
그러면 이 친구도 결국은 뭐가 되겠다? 중복조합의 의미가 되겠구나. 
<Sync Start=2248942><P Class=KRCC>
무슨 얘기인지 알겠어요? 
<Sync Start=2249912><P Class=KRCC>
그러니까 아까 문자에서 결국은 a≤b≤c, 몇 번이었죠, 아까 앞에? 
<Sync Start=2258363><P Class=KRCC>
이렇게 돼 있던 거, 이거 있잖아요. 
<Sync Start=2262443><P Class=KRCC>
어떤 값에 대하여 a, b, c가 같거나 큰 형태로 갑니다. 
<Sync Start=2267256><P Class=KRCC>
그 말은 중복을 허용해서 선택하는 케이스로 간다는 거죠. 
<Sync Start=2273143><P Class=KRCC>
따라서 순서는 어느 정도 정해져 있고 
<Sync Start=2276096><P Class=KRCC>
그 상태에서 나오는 값들이, 함숫값들이 저 관계를 유지하고 있기 때문에 
<Sync Start=2280592><P Class=KRCC>
얘가 대표적인 중복조합입니다. 얘 아니고요, 얘. 되세요? 
<Sync Start=2285288><P Class=KRCC>
그 얘기가 여러분들 조건을 만족시키는 함수의 개수에 나오기 때문에 
<Sync Start=2289201><P Class=KRCC>
이 친구에 대한 거는 당연히 문제 풀 때 적용할 수도 있고 
<Sync Start=2293591><P Class=KRCC>
아니면 문제에 제시될 수도 있고, 그건 적절하게 상황에 따라서 판단하시면 됩니다. 
<Sync Start=2298773><P Class=KRCC>
됐나요? 그 뒤로 이제 넘어가 보도록 하죠. 
<Sync Start=2301070><P Class=KRCC>

<Sync Start=2304441><P Class=KRCC>
함수에 대한 건 뒤에서 또 여러 번 볼 거라. 
<Sync Start=2307651><P Class=KRCC>
그림과 같이 넓이가 12인 직사각형의 넓이가 1인, 여기까지 끊는 거죠. 
<Sync Start=2316344><P Class=KRCC>
넓이가 12인 직사각형을 넓이가 1인 12개의 정사각형으로 나눈 도형이 있다. 
<Sync Start=2320911><P Class=KRCC>
넓이가 1인 12개의 정사각형 각각에 
<Sync Start=2323529><P Class=KRCC>
빨간색, 노란색, 파란색, 보라색 중 한 가지 색을 택하여 칠한다. 
<Sync Start=2327361><P Class=KRCC>
어쨌든 색칠한다는 얘기예요. 
<Sync Start=2328989><P Class=KRCC>
빨간색, 노란색, 파란색, 보라색이 칠해진 부분의 넓이를 
<Sync Start=2331942><P Class=KRCC>
S₁, S₂, S₃, S₄라고 할 때 넓이가 얼마짜리래요, 원래? 1짜리래요. 
<Sync Start=2337630><P Class=KRCC>
결국은 개수 묻는 거나 똑같은 거 아니에요?
<Sync Start=2340613><P Class=KRCC>
색칠되어 있는 영역의 개수를 구하여라, 이거랑 똑같습니다. 
<Sync Start=2345022><P Class=KRCC>
그럼, 모든 순서쌍의 개수를 구하여라. 그러면 어떻게 하면 돼요? 
<Sync Start=2348363><P Class=KRCC>
빨간색은 Red, 노란색은 Yellow, 파란색은 Blue, 보라색은 Purple. 
<Sync Start=2355086><P Class=KRCC>
이것들을 더했더니 몇 개가 돼야 해? 12개가 돼야 해요. 
<Sync Start=2359982><P Class=KRCC>
근데 문제가 있죠. 여기 약간 살짝, 아주 살짝 힌트를 준 게 이겁니다. 
<Sync Start=2365706><P Class=KRCC>
Si가 뭐가 아니다? 0이 아니다. 0이 아니래요. 
<Sync Start=2371226><P Class=KRCC>
그러면 무조건 칠을 해야 한다는 얘기야, 어떠한 색이든지 다 한 번 이상은.
<Sync Start=2376131><P Class=KRCC>
그러니까 여기에 있는 거를 얘가 자연수의 조건을 만족하는 것과 똑같기 때문에 
<Sync Start=2380920><P Class=KRCC>
결국 이 친구를 음아정의 형태로 바꾸려면 
<Sync Start=2383657><P Class=KRCC>
R'+1+Y'+1+B'+1+P'+1=12로 만든다. 여러분들이 편하면 X, Y, Z, W로 하세요. 
<Sync Start=2394701><P Class=KRCC>
그냥 저는 색깔이 나와 있으니까 그냥 한 겁니다. 
<Sync Start=2397013><P Class=KRCC>
R'+Y'+B'+P'은 4를 뺄 거니까 8이고요. 
<Sync Start=2402699><P Class=KRCC>
따라서 얘는 4H8이겠구나, 음아정의 형태로 계산하면.
<Sync Start=2408110><P Class=KRCC>
따라서 얘는 얼마야? 11C8이고요. 11C3과 똑같을 겁니다. 
<Sync Start=2413909><P Class=KRCC>
계산해 볼까요? 3, 2, 1에다가 11, 10, 9가 될 거고, 
<Sync Start=2419672><P Class=KRCC>
3, 5가 될 거니까 55에다가 3 곱하니까 얼마예요? 165. 그렇죠? 165. 정답 5번. 
<Sync Start=2427432><P Class=KRCC>
별거 아닙니다, 이 문제는. 그렇죠? 
<Sync Start=2430290><P Class=KRCC>
어차피 다 다른 자리야. 이거 회전하고 이러는 거 아닙니다.
<Sync Start=2433376><P Class=KRCC>
다 다른 자리. 그리고 넓이가 1이야. 
<Sync Start=2435613><P Class=KRCC>
그럼, 넓이의 값을 S₁이라고 했는데 넓이가 1이니까 그냥 개수, 
<Sync Start=2440145><P Class=KRCC>
색칠된 영역의 개수가 똑같으니까. 됐나요?
<Sync Start=2444012><P Class=KRCC>
좋습니다, 예제 2번. 유제 3번으로 가보죠. 별표 하세요. 
<Sync Start=2449499><P Class=KRCC>
별거 아니지만 이걸 제대로 풀 수 있냐, 없냐가 
<Sync Start=2452548><P Class=KRCC>
중복조합의 방정식 문제를 정확하게 이해하냐, 못하느냐로 나눠집니다. 
<Sync Start=2456740><P Class=KRCC>
a가 2 이상이고요. b가 3 이상, c가 4 이상이래요.
<Sync Start=2461671><P Class=KRCC>
그러면 a+b+c가 15가 되도록 하는 순서쌍의 개수를 구하래요. 
<Sync Start=2466364><P Class=KRCC>
그럼, 어쨌든 a+b+c=15인 건 맞는데,
<Sync Start=2470451><P Class=KRCC>
a라고 하는 것도 음아정이 아니고, b도 음아정이 아니고, c도 음아정이 아니죠. 
<Sync Start=2474693><P Class=KRCC>
근데 내가 중복조합으로 풀려면 어떻게 해야 해? 음아정으로 바꿔줘야 해. 
<Sync Start=2478584><P Class=KRCC>
그러면 거기에 맞게끔 식을 구성하면 
<Sync Start=2480847><P Class=KRCC>
a가 2부터 시작하려면 0+2의 형태로 가야 합니다. 
<Sync Start=2486095><P Class=KRCC>
그래야 이 숫자가 커지면 0+3, 0+4, 0+5, 이렇게 갈 거 아니에요. 
<Sync Start=2490556><P Class=KRCC>
그러니까 이 친구는 a'+2가 되겠구나. 그럼, a'은 0부터 넣어도 상관없다고요. 
<Sync Start=2499088><P Class=KRCC>
여기가 커지는 게 아니라 이쪽이 커지겠네, a' 미지수니까. 
<Sync Start=2502460><P Class=KRCC>
돼요? 여기 있는 거는 3부터래요. 
<Sync Start=2505956><P Class=KRCC>
그러면 b'+3을 하면 얘를 0부터로 딱 정의해버리면 
<Sync Start=2510656><P Class=KRCC>
3, 4, 5, 6, 7, 8, 이렇게 커지겠네. 얘도 c'+4가 되겠죠. 
<Sync Start=2517232><P Class=KRCC>
따라서 a', b', c'은 5에다가 9가 될 거니까 6이 될 거고,
<Sync Start=2524115><P Class=KRCC>
따라서 얘는 3H6으로 하면 끝납니다. 맞아요?
<Sync Start=2528951><P Class=KRCC>
그래서 얘는 8C2가 될 거고요. 28이라는 값이 나오겠네요. 괜찮아요?
<Sync Start=2539061><P Class=KRCC>
이해되고 있죠, 지금? 음아정으로 만들어 가야 한다,
<Sync Start=2542569><P Class=KRCC>
그게 기본 중복조합의 세팅이니까. 
<Sync Start=2545950><P Class=KRCC>
그래서 음수로 나오는 것도 마찬가지입니다, 이런 거.
<Sync Start=2549672><P Class=KRCC>
그래서 오늘 제가 문제 준비한 게 BOGO 문제가 음수로 되어 있는 거예요. 
<Sync Start=2554916><P Class=KRCC>
그래서 그거를 같이 이따가 풀 겁니다. 
<Sync Start=2557468><P Class=KRCC>
4번, 함수의 개수는 이것 때문에 제가 개념을 그냥 간단하게 넘어간 거고,
<Sync Start=2561723><P Class=KRCC>
시간도 좀 그렇고요. 
<Sync Start=2563500><P Class=KRCC>
두 집합 X가 1, 2, 3, 4, 5이고, 그다음에 Y가 1, 2, 3, 4, 5, 6에 대하여 
<Sync Start=2567117><P Class=KRCC>
다음 조건을 만족시키는 X에서 Y로의 함수 f의 개수를 구하여라.
<Sync Start=2570701><P Class=KRCC>
이거 보자마자 뭐라고 해야 해요? 얘 중복조합이다. 
<Sync Start=2573616><P Class=KRCC>

<Sync Start=2577356><P Class=KRCC>
왜요? 여기서 설명하면 X가 여기 m개가 있고요. 
<Sync Start=2582774><P Class=KRCC>
여기가 Y인데 여기에 m개가 있다고 한번 해볼게요. 
<Sync Start=2586358><P Class=KRCC>
예시를 들어보면 여기가 4개가 있고, 여기 있는 거를 2개라고 한번 해보자. 
<Sync Start=2592783><P Class=KRCC>
2개 너무 적죠? 3개 좋아요. 여기 있는 게 a, b, c야. 아니, 숫자로 1, 2, 3. 
<Sync Start=2601831><P Class=KRCC>
그리고 여기 있는 거는 1, 2, 3, 4, 이렇게 합시다. 
<Sync Start=2608108><P Class=KRCC>
그러면 결국은 이 조건을 만족한다는 건 이런 거거든요. 
<Sync Start=2613368><P Class=KRCC>
1이라는 게 1로 가요. 그러면 2라고 하는 거는 1, 2, 3 중의 하나로 가야 해. 
<Sync Start=2618050><P Class=KRCC>
1이 만약에 3으로 가요. 그러면 2라고 하는 거는 무조건 3으로 가야 해요.
<Sync Start=2622418><P Class=KRCC>
3도 무조건 3. 4도 무조건 3이야. 
<Sync Start=2626643><P Class=KRCC>
그러니까 결국은 중복해서 뽑혀도 된다는 얘기거든요. 그 말은 이런 거지. 
<Sync Start=2631286><P Class=KRCC>
서로 다른 3개 중에 중복을 허용해 몇 개를 뽑는다? 4개를 뽑는다.
<Sync Start=2636230><P Class=KRCC>

<Sync Start=2638102><P Class=KRCC>
그러면 예시를 들어볼까요? 1, 1, 1, 1, 나왔어요. 그럼, 얘가 1, 1, 1, 1이야. 
<Sync Start=2644454><P Class=KRCC>
1, 3, 3, 3이야. 그럼, 1은 1에 대한 함숫값, 3은 2에 대한 거, 나머지도 다 3. 
<Sync Start=2651890><P Class=KRCC>
또요. 2, 2, 4, 4. 아니, 4는 없네. 3, 3. 
<Sync Start=2657168><P Class=KRCC>
2라고 하는 거는 여기, 2는 여기, 3은 여기, 여기 3. 맞죠? 
<Sync Start=2662203><P Class=KRCC>
그러니까 결국 3H4라고 하는 건 여기에 오는 거는 공역. 
<Sync Start=2665586><P Class=KRCC>

<Sync Start=2668520><P Class=KRCC>
됐나요? 여기 오는 건 뭐다? 정의역이다. 
<Sync Start=2671234><P Class=KRCC>

<Sync Start=2674153><P Class=KRCC>
됐죠? 어쨌든 기본값은 이렇게 생각하고 문제를 보니까 
<Sync Start=2677916><P Class=KRCC>
(나) f(x)가 함숫값을 모아놓은 집합이래요. 그러면 이걸 뭐라고 해요, 우리? 
<Sync Start=2683883><P Class=KRCC>
치역이라고 하는구나. 우리 했었죠? 치역의 원소의 최솟값은 2라고 합니다. 
<Sync Start=2691115><P Class=KRCC>
그러면 여기가 원래 Y라고 하는 게 1, 2, 3, 4, 5, 6이었잖아요. 
<Sync Start=2697315><P Class=KRCC>
그러면 1은 가면 돼, 안 돼? 안 된다는 얘기야. 맞아요? 
<Sync Start=2701895><P Class=KRCC>
그럼, 이 중에서 선택이 돼야 하겠죠? 
<Sync Start=2704552><P Class=KRCC>
근데 2라고 하는 게 무조건 들어가 있다는 얘기입니다,
<Sync Start=2707048><P Class=KRCC>
원소의 최솟값은 2라고 했기 때문에. 그럼, 얘는 필수야. 
<Sync Start=2711653><P Class=KRCC>
얘는 1개 이상이 나와야 한다는 얘기죠. 그러면 식 구성을 해볼까? 
<Sync Start=2717996><P Class=KRCC>
여기 위에부터 2가 선택받는 거는 a개, 3이 선택받는 거는 b개, 
<Sync Start=2722632><P Class=KRCC>
4가 c개, 5가 d개, 6이 e개라고 한번 해보자고요. 
<Sync Start=2727215><P Class=KRCC>
그러면 a라고 하는 거는 1 이상이고, b나 c나 d나 e라고 하는 거는 0 이상이라고요. 
<Sync Start=2735563><P Class=KRCC>
0이어도 돼요. 왜? 여기에서 특별한 문제 조건을 준 거 아니잖아요. 
<Sync Start=2739772><P Class=KRCC>
그냥 치역의 원소의 최솟값이 2라고 했기 때문에 
<Sync Start=2743527><P Class=KRCC>
그냥 2는 무조건 하나 있어, 이런 얘기입니다. 돼요? 자유롭게.
<Sync Start=2748761><P Class=KRCC>
결국 이거는 a+b+c+d+e가 몇 개에서 와요, 원소가? 5개에서 와요. 
<Sync Start=2756824><P Class=KRCC>

<Sync Start=2758919><P Class=KRCC>
근데 이 친구를 음아정으로 만들어야 하겠죠. 그러니까 얘는 a'으로 바꾸고요. 
<Sync Start=2763600><P Class=KRCC>
a를 a'+1로 만들 거니까 여기 1을 이양시켜서 4로 가면 되겠네요. 
<Sync Start=2769287><P Class=KRCC>
따라서 얘는 얼마야? 5H4가 될 거고, 얘는 8C4가 될 겁니다. 
<Sync Start=2774728><P Class=KRCC>
4, 3, 2, 1, 8, 7, 6, 5 하게 되면 70가지가 나오겠네요. 정답은 5번. 됐나요?
<Sync Start=2787043><P Class=KRCC>
그러니까 결국은 함수도 음아정이다, 함수의 개수도. 중복조합. 
<Sync Start=2792905><P Class=KRCC>
마지막 BOGO 문제까지 풀어야 할 것 같아요. 
<Sync Start=2795553><P Class=KRCC>
다음 조건을 만족시키는 정수 a, b, c의 모든 순서쌍의 개수를 구하라고 했습니다. 
<Sync Start=2800402><P Class=KRCC>
음수예요, 음수. 전혀 걱정할 필요가 없습니다. 뭐로 세팅해라? 음아정으로. 
<Sync Start=2805448><P Class=KRCC>
a라고 하는 게 -1이면 내가 시작점을 -1이 되게끔 하는 0+α로 구성하면 돼요. 
<Sync Start=2811401><P Class=KRCC>
그럼, a'을 0이라고 한다면, 
<Sync Start=2813311><P Class=KRCC>
그렇지. a'-1을 하면 a라고 하는 거는 여기가 0부터 출발하면 -1, 
<Sync Start=2818689><P Class=KRCC>
그다음 1이 되면 0, 그다음 2가 되면 1, 이렇게 갈 거야. 맞아요?
<Sync Start=2823233><P Class=KRCC>
얘는, b도 마찬가지예요. b'-1, c도 마찬가지로 c'-1. 
<Sync Start=2828829><P Class=KRCC>
그럼, 3개를 다 더하면 a'+b'+c'은, 이거 3개 다 더하면 얼마예요? -3이죠. 
<Sync Start=2836607><P Class=KRCC>
넘어가요. 넘어가? 6이야. 근데 a', b', c'은 다 뭐다? 시작점 0부터다. 
<Sync Start=2844744><P Class=KRCC>
음아정의 세팅이다. 그래서 얘는 3H6으로 가면 됩니다. 
<Sync Start=2849028><P Class=KRCC>

<Sync Start=2850970><P Class=KRCC>
됐죠? 그럼, 얘는 8C2가 될 거고요. 28의 값을 가질 겁니다. 
<Sync Start=2857851><P Class=KRCC>
그러니까 제가 이걸 가져온 이유는 뭐냐면 
<Sync Start=2860413><P Class=KRCC>
여러분들이 방정식의 해를 구성할 때 음아정, 자연수의 해 두 가지만 기억하거든요. 
<Sync Start=2866563><P Class=KRCC>
근데 자연수의 해를 이용한 문제들은 그냥 가장 대표 유형일 뿐이지 
<Sync Start=2871427><P Class=KRCC>
제일 중요한 건 음아정입니다. 그러니까 결국 식 구성을 뭐로 하는 게 중요한 거야? 
<Sync Start=2875799><P Class=KRCC>
음아정의 형태로 바꿔버리는 게 중요한 겁니다. 이거 정말 중요한 포인트예요. 
<Sync Start=2880319><P Class=KRCC>
그래서 중복조합 문제들을 보게 되면 대부분 0부터 시작하는 형태로 고치고,
<Sync Start=2884949><P Class=KRCC>
그다음 기본 중복조합 계산식으로 들어가면 어렵지 않게 결괏값이 나올 겁니다. 
<Sync Start=2889273><P Class=KRCC>
그래서 오늘 한 내용들은
<Sync Start=2890787><P Class=KRCC>
상당히 시험에도 출제가 많이 되는 영역이니까 복습 꼭 하시고요. 
<Sync Start=2894742><P Class=KRCC>
다음 시간에 저는 이항정리 파트로 돌아올 거고요. 
<Sync Start=2898399><P Class=KRCC>
오늘 배웠던 것들은 복습 철저히 하시고 뒤에 퀴즈도 나가니까요. 
<Sync Start=2901674><P Class=KRCC>
풀어서 수강 후기에 올려주시면 될 것 같습니다. 
<Sync Start=2904097><P Class=KRCC>
다음 시간에 더 알찬 내용으로 여러분들 찾아뵐게요. 
</BODY>
</SAMI>