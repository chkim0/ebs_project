<SAMI>
<HEAD>
<TITLE>(주)기록법인상생 자막 2015</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=10393><P Class=KRCC>
안녕하세요. 오늘 준비한 사진은 우리 강의 안내 설명 중에 하나야. 우리 수업 끝날 때 그때그때 나오는 그림이 조금씩 다르잖아.
<SYNC Start=20596><P Class=KRCC>
그래서 어떤 날에는 꿈을 전달하는 꿈틀이의 2일 던던. 이런 게 나올 때가 있을 거야. 그래서 우리 같이 약속하는 건데 나는 이렇게 계획 잔뜩 세워 놓고 못 지키면 되게 우울하단 말이야.
<SYNC Start=33699><P Class=KRCC>
그리고 '역시 나는 오늘도 쓸모 없었어.' 막 이러면서 자존감이 되게 낮아진다? 근데 내가 책을 읽다가 발견하게 된 게 그렇게 해야 되는 일을 적는 투두 리스트가 아니라
<SYNC Start=43996><P Class=KRCC>
이런 내가 끝낸 일을 적는 던던리스트를 적으면 자존감이 높아진다는 거야. 그리고 거기에 적기 위해서 뭐 하나라도 더 하게 되고 작은 일도 되게 소중하게 기특한 것처럼 느껴지고.
<SYNC Start=56492><P Class=KRCC>
그래서 내가 던던 리스트를 너희하고도 같이 쓰기 시작했는데 이렇게 나는 보통 너희들한테 세 가지를 보여 줄 거야.
<SYNC Start=63931><P Class=KRCC>
근데 우리 꼭 같이 약속하는 건 그 세 가지 중에 수학에 대한 얘기는 적어도 한 개 이상은 꼭 넣자. 그날의 수업 내용에 대해서. 그래서 우리 저번에 지수에 확장하면서 했던 내용이지?
<SYNC Start=74560><P Class=KRCC>
지수가 0이면 무조건 1, 음수 지수는 역수, 분수 지수는 루트. 그리고 나 오늘 첫 촬영이라 그랬잖아. 그래서 나 오늘 촬영 끝나고 저녁에 진짜 맛있는 거 먹을 거거든.
<SYNC Start=85030><P Class=KRCC>
그래서 너희들도 나하고 오늘 만나는 첫날이었으니까 긴장했을 거 아니야. 그래서 너희들도 꼭 공부하고 끝나고 맛있는 거 먹기다.
<SYNC Start=93234><P Class=KRCC>
그래서 이런 던던이 나올 때가 있고 다음 사진으로는 이렇게 작심 1일, 작심 3일 이런 퀴즈가 나올 때가 있을 거야.
<SYNC Start=101044><P Class=KRCC>
근데 내가 너희들한테 준비해 주는 이 퀴즈가 또 다른 연계 교재에 나왔던 문제들이야. 그래서 꼭 잠깐이지만 화면 멈춰 놓고 그날 수업 내용 정리한다고 생각하고 풀어 보고
<SYNC Start=112141><P Class=KRCC>
풀고 나서 정답 나오게 되면 수강 후기 게시판에 ‘선생님, 작심 1일 정답 3인 것 같아요.’ 이렇게 올려 주면 ‘아이고 잘했다. 땡. 다시 풀어 봐.’ 이렇게 내가 하나씩 답 맞춰 줄게.
<SYNC Start=124019><P Class=KRCC>
그래서 저렇게 수업 끝날 때 두 가지 종류의 설명들이 나올 때가 있을 거야. 그래서 이따가 끝날 때에도 뭐가 나오는지 한번 봐 봐.
<SYNC Start=131926><P Class=KRCC>
그리고 우리 오늘은 지난 시간에는 지수 함수라는 내용을 했었고 오늘은 그거에 대한 활용 파트야. 제목이 뭐냐면 지수 함수를 포함한 방정식과 부등식.
<SYNC Start=143969><P Class=KRCC>
첫 번째로 우리 방정식에 대한 얘기부터 좀 해 보자. 방정식. 근데 이게 제목이 길어서 그렇지 되게 너희들이 자연스럽게 풀거든? 예를 들어서 이 2^=x8이었어.
<SYNC Start=156529><P Class=KRCC>
근데 우리 8이라는 거 뭐의 얼마라고 쓸 수 있어? 그렇지. 이거 2의 세 제곱이라고 쓸 수 있지? 그럼 이거 만족하는 x값은 뭐가 되는 거냐면 3이 되는 거지?
<SYNC Start=166726><P Class=KRCC>
그래서 이런 식으로 밑의 형태를 맞춰 줬을 때 지수끼리 비교해 주는 유형의 문제를 우리가 방정식의 형태로 풀게 될 거야. 지금 이 내용 가지고 문자로만 좀 바꿔 볼게. 문자로만.
<SYNC Start=179010><P Class=KRCC>
그래서 a^f(x)라는 애가 있었고 a^g(x)라는 애가 있었어. 근데 이 두 식이 같다 그랬어. 그럼 밑이 같은 두 식이 같다는 얘기는 결국 지수인 f(x)와 g(x)가 같다는 얘기지.
<SYNC Start=193069><P Class=KRCC>
그래서 이렇게 방정식 문제 풀 때는 기준을 하나로 맞춰야 돼. 양쪽을 밑을 똑같이 만들든지 아니면 지수를 똑같이 만들든지.
<SYNC Start=200625><P Class=KRCC>
그리고 두 번째 형태로 a^f(x)라는 애가 자꾸 자꾸 반복되는 형태의 문제들이 있을 거야. 근데 우리 이렇게 반복되게 되면 문제 어떻게 풀지? 복잡한 모양이 계속 계속 나와.
<SYNC Start=213012><P Class=KRCC>
우리 이거 앞에서도 한번 문제 풀 때 해 봤는데 이렇게 복잡한 게 반복되게 되면 더 간단한 문자로 바꿨지? 조금 더 똑똑한 말로 뭐라고 불렀냐면 우리 치환이라는 표현을 썼지?
<SYNC Start=224774><P Class=KRCC>
그래서 그 반복되는 복잡한 애를 다른 문자로 바꿀 거야. 그래서 치환을 할 건데 대신에 조심할 거, 우리가 알고 있는 지수 함수는 기본형에 대해서 x축 기준으로 증가할 때도 동동 떠 있고
<SYNC Start=238289><P Class=KRCC>
감소할 때도 동동 떠 있어. 즉 x축 밑으로 못 내려와. 그러니까 지수 함수 그 특정한 값 자체를 치환하게 되면 그 t의 값은 반드시 0보다 커야 돼. 이거 너무너무 중요해.
<SYNC Start=249807><P Class=KRCC>
그래서 애들이 치환만 하는데 우리 이렇게 치환할 때 만약에 범위가 주어져 있다면 그때는 범위까지 같이 움직여야 된다. 얘가 방정식에 대한 얘기였고 이번에는 부등식이야.
<SYNC Start=262772><P Class=KRCC>
그래서 우리 부등식도 예로 좀 들어보자면 아까 2^x이었지? 2^x이 2³보다 작다는데 그럼 이거 만족하는 x값의 범위는 3보다 작아지면 되겠지. 그래서 이런 형태의 문제들을 풀게 될 거야.
<SYNC Start=278014><P Class=KRCC>
그래서 수식으로 바꿔 보면 a^f(x)가 있었고 그리고 a^g(x)가 있었어. 부등식을 풀 거야. 근데 얘를 가지고 정리할 때 중요한 게 밑이 같다 그래서 무조건 그대로 떨어지는 거 아니지?
<SYNC Start=292763><P Class=KRCC>
2가 커? 3이 커? 그렇지. 3이 더 크다. 이렇게. 그럼 2²이 클까? 2³이 클까? 이때는 2³으로 부등호가 그대로 유지돼. 근데 (2분의1)²이 클까? (2분의1)³이 클까? 이때는 부동호가 뒤집히지.
<SYNC Start=312479><P Class=KRCC>
그래서 밑의 사이즈에 따라서 밑의 범위에 따라서 그 부등호가 그대로 유지되기도 하고 그 부등호가 뒤집히기도 해. 그래서 부등식 문제 풀 때는 방정식보다 조금 더 긴장하고 풀어야 돼.
<SYNC Start=324597><P Class=KRCC>
그래서 밑의 사이즈를 좀 봐야 되는데 밑의 범위에 따라서 만약에 a라는 값이 1보다 컸어. 즉 증가 상태야. 그럼 x가 커질 때 y값이 같이 커지지?
<SYNC Start=335397><P Class=KRCC>
그러니까 저 지수가 떨어질 때 이렇게 부등호가 그대로 유지되는 거야. 근데 반대로 만약에 밑의 범위가 0보다는 크고 1보다는 작았어.
<SYNC Start=346115><P Class=KRCC>
그렇게 식이 바뀐다면 이때는 x가 커질 때 y값은 반대로 작아지지. 그러니까 부등호 방향이 어떻게 돼야 돼? 반대로 뒤집혀야 돼.
<SYNC Start=356804><P Class=KRCC>
그래서 밑이 1보다 클 때는 식이 그대로 유지가 되고 밑이 1보다 작을 때에는 감소하기 때문에 부등호가 반대 방향으로 바뀌는 거야.
<SYNC Start=366652><P Class=KRCC>
그래서 부등식일 때는 특히나 저 범위 자체를 조심해야 된다. 그래서 어떤 유형의 문제들이 나오냐면 이 21번이야.
<SYNC Start=375871><P Class=KRCC>
그래서 얘도 내가 완전 기본형 말고 조금 더 너희들이 고민해 봐야 되는 걸로 가지고 왔거든? 모든 실수 x에 대해서 저 부등식이 항상 성립했으면 좋겠대.
<SYNC Start=386463><P Class=KRCC>
근데 식을 좀 봤더니 식이 이렇게나 복잡하게 생겼어. 근데 뭔가 자꾸 자꾸 반복되고 있지? 이 식 안에서 누가 자꾸 나와? 그렇지 2^x. 우리 이렇게 뭔가가 반복될 때는 뭐 하기로 했어?
<SYNC Start=400664><P Class=KRCC>
다른 문자로 치환하기로 했지. 더 간단한 문자. 그럼 2^x은 증가하는 애이고 결국 t라는 애는 0보다 크겠다. 그럼 이제 이것 활용해서 저 식을 다시 한 번 바꿔 보자.
<SYNC Start=412823><P Class=KRCC>
얘를 쓰면 (t+2)²+t+a. 그래서 내가 원하는 건 얘가 항상 모든 실수에 대해서 0보다 컸으면 좋겠대. 그럼 이거 만족하기 위해서 이 부등식을 좀 정리를 해볼 텐데
<SYNC Start=428799><P Class=KRCC>
완전제곱식 풀어 주면 t². +4t, +t. 그러니까 +5t. +4, +a. 그래서 a+4였어. 근데 내가 원하는 거 이 이차 함수가 0보다 컸으면 좋겠다.
<SYNC Start=444843><P Class=KRCC>
근데 이 이차 함수 우리 그림 그려서 한번 고민을 좀 해 보자. 이 상태로는 인수분해 안 되니까 그림 바로 못 그리지? 이렇게 인수분해가 안 될 때에는 완전제곱식 형태로 식 변형시켜야 되지?
<SYNC Start=457621><P Class=KRCC>
그럼 t²+5t였어. 이만큼만 가지고 그림 보자면 {t+(2분의5)}² 나오는 거지? 우리 완전제곱식 바꿀 때에는 1차 항 앞에 있는 계수의 절반으로 만드는 거지?
<SYNC Start=472117><P Class=KRCC>
그래서 이 문제 같은 경우는 원래대로라면 이거 쓰고 막 여기서 뭐 빼고 해야 돼. 근데 지금 내가 원하는 건 그래프의 개형이잖아. 그러니까 굳이 뒷부분까지 정확하게 계산할 필요 없지.
<SYNC Start=484500><P Class=KRCC>
그럼 내가 가지고 있는 식의 형태 봐 봐. 내가 갖고 있는 그 식의 형태가 꼭짓점의 좌표가 -(2분의5)야. 그림 한번 그려 보자. 최고차항의 부호가 양수니까 웃는 모양인 아래로 블록이야.
<SYNC Start=497209><P Class=KRCC>
그리고 그 꼭짓점이 되는 그 x 좌표가 -(2분의5)였어. 여기까지 이해돼? 근데 이 전 범위에서 0보다 큰 거 아니야. 얘를 가지고 치환했을 때 t가 지금 어떤 범위 가지고 있어?
<SYNC Start=510879><P Class=KRCC>
그렇지. 0보다 커야 돼, t라는 값 그 자체가. 그럼 여기가 -(2분의5)이다. 그럼 0은 어디 있어? 더 오른쪽에 있겠지. 그래서 0이라는 값을 기점으로 해서 그걸 기점으로 한 게 0보다 커야 돼.
<SYNC Start=524226><P Class=KRCC>
근데 내가 가지고 있는 그 점의 좌표가 애초에 0보다 큰 거잖아, t라는 애가. 그럼 굳이 0에서의 함숫값이 0보다 큰 게 아니라 0 이상이면 내가 가지고 있는 범위에서는 0이 없기 때문에
<SYNC Start=537625><P Class=KRCC>
0보다 크다는 범위를 만족하는 거지. 즉 0에서의 함수 값 자체가 0 이상이 돼 주면 되겠다. 이제 그 식 가지고 한번 대입해 보자. 우리 방금 전에 봤던 이 함수 있었지? 맨 처음에 주어진 거.
<SYNC Start=551031><P Class=KRCC>
얘를 가지고 f(t)라고 한번 정의를 해 볼게. 그럼 지금 내가 원하는 건 0에서의 함수값 그 자체가 0 이상이 돼 주면 되지? 그래서 t 자리에 지금 문자 t니까 t 자리에 0 대입했어.
<SYNC Start=565651><P Class=KRCC>
그러면 4+a 남았네. 얘가 지금 0보다 크거나 같았으면 좋겠어. 따라서 a라는 a가 -4보다 크거나 같아지면 되지. 그리고 우리 문제에서는 최솟값 구해 달래.
<SYNC Start=579963><P Class=KRCC>
그럼 제일 작은 순간은 -4가 되는 순간이겠다. 그래서 이런 21번 같은 문제 풀 때는 중간 식 정리 잘하는 게 중요해. 그래서 처음에 반복되는 형태가 있어서 t로 치환을 했어.
<SYNC Start=592801><P Class=KRCC>
그랬더니 이차 부등식이 나왔어. 근데 전 범위에서 0보다 큰 거 아니야. 지금 t라는 애로 치환할 때 양수였잖아. 그 범위에서만 0보다 커 주면 돼.
<SYNC Start=602469><P Class=KRCC>
그래서 이차 함수 형태로 식 변형해 주고 그림 안에서 조건 찾아내고. 그래서 그렇게 풀어 준 문제가 이 21번 문제였지. 그리고 이번에는 두 번째 함수인 로그 함수 한번 보자.
<SYNC Start=617253><P Class=KRCC>
이거 풀 때 아무래도 내가 거의 개념을 하나씩 정의 쓰듯이 쓰고 넘어갈 거야. 근데 내가 옛날에 수능 개념 수업할 때는 이렇게 점 찍고 하나씩 증명도 해 주고 그랬거든?
<SYNC Start=630442><P Class=KRCC>
그래서 ‘선생님, 저 그 부분 이해가 잘 안 돼요. 설명이 더 필요해요.’ 하는 사람들은 꼭 이거 찾아가 가지고 다시 한 번 보기다.
<SYNC Start=638485><P Class=KRCC>
그래서 로그 함수의 기본형은 어떻게 생겼냐면 y는 log a의 x. 이렇게 생긴 게 기본형이야. 그리고 마찬가지로 우리 로그에서도 밑 조건, 진수 조건이라는 게 존재했지?
<SYNC Start=650461><P Class=KRCC>
그래서 밑 조건은 a는 양수이면서 1은 아니었어. 그리고 진수 조건으로는 x가 0보다 크다. 이게 진수 조건. 그럼 아직 그래프를 그리지 않았지만 얘로 추측할 수 있는 건
<SYNC Start=663229><P Class=KRCC>
a값의 범위에 따라서 영역이 2개로 쪼개지겠다. 마치 지수 함수처럼. 그리고 두 번째로는 x라는 애가 항상 0보다 크대. 즉 양수인 그림만 나와.
<SYNC Start=673707><P Class=KRCC>
그래서 x축, y축을 기준으로 그림이 오른쪽에만 그려지겠지? 왜냐하면 이거 정의역 자체가 0보다 큰 거니까. 그래서 로그 함수도 지수 함수하고 마찬가지로 밑의 범위에 따라서 그림이 달라져.
<SYNC Start=686958><P Class=KRCC>
그리고 항상 지나는 점이 하나 있는데 x가 1이 되면 밑에 상관없이 로그 값은 0이 되지? 그래서 항상 (1, 0)을 이렇게 지난다.
<SYNC Start=696318><P Class=KRCC>
그래서 첫 번째로 밑의 범위가 1보다 크다면 그때는 이렇게 증가하는 그래프. 밑이 1보다 클 때는 증가하는 그림이 나오고.
<SYNC Start=705597><P Class=KRCC>
반대로 밑이 1보다 작아. 그럴 때에는 이렇게 점점점 작아지는 그림의 형태가 등장을 하지. 점점점점 커지는, x가 클 때 y가 같이 증가하는 애를 우리가 증가한다는 표현을 쓰고
<SYNC Start=720181><P Class=KRCC>
x가 커질 때 y값은 작아져. 우리 그런 애들을 감소한다는 표현을 썼던 거지. 그래서 로그 함수에 대해서 우리 특징을 좀 정리해 보면 첫 번째로는 항상 지나는 점이 하나 있어. 몇 콤마 몇이야?
<SYNC Start=735958><P Class=KRCC>
그렇지. (1, 0). 근데 우리 이거 지수 함수에서도 비슷한 거 봤다. 걔는 몇이었어? 반대로? 그렇지. (0, 1)이었지. 그래서 지수 함수하고 로그 함수는 비슷하면서도 다른 성질들이 되게 많아.
<SYNC Start=748286><P Class=KRCC>
그래서 항상 (1, 0)을 지나고 그리고 두 번째로 우리 함수에서 가장 중요한 건 모양이라 그랬어. 그리고 그 모양을 결정해 주는 건 밑에 대한 범위인 거지.
<SYNC Start=759042><P Class=KRCC>
그래서 자꾸자꾸 커지는 증가가 있고 자꾸 자꾸 작아지는 감소가 있는데 그 증가와 감소를 결정해 주는 건 밑의 사이즈.
<SYNC Start=767903><P Class=KRCC>
그래서 밑이 1보다 크다면 그때는 증가, 밑이 1보다 작다면 그때는 감소였어. 그리고 세 번째로 우리 이거 지수 함수에서도 한 번 봤는데 그림 한 번 다시 보자.
<SYNC Start=780306><P Class=KRCC>
나 지금 이 로그 함수가 점점점점 가까워지지만 y축에 닿아, 안 닿아? 안 닿지. 왜냐하면 0이 될 수는 없잖아. 우리 그렇게 점점점 가까워지지만 닿지는 않는 선. 뭐라고 불렀어? 세 글자.
<SYNC Start=793132><P Class=KRCC>
점근선이라고 불렀지. 그래서 로그 함수도 마찬가지로 점근선이 존재하고 그 점근선은 지수 함수랑 반대로 y축이야. 그래서 y축의 다른 표현은 x=0이었지. 얘는 기본형에 대한 얘기.
<SYNC Start=807098><P Class=KRCC>
근데 우리 지수 함수에서 이렇게 기본형만 한 거 아니지? 이 상태에서 그다음에 뭐 했어? 움직움직했어. 그래서 평행 이동하고 대칭 이동 하나씩 보여 줬었잖아.
<SYNC Start=818402><P Class=KRCC>
여기서도 마찬가지로 로그 함수 좀 움직여 보자. 그래서 y는 log a의 x라는 기본형이 있었는데 그 기본형을 가지고 x축으로 m만큼 y축으로 n만큼 평행 이동을 시킬 거야.
<SYNC Start=830998><P Class=KRCC>
그러면 부호가 반대로 들어가니까 y-m은 log a에다가 x-n으로 혼자 바뀌었지? m하고 n만 좀 다시 해 보자. x축으로가 m만큼이고 y축으로가 n만큼이었어.
<SYNC Start=848128><P Class=KRCC>
그래서 y축으로 n만큼이었으니까 -n, x축으로 m만큼이었으니까 -m 이거인 거지. 그래서 지수 함수에서 했던 형태처럼 부호가 이렇게 반대로 들어간다.
<SYNC Start=860612><P Class=KRCC>
그럼 좀 더 예쁘게 써 보면 결국 y라는 애는 log a의 (x-m)+n으로 정의될 수 있었어. 그래서 기본형하고 평행 이동되어 있는 애야. 그럼 이제 그림이 어떻게 달라지는지를 한번 생각을 해 보자.
<SYNC Start=875330><P Class=KRCC>
우리 로그 함수가 하나 있었는데 증가하는 로그 함수 생각할게. 이렇게 점점점 커지는 애가 하나 있었어. 근데 얘를 가지고 지수 함수 같은 경우에는 위아래로 움직이게 되면 점근선이 달라졌다?
<SYNC Start=888768><P Class=KRCC>
왜냐하면 x축 위에 동동 떠 있었으니까. 근데 이 그래프는 내가 위아래로 아무리 움직여 봐야 점근선에 변화가 없어. 반대로 내가 얘를 가지고 좌우로 흔들었어. 이렇게.
<SYNC Start=901040><P Class=KRCC>
즉 x축으로 평행 이동시키게 되면 오른쪽으로 당기는 만큼 점근선 따라오고 왼쪽으로 미는 만큼 점근선 따라가지? 그래서 이 로그 함수에서의 점근선을 결정해 주는 요소는 이번에는 x인 거야.
<SYNC Start=914441><P Class=KRCC>
그래서 원래 기본형은 x=0이었어, 점근선이. 근데 평행 이동시키는 만큼, m만큼 평행 이동시켰으니까 점근선이 뭘로 바뀌어? x=m으로 바뀌어야 되지.
<SYNC Start=926593><P Class=KRCC>
그래서 지수 함수하고 로그 함수에서 이렇게 점근선의 움직임이 달라져. 그래서 똑같은 평행 이동이더라도 각각의 함수에 따라서 중요한 지점이 다르다.
<SYNC Start=937605><P Class=KRCC>
그래서 움직움직에 대한 내용이었고 평행이동이었어. 그럼 이번엔 우리 대칭 이동 한번 생각을 좀 해 보자. 그래서 이번에는 y는 log a의 x를 가지고 대칭 이동을 한번 해 볼 거야.
<SYNC Start=950292><P Class=KRCC>
근데 내가 지수 함수에서는 y축 대칭 보여 줬었지? 여기서는 뭐 할 거냐면 y=x 대칭 한번 생각을 좀 해 볼게. y=x. y=x 대칭 시키게 되면 x, y 바꾸는 거지?
<SYNC Start=963525><P Class=KRCC>
즉 x는 log a의 y가 되지? 이거 좀 더 예쁘게 쓰자. 한 번 밑은 영원한 밑이었어. 그럼 얘를 다시 쓰면 a^x이 뭐가 되는 거야? y. 처음하고 끝만 좀 볼게.
<SYNC Start=977779><P Class=KRCC>
y는 log a의 x를 가지고 y=x 대칭시켰어. 그랬더니 y=a^x 됐어. 로그 함수를 가지고 y=x 대칭시켰더니 지수 함수로 바뀌었어. y=x 대칭이라는 거 무슨 뜻도 가지고 있었어?
<SYNC Start=993981><P Class=KRCC>
그렇지. 역함수를 구하는 방법 중에 하나였지. 그래서 밑이 같은 지수 함수하고 로그 함수는 둘이 역함수 관계야. 너무너무 중요해. 그래서 우리가 앞에서 봤던 특징들이 반대였던 거야.
<SYNC Start=1005348><P Class=KRCC>
y=x 대칭이고 역함수 관계였기 때문에. 그래서 만약에 내가 증가하는 지수 함수를 하나 가지고 왔어. 이렇게 커지는 지수 함수가 있었다?
<SYNC Start=1015764><P Class=KRCC>
그럼 그런 애에 대해서 밑이 같은 로그 함수가 존재했다면 y=x에 대해서 대칭시켰어. 즉 접는다는 얘기지. 그렇게 되면 이렇게 커지는 로그 함수 나오겠지.
<SYNC Start=1027156><P Class=KRCC>
그래서 y=a^x이라는 지수 함수랑 밑이 같은 y는 log a^x이라는 그런 로그 함수는 둘이 역함수 관계이고 즉 y=x에 대해서 대칭인 거야. 그래서 이런 특징을 가지고 있는 게 로그 함수였어.
<SYNC Start=1043766><P Class=KRCC>
그래서 기본형 움직움직한 거 그리고 역함수 관계. 그렇게 3가지 개념이 중요하다. 그럼 이번에는 24번 한번 풀어 보자. 이거 좀 어려웠지? 잘했을까 이 문제?
<SYNC Start=1057822><P Class=KRCC>
지금 f(x)라는 함수를 줬는데 너희들이 처음 보는 함수였을 거야. 아예. 근데 나도 저거 처음 보거든?
<SYNC Start=1064475><P Class=KRCC>
저렇게 처음 보는 함수가 등장을 했을 때에는 규칙성을 너희들이 대입해서 눈으로 직접 보면 된다? 지금 x값의 범위에 따라서 함수 식이 달라지고 있어.
<SYNC Start=1075019><P Class=KRCC>
그리고 뭐 줬냐면 y=n이라는 직선이 하나 존재했지. 특히 무슨 함수야? 상수 함수야. y=n이라는 그런 상수 함수에 대해서, 직선식에 대해서 두 점을 이렇게 부를 거래.
<SYNC Start=1089966><P Class=KRCC>
근데 그랬을 때 얘에 대한 길이 하나 알려 줬고 얘에 대한 길이 하나 알려 줬어. 그리고 너희들한테는 얘를 지금 물어봐.
<SYNC Start=1098024><P Class=KRCC>
그럼 이 둘을 알려 주면서 얘를 물어보니까 내가 이 둘을 구해서 그 둘을 구하는 과정에서 규칙성을 찾아내야 되지? 그래서 일단 이거부터 활용을 해 볼게.
<SYNC Start=1107685><P Class=KRCC>
그럼 나 P₁하고 Q₁ 나왔어. 즉 n이 뭐일 때야? 1일 때이지? 그거 한번 찾아보자. 그럼 n=1일 때야. n=1이라는 얘기는 직선 식의 뭘로 정의가 되냐면 y=1로 정의가 되지?
<SYNC Start=1121599><P Class=KRCC>
근데 내가 원하는 건 이 f(x)하고 직선 식이 만나서 생기는 교점이야. 우리 교점을 구하는 방법은 뭐였어? 두 식을? 그렇지. 연립하는 거지. 그럼 저 식 가지고 와서 연립 한번 해 보자.
<SYNC Start=1134570><P Class=KRCC>
첫 번째로는 log a의 -x였어. 연립한다 그랬어. y=1하고 얘가 1인 순간. 그럼 얘가 1이라는 얘기는 우리 로그 값이 언제 1? 그렇지. 밑하고 진수가 같을 때 1. 그럼 -x가 a가 된다 그랬어.
<SYNC Start=1151899><P Class=KRCC>
그러니까 x는 뭐인 거야? -a인 거지. 근데 함수 식이 얘만 존재하는 게 아니라 log b의 x일 때도 있다?그럼 log b의 x일 때 그때 1이었어. 우리 언제 로그 값이 1이냐면 밑하고 진수가 같을 때.
<SYNC Start=1167282><P Class=KRCC>
그러니까 얘를 만족하는 x값은 b인 거지. 여기까지 이해돼? 근데 우리 문제에서 뭐라 그랬어? 얘가 만나는 그 두 점을 Pn 그리고 Qn이라고 부른다 그랬어.
<SYNC Start=1180812><P Class=KRCC>
그러니까 내가 이 둘을 가지고 이제 길이 한번 찾아보자. 그래서 결국 P₁, Q₁이라는 길이를 찾게 되면 b-(-a)가 되니까 a+b가 되고 그 값을 우리 문제에서 2라고 알려 준 거지.
<SYNC Start=1195823><P Class=KRCC>
이게 첫 번째 단계야. 그래서 이 과정 가지고 같은 방법으로 이제 두 번째 단계 한번 해 보자. 이번에는 P₂하고 Q₂를 알고 있으니까 n=2가 되는 순간.
<SYNC Start=1206442><P Class=KRCC>
그럼 n=2란 얘기는 y=2란 얘기이지? 그럼 마찬가지로 다시 교점 찾기. 우리 교점 찾으려면 두 식을 연립해야 돼. log a의 -x. 이 값이 지금 2였으면 좋겠어.
<SYNC Start=1219542><P Class=KRCC>
얘를 만족하는 거면 -x가, 한 번 밑은 영원한 밑이니까 a². 그럼 얘를 만족하는 x값은 -a²인 거지. 이게 1단계. 근데 함수 식이 얘만 있는 게 아니라 하나 더 있었어.
<SYNC Start=1236194><P Class=KRCC>
log b의 x. 이번엔 log b의 x가 2였으면 좋겠어. 얘를 만족하는 x값은 뭐인 거야? b²인 거지. 그럼 각각에 대한 x값 찾았고 문제에서는 길이 알려 줬잖아.
<SYNC Start=1250692><P Class=KRCC>
그러니까 P₂, Q₂에 대한 그 길이를 찾아야 되는데 b² 빼기 빼기로 바뀌면서 더하기로 바뀌어서 a² +b²이 되고. 그만큼 우리 문제에서 3이라고 알려 줬네.
<SYNC Start=1264411><P Class=KRCC>
그럼 찾아낸 거 두 가지 한번 섞어 보자. a+b=2라는 거 알았어. 그리고 a²+b²=3이라는 거 알았어. 지금 P₁, Q₁이었어. 얘는? P₂, Q₂야. 그럼 이번에는 내 최종 목표는 뭐지?
<SYNC Start=1280850><P Class=KRCC>
그렇지. P₃, Q₃지. 그럼 지금 규칙성대로 보자면, 물론 똑같이 한 번 더 해 봐도 되고 이거 계산했을 때 a³+b³ 나오겠다.
<SYNC Start=1292101><P Class=KRCC>
그럼 이거 계산하기 위해서는 크게 두 가지 식 정리하는 방법이 있었을 거야. 그래서 지금 내가 구한 거 활용해 보면 (a+b)³, -3, 2개 곱한 거, 2개 더한 거 이거를 활용해도 괜찮고.
<SYNC Start=1307276><P Class=KRCC>
아니면 쟤를 인수 분해한 식은 똑같이 생긴 거 하나 묶어 내고 그리고 a²+ab+b² 이거 계산해도 괜찮지? 근데 이걸 쓰든 이걸 쓰든 문제가 좀 생겼어. 지금 뭐가 없어? 응. ab가 없어.
<SYNC Start=1323561><P Class=KRCC>
그러니까 저 2개 식을 섞어서 ab 먼저 찾아야지. 그 단계 한번 해 보자. a+b를 알고 있고 a² +b²을 알고 있어. 얘는 (a+b)² 거기에서 2ab 빼 주면 되는 식이지?
<SYNC Start=1339973><P Class=KRCC>
그럼 a+b라는 거 2였어. 제곱하니까 4-2ab. 근데 이 전체 값이 뭐가 된다 그랬냐면 3 된다는 거 알았어. 그럼 여기에서 ab 값이 뭐가 돼 주면 돼? 2분의1이 나와 주면 되지.
<SYNC Start=1354754><P Class=KRCC>
그래서 ab가 2분의1이라는 게 나온 거야. 너희들이 편한 식에다가 넣어 주면 되는데 나는 여기다가 넣어서 대입을 해 볼게. 그럼 이 과정 통해서 ab의 값 구한 거고 이제 마지막 대입이야.
<SYNC Start=1368161><P Class=KRCC>
그럼 a+b=2였고 그리고 a² +b²=3이었어. 거기에서 ab 뺄 건데 그거 2분의1인 거지. 이렇게. 그래서 6-1이 되니까 정답은 5가 나와 주면 되겠다.
<SYNC Start=1382935><P Class=KRCC>
그래서 이 문제는 곱셈 공식의 변형 식도 알아야 되고 그리고 문제에서 규칙 찾는 과정에서 뭐까지 쓰였어? 그렇지. 교점 구하는 거.
<SYNC Start=1391621><P Class=KRCC>
그래서 그런 단계 단계별로 이해가 돼야지 풀 수 있는 문제가 이 24번 문제였어. 그리고 이번에는 로그 함수를 포함한 방정식, 부등식 한번 보자. 우리 아까는 뭐 봤었어? 그렇지. 지수 함수.
<SYNC Start=1407462><P Class=KRCC>
근데 이번에는 로그 함수. 근데 식에 대한 형태가 문제 푸는 방법이 똑같아. 그래서 첫 번째에는 우리 방정식 먼저 한번 보자. 방정식. 그래서 예를 들어서 어떤 형태가 있냐면 log 2의 x였어.
<SYNC Start=1423514><P Class=KRCC>
얘가 3이래. 저거 만족하는 x값 몇일까? 저거 만족하는 거? 한 번 밑은 영원한 밑이었어. 그러니까 x=2³. 결국 뭐가 돼야 돼? 8. 그래서 이런 식의 식 정리를 해 주는 게 이 방정식 부분이야.
<SYNC Start=1438902><P Class=KRCC>
첫 번째로는 log a의 f(x)라는 애가 있었는데 얘가 b였어. 그럼 이 식을 만족시켜 주는 f(x)를 뭐라고 쓸 수 있냐면 a^b이라고 쓸 수 있지.
<SYNC Start=1452685><P Class=KRCC>
그래서 이렇게 지수 식으로 고쳐서 풀 수 있는 문제의 유형이 있고 아니면 두 번째, log a의 f(x)가 있고 그리고 log a의 g(x)가 있어. 밑이 같은 두 로그의 값이 같다 그랬어.
<SYNC Start=1468305><P Class=KRCC>
그럼 나 이걸 만족하기 위해서는? 그렇지. 진수끼리도 같아야지. 그래서 f(x)랑 g(x)랑 같다. 이렇게 풀어 주는 형태가 있을 거고.
<SYNC Start=1478258><P Class=KRCC>
그리고 우리 아까 전에 지수 함수에서 어떤 형태 또 하나 있었어? 그렇지. 같은 모양이 복잡한 애가 반복되는 형태에 있었지.
<SYNC Start=1486503><P Class=KRCC>
만약에 여기서도 log a의 f(x)라는 애가 있었는데 걔가 자꾸 반복된다. 이렇게 복잡한 모양이 반복될 때는 어떻게 풀어야 돼? 그렇지. 우리 그 문자 치환하기로 했지?
<SYNC Start=1498330><P Class=KRCC>
그래서 그 log a의 f(x)라는 복잡한 모양을 t라는 새로운 문자로 치환을 할 거야. 근데 우리 지수 함수에서는 뭐가 중요했었냐면
<SYNC Start=1508116><P Class=KRCC>
치환하게 되면 그래프가 x축 위에 동동 떠 있었기 때문에 항상 양수였어야 돼. 근데 로그 함수는 어때? 로그 함수는? 증가이든지 감소이든지 간에 실수 전체의 폭을 가지지.
<SYNC Start=1522819><P Class=KRCC>
그래서 얘를 가지고 이렇게 치환을 하더라도 ‘0보다 크다.’ 그런 조건이 없어. 대신에 뭐가 중요하냐면 우리 로그 문제를 풀 때 항상 기억해야 되는 게 있어.
<SYNC Start=1532677><P Class=KRCC>
로그가 정의되기 위한 밑 조건 그리고 진수 조건이야. 그래서 모든 문제를 풀 때 문제에 따로 써 있지 않더라도 밑하고 진수 조건은 너희들이 따로 꼭 체크를 해 봐야 돼.
<SYNC Start=1544651><P Class=KRCC>
그래서 얘가 방정식이었고 우리 두 번째로는 부등식 한번 보자. 그래서 부등식에 대한 형태는 우리 한번 해 봤으니까 식 바로 만들면 log a의 f(x) 그리고 log a의 g(x)라는 애가 있었어.
<SYNC Start=1560527><P Class=KRCC>
우리 식 이렇게 생겼을 때 그냥 뚝 떨어지는 거 아니지? 밑의 범위에 따라서 달라져야 되는데 밑이 1보다 컸어. 그렇다면 f(x)는 g(x)보다 작다. 그대로 모양 유지.
<SYNC Start=1573769><P Class=KRCC>
근데 만약에 밑의 범위가 1보다 작았어. 즉 감소야. 그래서 그럴 때에는 ‘f(x)가 g(x)보다 크다.’로 부등호가 뒤집히겠지. 근데 여기서 끝이 아니라 f(x)하고 g(x)는 진수야.
<SYNC Start=1588015><P Class=KRCC>
그러니까 당연히 0보다 커야 되고 이런 부등호 만족하면서 동시에 0보다 커야 되고. 그래서 로그에서 제일 중요한 건 밑 조건, 진수 조건.
<SYNC Start=1598216><P Class=KRCC>
그래서 다음 시간에는 이 방부등식을 활용해서 밑 조건, 진수 조건을 하나씩 찾아보는 그런 문제를 한번 풀어 보자. 그래서 이게 오늘의 마지막 내용이었어.
<SYNC Start=1610641><P Class=KRCC>
그래서 뭐 했는지 정리 한번 좀 해 보자. 그래서 우리 오늘 첫 번째로는 지수 함수. 그래서 우리 지난 시간에 했던 그 지수 함수의 기본형보다는 어땠어? 좀 더 복잡한 형태를 좀 봤어.
<SYNC Start=1626805><P Class=KRCC>
그래서 함수에서 제일 중요한 거 점근선하고 모양이었지? 그리고 두 번째로는 로그함수. 그래서 로그 함수에서도 밑의 범위에 따라서 모양이 달라졌다.
<SYNC Start=1637213><P Class=KRCC>
그래서 기본형 알아야 되고 움직움직한 거 알아야 되고 밑이 같은 지수 함수하고 로그 함수는 역함수 관계라는 거 알아야 되고.
<SYNC Start=1644911><P Class=KRCC>
그렇게 세 가지 함수에 대한 개념은 꼭 따로 너희들이 정리를 해 놔야 돼. 그래서 오늘도 너무 고생 많았고 우리 다음 시간에는 남은 문제 풀고 새로운 단원인 삼각 함수까지 한번 들어가 보자.
<SYNC Start=1656243><P Class=KRCC>
안녕.
<SYNC Start=1657119><P Class=KRCC>
&nbsp;
</BODY>
</SAMI>