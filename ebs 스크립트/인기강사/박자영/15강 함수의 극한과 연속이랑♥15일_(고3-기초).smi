<SAMI>
<HEAD>
<TITLE>(주)기록법인상생 자막 2015</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=10336><P Class=KRCC>
안녕하세요. 얘들아 나 평소에 이렇게 지하철 타고 다닐 때 그 지하철 문 열리는 곳 있지? 거기에 있는 시 보는 거 좋아하거든? 그래서 오늘은 좀 너희랑 같이 보고 싶은 시 중에 하나를 준비했어.
<SYNC Start=23452><P Class=KRCC>
내가 이렇게 직접 열심히 찍은 거다. 제목이 코이법칙이라는 시였는데 코이라는 비단 잉어는 어항에서 키우면 8cm 밖에 안 자란대.
<SYNC Start=34289><P Class=KRCC>
근데 ‘냇물에 풀어 놓으면 무한정 커진다. 너의 꿈나무처럼.’이라는 그런 시인 거야. 근데 이거랑 비슷한 얘기들 많이 들어봤던 게 그 나무에다가 동물 묶어 놓는 거 있었잖아.
<SYNC Start=46474><P Class=KRCC>
그래서 소 같은 경우는 그렇게 묶어 놓게 되면 한동안 그 주위만 빙빙 돌다가 나중에는 끈이 없더라도 그 넓이를 벗어나지를 못한대.
<SYNC Start=55760><P Class=KRCC>
그것처럼 좀 너희들 스스로 너희를 그 작은 어항 안에 가두지 않았으면 좋겠어. 내가 지난 시간에도 얘기를 한 번 했었는데 나도 되게 이런 생각을 많이 했었거든.
<SYNC Start=66066><P Class=KRCC>
‘그건 너무 어려워. 나한테는 안 돼.’ 그리고 무슨 예뻐 보이는 옷이 있어도 ‘저건 나한테 잘 안 어울릴 것 같아.’라는 그런 마음으로 도전하거나 새로운 시도를 하는 걸 좀 겁내했던 것 같아.
<SYNC Start=79787><P Class=KRCC>
그래서 우리 앞으로는 바닷물에 멀리멀리 무럭무럭 자랄 수 있도록 그렇게 꿈을 좀 널리 바다에서 키워 보자. 그래서 준비한 사진이었어.
<SYNC Start=90151><P Class=KRCC>
그리고 우리 지난 시간에 처음으로 연속이라는 단어를 했고, 우리 오늘은 연속 함수라는 이름부터 한번 시작을 해 볼게. 그래서 우리 지난 시간에 했던 연속부터 단어를 좀 다시 보자.
<SYNC Start=102530><P Class=KRCC>
우리 연속 무슨 뜻? 그래프가? 그렇지. 예쁘게 이어져 있으면 연속. 그래서 그래프가 끊김없이 예쁘게 잘 이어져 있으면 연속이었어.
<SYNC Start=111206><P Class=KRCC>
근데 그래프가 예쁘게 이어져 있다는 그 얘기는 결국 구멍 뚫린 데 없으니까 함숫값 존재하고 왼쪽, 오른쪽이 이어져 있어야 되니까 극한값이 존재해서 그 둘이 같은 순간.
<SYNC Start=124223><P Class=KRCC>
그래서 우리 연속은 ‘좌함우’라 그랬지? 우리가 이거를 연속에 대한 정의라고 얘기했어. 그럼 우리 오늘 하는 저 연속 함수라는 단어는 뭐냐면,
<SYNC Start=134544><P Class=KRCC>
우리가 지난 시간에 봤던 건 x=a라는 한 점에서의 연속성에 대한 얘기였지. 근데 연속 함수는 그 구간 안에 있는 모든 점에서 다 연속인 거. 그걸 우리가 연속 함수라고 부른다.
<SYNC Start=148556><P Class=KRCC>
그래서 연속 함수라는 건 정의된 그 구간에서의 모든 점에서 연속인 것. 그래서 이 모든 점에서 연속이라는 그 표현을 가지고
<SYNC Start=161883><P Class=KRCC>
우리가 그동안 지금까지 배웠던 함수들의 연속성을 좀 확인을 해 보자. 그래서 여기서는 좀 다양한 함수들의 연속성이야. 우리 애들도 그렇지만 ‘함수 너무너무 어려워요.’라고 얘기를 하는데
<SYNC Start=177643><P Class=KRCC>
사실 너희가 배운 함수가 그렇게 종류가 많진 않다? 그래서 가장 기본적인 함수는 뭐였었냐면 일차, 이차, 삼차, 사차라고 부르는 다항함수가 있었지. 다항함수.
<SYNC Start=188926><P Class=KRCC>
근데 이 다음함수 같은 경우에는 최고차의 계수가 a라고 생각하고 그 a가 양수인 케이스에 대해서 생각을 해 볼게. 그럼 일차이면서 a가 0보다 컸어. 즉 기울기가 0보다 큰 케이스.
<SYNC Start=202566><P Class=KRCC>
그래프 이렇게 생겼지. 또 우리가 알고 있는 이차 함수에서 최고차가 0보다 컸어. 나 그래프 이렇게 생겼지. 근데 얘네만 그런 게 아니라 작아지는 것도 그렇고 위아래 뒤집혀진 것도 그렇고
<SYNC Start=215154><P Class=KRCC>
x 값이 결정될 때마다 y 값이 하나씩 결정돼. 그러니까 기본적인 우리가 알고 있는 다항함수들은 그래프가 끊길 일이 없어.
<SYNC Start=223536><P Class=KRCC>
그리고 아직은 안 했지만 삼차 함수랑, 아직은 안 했지만 사차 함수 역시도 그래프가 끊긴 부분 없이 예쁘게 이어져 있다.
<SYNC Start=232090><P Class=KRCC>
그럼 이 다항함수는 어디에서 연속인 거냐면 끊긴 부분이 하나도 없기 때문에 실수 전체에서 연속이지. 그래서 다항 함수는 -∞부터 ∞까지. 즉 실수 전체에서 연속이야.
<SYNC Start=245242><P Class=KRCC>
그러니까 이런 다항함수가 등장을 하게 되면 연속성에 대한 고민하지 말고 ‘다항함수이네? 이거 무조건 연속이지.’라고 생각할 수 있어야 돼.
<SYNC Start=254148><P Class=KRCC>
그리고 두 번째로는 우리 유리함수라는 거 배웠다? 유리함수. 그래서 가장 간단한 형태를 예로 생각해 보자면 y=(x분의1)이라는 함수가 하나 있었어.
<SYNC Start=264985><P Class=KRCC>
그래서 y=(x분의1)이라는 함수는 대칭점이 (0, 0)이었고 이쪽으로 하나, 이쪽으로 하나 이렇게 생겼지. 우리 그래프의 특징 한번 보자. 그림이 그려진 영역에서는 끊긴 부분 없어.
<SYNC Start=278441><P Class=KRCC>
여기도 마찬가지야. 근데 어디에서 지금 그림이 뚝 끊겨져 있냐면 여기에서. 왜냐하면 유리함수 중에서도 우리가 대표적으로 공부했던 건 분수함수이고
<SYNC Start=288829><P Class=KRCC>
우리 분수함수는 분모가 0이 될 수 없었잖아. 그래서 유리함수는 어디에서 연속이냐면 분모가 0인 점만 제외하면 연속이야. 그러니까 정의역 자체에서는 분명히 연속이야.
<SYNC Start=302126><P Class=KRCC>
그리고 그 정의역은 어떻게 정의가 됐었냐면 분모가 0이 아닌 지점으로 정의가 됐었지. 유리함수에 대한 연속성. 그리고 세 번째로는 우리 유리함수하고 대비되는 개념으로 무리함수 배웠다?
<SYNC Start=317648><P Class=KRCC>
그래서 무리함수의 대표적인 가장 간단한 형태는 y=√x. 그래서 y=√x 생각해 보면 저 무리함수는 시작점이 (0, 0)이고 오른쪽 위로 슝 올라가는 그래프.
<SYNC Start=331267><P Class=KRCC>
그럼 내가 그래프를 그린 영역에서는 끊겨져 있는 부분이 없어. 그러니까 무리함수도 어디에서 연속인 거냐면 함수가 정의된 부분에서는 연속이야.
<SYNC Start=341762><P Class=KRCC>
근데 지금 내가 가지고 있는 저 그래프 왼쪽 부분엔 존재하지 않지. 왜냐하면 무리함수니까. 그래서 무리함수의 정의역은 어떻게 구했었냐면
<SYNC Start=351566><P Class=KRCC>
기본적으로 루트 안의 값이 0 이상이 될 수 있는 영역이 정의역이었지. 그래서 유리함수도 정의역에서 연속이고 무리함수도 정의역에서 연속인 거야.
<SYNC Start=360787><P Class=KRCC>
그래서 우리가 배웠던 함수들의 연속성은 기본적으로 알 수 있어야 되고 그리고 마지막으로는 4번이지. 우리 함수에서의 성질 한번 보자. 연속 함수의 성질.
<SYNC Start=372638><P Class=KRCC>
우리가 앞에서 성질이라는 이름으로 배웠던 것들이 있어. 대부분 다 뭘 하기 위한 규칙들이었어? 그렇지. 계산하기 위한 규칙들이었지. 그래서 극한값의 성질 이런 거 배웠었고
<SYNC Start=385762><P Class=KRCC>
우리 극한값은 플러스, 마이너스, 곱하기, 나누기, 실수배까지 전부 다 가능했었지, 분배가. 여기서는 연속에 대한 얘기인데, 연속 함수가 하나가 있었어. 그리고 또 다른 연속 함수가 있었다.
<SYNC Start=399714><P Class=KRCC>
근데 연속인 애들끼리는 더해도 연속 함수야. 근데 더하기만 그런 게 아니라 빼도 연속이고 곱해도 연속이고 나눠도 연속이야.
<SYNC Start=410789><P Class=KRCC>
대신에 나누기 할 때는 누구는 제외시켜야 되냐면 분모 0 되는 점은 제외를 시켜야겠지. 그래서 연속 함수끼리는 아무리 연속을 연산을 하더라도 그대로 연속성이 유지가 돼.
<SYNC Start=423447><P Class=KRCC>
그래서 이 연속 함수에 대한 성질, 그리고 우리가 앞에서 배웠던 기본 함수들의 연속성. 그렇게는 꼭 정의를 기억해야 된다. 그래서 이게 문제에서 어떻게 활용이 되냐면 21번 같은 형태야.
<SYNC Start=438644><P Class=KRCC>
그래서 이제 더이상 함수가 하나 나오는 게 아니고 이렇게 2개의 함수를 주거나 3개의 함수를 주면서 그 함수로 새롭게 만든 또 다른 함수의 연속성을 체크하는 문제가 나와. 얘도 그렇지?
<SYNC Start=451014><P Class=KRCC>
f(x)하고 g(x)의 연속성을 물어보는 게 아니라 그 2개를 더해서 만든 그 새로운 함수가 실수 전체에서 연속이 됐으면 좋겠대.
<SYNC Start=460383><P Class=KRCC>
그래서 얘를 바로 볼 수 있으면 좋고, 만약에 잘 안 되면 우리 이거 새로운 함수인 h(x)라고 한번 불러 보자. 그 h(x)라는 함수가 실수 전체에서 연속인 거야.
<SYNC Start=471882><P Class=KRCC>
근데 우리가 가지고 있는 함수를 봤더니 2라는 값을 기점으로 함수식이 바뀌어. 연속성에 문제가 생긴다면 그래프가 끊기는 지점에서 문제가 생길 거고
<SYNC Start=482451><P Class=KRCC>
그러니까 x=2에서 연속이라는 그 내용을 좀 활용을 해 볼 거야. 그럼 x=2에서 연속이야. 이제 함수의 주인공인 h(x)야.
<SYNC Start=493423><P Class=KRCC>
그럼 h(x)가 x는 2에서 연속이니까 2에서의 함숫값과 2에서의 극한값이 같아야겠지. 이렇게. 그러니까 우리 이 두 값 한번 계산을 해 보자. 첫 번째 함숫값부터. 그래서 2에서의 함숫값이야.
<SYNC Start=509928><P Class=KRCC>
근데 그 h(x)가 f(x)+g(x)였지? 그러니까 f(2)+g(2)가 되겠다. 얘는 함숫값이니까 식에다 대입. f에다가 2 넣을 건데 등호 있는 거 여기 있다.
<SYNC Start=523075><P Class=KRCC>
그러니까 얘는 a+2였던 거고 g에다가 2 넣을 건데 등호 여기 있어. 2 대입하니까 a+4였던 거고 그래서 얘는 2a+6이 됐어. 이게 함숫값이야.
<SYNC Start=536346><P Class=KRCC>
그럼 이제 함숫값 구했고 그다음에 할 일은 극한값 구하기. 그래서 오른쪽에서는 극한값 찾아보자. 내 진짜 목적은 x가 2로 갈 때 h(x)를 구하는 거야. 근데 그 h(x)가 f(x)+g(x)잖아.
<SYNC Start=552828><P Class=KRCC>
그래서 원래대로라면 좌우를 다 구해 보고 ‘그 두 개가 같다.’ 그리고 ‘함숫값과 같다.’ 그거를 쓰는 게 맞아. 근데 얘를 구해 보면 두 개 중에 하나는 분명히 함숫값하고 동일하게 나와.
<SYNC Start=564995><P Class=KRCC>
그게 무슨 얘기냐면 우리 함수식 한번 보자. 내가 2라는 기점으로 2보다 작을 때, 2보다 크거나 같을 때로 함수식이 나눠져 있어. 근데 방금 전에 함숫값 구했지?
<SYNC Start=577913><P Class=KRCC>
근데 그 함숫값 구할 때 등호 있는 부분으로 읽어 냈잖아. 그럼 내가 예를 들어서 2에서의 우극 한을 구한다면 그때 여기다가 2 대입할 거지?
<SYNC Start=588368><P Class=KRCC>
그러니까 2를 대입해서 나온 함숫값과 2에서의 우극한 값이 같게 나오겠지. 아래 식도 봐 봐. 아까 전에 여기서 2 대입해서 함숫값을 구했다? 근데 우리 극한값의 기본 계산도 대입이었잖아.
<SYNC Start=601448><P Class=KRCC>
그럼 2에서의 우극한을 구한다면 그것도 같은 식에다가 2를 넣잖아. 어차피 함숫값과 우극한은 동일하게 나와.
<SYNC Start=609547><P Class=KRCC>
그럼 이왕이면 내가 원하는 미지수를 구하기 위해서는 새로운 식이 나와 줘야 돼. 그러니까 우극한이 아니라 좌극한을 활용을 해야지.
<SYNC Start=618780><P Class=KRCC>
그래서 여기서는 좌극한, 우극한을 둘 다 구하지 말고 좌극한만 구해 보면 되겠다. 우극한 구해 봐야 함숫값하고 동일하게 나온다. 한번 해 봐, 직접. 그럼 이제 얘 가지고 분배할 거야.
<SYNC Start=631860><P Class=KRCC>
그래서 식이 lim x가 2보다 조금 작을 때 f(x), 그리고 x가 2보다 조금 작을 때 g(x)였어. 그럼 이제 2보다 조금 작아. 함수식을, 위에는 함수식 써야 돼. 그러니까 -4가 되지.
<SYNC Start=648203><P Class=KRCC>
똑같이, 이번에는 2보다 조금 작아, g(x). 그러니까 위에 있는 식 써 주면 2 대입해서 10 나왔어. 그러니까 얘는 6, 얘는 극한값.
<SYNC Start=657791><P Class=KRCC>
그러니까 아까 전에 나왔던 함숫값인 2a+6하고 방금 전에 구한 극한값인 6하고 같아야 되고 따라서 만족하는 a 값은 0이 나와 줘야겠다.
<SYNC Start=669957><P Class=KRCC>
그래서 이런 문제 풀 때 이렇게 좌극한만 활용하면 된다는 걸 알면 시간을 훨씬 줄일 수 있어. 그래서 굳이 ‘좌함우’ 세 가지를 다 체크하지 말고 식의 모양을 보고 ‘이거 같게 나오겠다.
<SYNC Start=682693><P Class=KRCC>
어차피 크다랑 등호가 같이 있으니까.’ 그런 거 알고 나서 풀면 조금 더 시간이 단축된다. 그리고 이번에는 22번 한번 보자. 지금 f(x)라는 애가 있었고, 이 문제 잘했어?
<SYNC Start=697088><P Class=KRCC>
이 문제가 조금 더 어려웠을 것 같은데. f(x)라는 함수가 x 값의 범위에 따라서 이렇게 함수식이 달라져. 그리고 내가 원하는 건 f(x), f(-x)가 x=2에서 연속이라는 거야. 방금 전에 했어. 연속.
<SYNC Start=713133><P Class=KRCC>
그리고 f(x)를 주면서 새로운 함수를 만들었어. 그 함수의 연속성을 체크하는 거야. 그럼 x=2에서 연속이라는 얘기는 2에서의 함숫값과 2에서의 극한값을 구했을 때 그 둘이 같단 얘기잖아.
<SYNC Start=728296><P Class=KRCC>
그래서 이제 여기 한번 풀어 보자. 첫 번째로 만만한 함숫값부터. 근데 지금 내가 갖고 있는 함수가 f(x)라는 표현을 쓰긴 했는데 이 함수에 대해서 쓰는 거잖아.
<SYNC Start=744601><P Class=KRCC>
그래서 이 함수 h(x)라고 써 볼게. 그래서 기호 바꿔서 한 번 더 써 줄게. 그래서 x=2에서 연속이기 때문에 h라는 함수의 함숫값과 x는 2에서의 극한값 얘가 같다는 걸 확인해 주면 되는 거야.
<SYNC Start=755456><P Class=KRCC>
그럼 h(2)라는 건 결국 f(2), f(-2)인 거지. 근데 이거 어떻게 풀면 돼? 식에다 그대로 넣으면 된다. 2에서의 함숫값이야. 2 등호 여기 있어. 거기의 함숫값이니까 대입. 그래서 a²-2가 됐어.
<SYNC Start=773660><P Class=KRCC>
그다음은 -2에서의 함숫값이야. -2는 2보다 작잖아. 그러니까 여기다가 대입해야 되지? 그래서 -2 넣어 주면 a-4. 이게 지금 함숫값. 그럼 이번에는 극한값을 좀 구해 봐야 되지?
<SYNC Start=789718><P Class=KRCC>
그래서 우리 극한값에서는 등호 들어가 있는 거 방금 전에 봤으니까 좌극한으로 한번 식 찾아보자. 그래서 lim x가 2로 가는데 2보다 조금 작았어. 그때의 f(x), f(-x)야. 식 조심해서 봐야 돼.
<SYNC Start=806965><P Class=KRCC>
f(x) 먼저, 식 쪼개서 다시 한 번 써 줄게. x가 2로 가는데 2보다 조금 작아. 그거 f(x). 그리고 lim x가 2로 가는데 조금 작고, f(-x)야. 그러면 x가 2로 가는데 2보다 좀 작다 그랬어.
<SYNC Start=823829><P Class=KRCC>
2보다 좀 작을 때는 여기다가 대입해야 되지? 근데 거기다가 뭐 넣는 중이냐면 2 넣는 중. 그러니까 얘는 a+4. 이거 괜찮아? 이제 뒷부분, 이거 계산할 건데 우리 옛날에 한 번 해 봤어.
<SYNC Start=838438><P Class=KRCC>
잘 안 되면 지금 다시 봐야 돼. x가 2보다 조금 작아. 우리 이런 문제를 치환해서 풀 수도 있지만 치환하게 되면 문제 푸는 게 오래 걸려. 그러니까 바로 넣어서 보자 그랬지?
<SYNC Start=850306><P Class=KRCC>
맞는 식은 아니지만. 그래서 2보다 조금 작아. 근데 거기에 마이너스 달려 있다? 그럼 결국 2로 가는데 부호 바뀌니까 -2. 원래 작았는데 부호 바뀌니까 2보다 좀 큰 거지.
<SYNC Start=862906><P Class=KRCC>
그래서 -2로 가는데 그거보다 좀 큰 거야. -2로 가니까 왼쪽인 거지. 근데 거기다가 뭐 넣는 중이냐면 지금 -2. 그럼 -2 대입하니까 a-4가 되겠다.
<SYNC Start=877417><P Class=KRCC>
얘가 지금 좌극한. 근데 우극한 구해 봐야 식 동일하게 나오지. 그래서 함숫값이었던 얘하고 좌극한값인 얘하고 둘이 어떻게 돼야 돼? 같게 나와야 돼. 그거 식 정리 한번 해 보자.
<SYNC Start=892621><P Class=KRCC>
3번, 그래서 결국에는 (a²-2)(a-4)라는 애랑 (a+4)(a-4)라는 애랑 같아야 돼. 근데 우리 문제가 합 구하는 문제야. 그래서 바로 넘어가서 합을 구해 봐도 되고 아니면 식 정리 조금 더 해 볼까?
<SYNC Start=911195><P Class=KRCC>
한쪽으로 넘겼어. (a-4). 부호 바뀌면서 오른쪽에 있던 애들이 다 같이 넘어왔어. 그랬더니 공통 인수 눈에 보이지? 양쪽에 지금 (a-4)라는 애가 공통이야.
<SYNC Start=925706><P Class=KRCC>
그래서 그 (a-4)를 꺼내서 묶어 주면 앞부분 a²-2 남았고 (a-4) 꺼냈으니까 -a-4 남았고 이만큼이 지금 0. 그럼 (a-4)에다가 a²-a-6=0. 이 상태이지?
<SYNC Start=946201><P Class=KRCC>
그래서 인수 분해해서 풀어 봐도 괜찮고 아니면 우리 문제 같은 경우는 합 구해 달라 그랬다. 그래서 나는 그냥 여기에서 합 바로 구했거든? 일단 하나는 눈에 보여.
<SYNC Start=957160><P Class=KRCC>
a-4=0이니까 하나는 4야. 근데 거기다가, 이거 이차방정식인데 실근 존재하지? 그럼 근과 계수의 관계 활용하면 가운데 거에서 부호만 바꿔 준 게 합이지.
<SYNC Start=969582><P Class=KRCC>
그래서 a 값을 구하고 더해도 괜찮고 아니면 여기에서 바로 합 써도 괜찮아. 결국 다 더해 준 건 5가 나오면 되겠다.
<SYNC Start=978662><P Class=KRCC>
그래서 이 마지막 마무리는 방정식에 대한 얘기였고 중요했던 건 앞의 부분. 그래서 f(x)라는 함수를 가지고 두 개를 곱해서 새로운 함수를 만들었어.
<SYNC Start=988239><P Class=KRCC>
그 새로운 함수의 연속성을 체크하는 거니까 함숫값과 극한값이 같아야지. 근데 그거 계산하는 과정 중에서 함숫값 하나 구하고 그리고 부등호가 달라질 수 있는 극한을 하나만 구해 주면
<SYNC Start=1001176><P Class=KRCC>
조금 더 식이 간단해져. 얘가 22번이었고 우리 이번에는 연속 함수에서 등장하는 정리이지? 사잇값 정리 한번 보자. 사잇값 정리는 우리 크게 2가지 형태로 활용이 됐지?
<SYNC Start=1016383><P Class=KRCC>
가장 기본 형태부터 같이 볼게. 기본 사잇값 정리야. 그래서 이 사잇값 정의를 활용하기 위해서는 몇 가지 조건을 만족해야 돼? 그렇지. 2가지 조건.
<SYNC Start=1028275><P Class=KRCC>
첫 번째로는 [a, b]에서 연속이어야 돼. 이거 무슨 뜻이야? 그래프가 끊임없이 잘 이어져 있어야 돼. 그리고 두 번째 조건은 뭐였었냐면 f(a)하고 f(b)가 달랐어야 돼.
<SYNC Start=1043382><P Class=KRCC>
f(a)랑 f(b)가 다르다는 얘기는 뭐가 다르다는 얘기야? 응. 함숫값이 다르다는 얘기야. 그러니까 둘 사이에 공간이 존재한다는 얘기지. 여기까지만 한번 그림 그려 볼게.
<SYNC Start=1054813><P Class=KRCC>
끊김없이 예쁘게 잘 이어져 있어, 그림이 지금. 그리고 a라는 값에서의 함숫값이랑 b라는 점에서의 함숫값이 달라. 그래서 여기가 f(a)였고 여기가 f(b)였어.
<SYNC Start=1069287><P Class=KRCC>
그렇다면 두 값이 예쁘게 잘 이어져 있고 그리고 둘 사이에 이 사이에 간격이 존재하니까 그 둘을 지나는 어떤 지점이 존재하겠지. 그걸 내가 k라고 한번 써 보자.
<SYNC Start=1084207><P Class=KRCC>
그럼 내가 이렇게 두 가지 조건을 만족한다면 c라는 값을 대입했을 때 k인 그런 c가, a하고 b 사이에 적어도 하나 존재한다는 게 사잇값 정리였지.
<SYNC Start=1100486><P Class=KRCC>
그래서 그래프가 잘 이어져 있고 둘 사이에 간격이 존재하기 때문에 그 둘을 통과하는 이런 지점이 존재하고, k가 될 수 있는 그런 c라는 값이 존재해, a하고 b 사이에. 이게 사잇값 정리였어.
<SYNC Start=1114483><P Class=KRCC>
근데 이 사잇값 정리의 기본 정리보다는 실제로 뭐가 훨씬 더 많이 쓰였었냐면 활용이 훨씬 더 문제에서는 많이 쓰였지. 그래서 활용을 잘 봐 놔야 돼.
<SYNC Start=1125707><P Class=KRCC>
우리 첫 번째 거랑 이 활용 식이 어떻게 다른지 보자. 그래서 활용식을 만족하기 위한 첫 번째 조건은 닫힌 구간에서 연속이었어. 여기까진 어때? 사잇값 정리랑? 그렇지. 똑같지.
<SYNC Start=1139418><P Class=KRCC>
그리고 두 번째 조건, 닫힌 구간에서 연속이고 사잇값 정리에서는 둘이 달랐었다? 근데 두 번째 정리에서는 둘을 곱한 게 음수래. 우리 둘을 곱한 게 음수라는 얘기 무슨 뜻이야?
<SYNC Start=1152159><P Class=KRCC>
둘이 그냥 다른 게 아니라 부호까지 다르다는 얘기지. 그래서 얘가 양수이면 얘가 음수, 얘가 음수이면 얘가 양수. 그럼 이 두 가지 조건 가지고 그림 생각해 보면 그래프가 예쁘게 이어져 있어.
<SYNC Start=1165009><P Class=KRCC>
근데 a에서의 함숫값과 b에서의 함숫값이 부호가 달라. 얘가 음수라면 얘가 지금 양수다? 그럼 우리 음수에서 양수로 넘어가기 위해서는 반드시 어디를 통과해야 돼?
<SYNC Start=1177366><P Class=KRCC>
모든 것의 기준이 되는? 그렇지. 0을 통과해야 되지. 이렇게. 그래서 저 두 가지 조건에 만족한다면 값이 0이 됐어. 즉 f(x)=0이라는 방정식이 하나가 있었어.
<SYNC Start=1189604><P Class=KRCC>
그 방정식에 뭐가 존재하는 거냐면 실근이. 왜냐하면 0이 되는 그런 값, 0이 될 수 있는 그런 x 값을 우리가 근이라고 부르잖아.
<SYNC Start=1200028><P Class=KRCC>
그래서 그걸 만족시켜 주는 방정식의 실근이 a하고 b 사이에 적어도 하나 존재한다는 게 우리 사잇값 정리의 활용이야.
<SYNC Start=1210774><P Class=KRCC>
그래서 어디에서 활용이 되냐면 주로 이 활용 파트 문제는 근의 존재성 문제가 나왔을 때 쓰여. 그래서 근이 누군지는 구할 수 없지만 적어도 그 근이 있다는 거,
<SYNC Start=1223827><P Class=KRCC>
그리고 누구하고 누구 사이에 있다는 거 그걸 확인할 때 쓰이는 게 사잇값 정리의 활용이야. 그리고 그렇게 근의 존재성을 확인하기 위해서는 연속이어야 되고 그 양쪽의 부호가 달라져야 돼.
<SYNC Start=1236274><P Class=KRCC>
그래야지만 그들 사이의 0이라는 점을 통과할 수 있으니까. 그래서 사잇값 정리에 대한 내용이었고 이게 문제에서는 이런 식으로 나와. 24번 한번 보자. 지금 f(x)라는 함수가 하나 있었어.
<SYNC Start=1251618><P Class=KRCC>
근데 저게 오직 하나의 실근을 갖는대. 이 문제가 첫 번째 단계가 진짜 중요한 게 일단 하나의 실근을 갖는다 그랬어.
<SYNC Start=1261142><P Class=KRCC>
근의 존재성에 대한 얘기를 하고 있고 이 실근이 열린 구간에 속한다 그랬어. 근의 존재성을 주면서 구간을 줘. 그러니까 뭐가 떠올라야 돼? 사잇값 정리의 활용이 떠올라야 돼.
<SYNC Start=1273846><P Class=KRCC>
근데 사잇값 정리의 활용을 쓰기 위해서는 함수식을 정확하게 알아야 되고 그 들어가는 값까지 알아야 되잖아. 근데 f(x)라는 함수가 지금 2x-1이래. 저거 무슨 함수야? 2x-1? 일차 함수.
<SYNC Start=1288165><P Class=KRCC>
특히 기울기가 몇이야? 2니까 양수이지. 이 직선식이라는 특징을 너희들한테 준 게 너무너무 중요한 조건이야. 우리 이렇게 생긴 직선식은 가로로 선 긋게 되면 교점이 계속 하나 나온다.
<SYNC Start=1302586><P Class=KRCC>
이거 다섯 글자 뭐라고 불러? 일대일 대응이라고 부르지. x 값 하나에 y 값 하나씩만 짝지어지는 거. 그래서 우리가 그걸 가지고 일대일 대응이라고 불렀어.
<SYNC Start=1315458><P Class=KRCC>
만약에 같은 y 값이라면 x 값이 같겠지. 그게 일대일 대응에 대한 정의였지? 그래서 일대일 대응이 안 되는 케이스가 뭐 있었냐면 이차 함수 같은 거.
<SYNC Start=1326083><P Class=KRCC>
우리 이차 함수는 가로선 긋게 되면 교점이 2개에서 생겨. 예를 들어서 y=x²이라는 함수가 하나 있었어. 그때 4라는 점이 될 수 있는 그런 점은 -2도 있지만 2도 있었지.
<SYNC Start=1340420><P Class=KRCC>
그래서 x 값을 생각했을 때 -2하고 2라는 애가 4라는 하나의 y 값에 같이 화살 쏘고 있었어. 그래서 함수인 건 맞지만 일대일은 아니었잖아.
<SYNC Start=1352250><P Class=KRCC>
근데 이 문제는 직선식이기 때문에 일대일 대응이야. x 값 하나에 y 값 하나씩 짝지어져. 그러니까 함숫값이 같잖아? 그 얘기는 알맹이가 같을 수밖에 없어. 잘 생각해 봐.
<SYNC Start=1366468><P Class=KRCC>
얘가 4라 그래서 두 개의 x 값이 같은 건 아니다? 왜냐하면 서로 다른 x가 서로 같은 y한테 몰려갈 수 있거든. 근데 일대일 대응이 되면 x 값 하나에 y 값 하나야.
<SYNC Start=1379191><P Class=KRCC>
이 y 값을 갖는 건 이 x가 유일해. 근데 함숫값이 같대. 이렇게 함숫값이 같으려면 애초에 알맹이가 같을 수밖에 없는 거야.
<SYNC Start=1388760><P Class=KRCC>
그래서 이 일대일 대응이라는 조건 때문에 무슨 일이 생기냐면 둘의 알맹이가 같아지는 일이 생겨. x³과 1-2x가. 그래서 이 식이 나오기까지의 조건들이 중요해.
<SYNC Start=1401711><P Class=KRCC>
우리 이런 거 1학년 때 개념이었잖아. 그래서 이제 두 값이 같다는 건 알았어. 그럼 x³+2x-1=0이었어. 저런 삼차방정식이 있었는데 얘가 실근이 존재하고 그 실근이 단 하나밖에 없대.
<SYNC Start=1417767><P Class=KRCC>
그래서 얘를 풀어 보려고 아마 노력한 사람들도 있을 거야. 근데 이거 숫자 값 찾기가 쉽지 않지. 그럼 이제 근의 존재성만 확인하면 돼.
<SYNC Start=1427230><P Class=KRCC>
근이 있다는 것만 알면 되니까 나는 여기서 사잇값 정리의 활용을 쓸 거고, 우리 이 함수를 g(x)라고 한번 불러 보자. 이렇게. 그럼 이제 g(x)라는 새로운 함수 가지고 올게.
<SYNC Start=1440217><P Class=KRCC>
g(x)라는 애가 있었는데 그 g(x)라는 애는 x³+2x-1이었어. 얘가 어디에서 근이 존재해야 되냐면 n하고 n+1이라는 구간 안에서 근이 존재해야 돼.
<SYNC Start=1454453><P Class=KRCC>
그럼 이 구간 안에서 근이 존재한다는 얘기는 부호가 바뀌어야 되지? 음수에서 양수로 넘어가면서 0을 거치거나 아니면 반대로 양수에서 음수로 넘어오면서 그때 0을 거치거나
<SYNC Start=1469971><P Class=KRCC>
이런 케이스들이 있어야 돼. 근데 뭘 대입해야 0이 될지 나도 몰라. 양수인지 음수인지도 모르고. 그래서 이렇게 사잇값 정리를 활용할 때는 진짜 그냥 몇 개 넣어 보는 거야,
<SYNC Start=1481086><P Class=KRCC>
너희가 생각하고 있는 숫자들로. 그래서 여기다가 1 한번 넣어 봤어. 그랬더니 1+2-1. 그러니까 2 됐어. 다른 것도 넣어 보자. 부호 바뀌는 지점 찾는 거야.
<SYNC Start=1493885><P Class=KRCC>
만약에 0 넣어 봤어. 계산하기 간단하게 0, 0 없어졌더니 -1 됐어. 0일 때는 -1이고 1일 때는 2 나와. 이거 지금 이해돼? 0일 때 함숫값은 음수이고 1일 때 함숫값은 2가 됐어.
<SYNC Start=1509390><P Class=KRCC>
즉 부호가 바뀌었어. 이 둘 사이에 부호가 바뀌었다는 얘기는 0하고 1 사이에서 근이 나왔다는 얘기지. 따라서 근이 누군지는 모르지만 이 사이에 존재하겠다.
<SYNC Start=1521493><P Class=KRCC>
근데 우리 문제에서는 n하고 n+1이 된다잖아, 이 값이. 그러면 이 식을 만족시켜 주는 n의 값은 0이 나와 주면 되는 거지.
<SYNC Start=1531955><P Class=KRCC>
그래서 이 문제는 풀이가 많지 않은데 기초적인 설명이 들어가는 게 많았어. 특히 첫 번째 조건. 직선식이야. 일대일 대응이야. 그 y 값이 될 수 있는 건 유일하게 하나씩밖엔 없어.
<SYNC Start=1544707><P Class=KRCC>
그러니까 함숫값이 같으려면 알맹이가 같은 거야. 그 수식을 끌어낼 수 있는 게 중요했던 문제가 이 24번이었어. 그래서 이게 오늘의 마지막 문제야.
<SYNC Start=1557624><P Class=KRCC>
우리 뭐 했나 정리 한번 좀 해 보자. 그래서 오늘 배웠던 내용들, 단어 한번 다시 보면 첫 번째로는 연속 함수. 그래서 정의역에서 예쁘게 이어져 있으면,
<SYNC Start=1571024><P Class=KRCC>
구간에서 정의된 모든 점에서 연속이면 연속 함수였어. 근데 기본적인 연속 함수들 내가 설명했지? 다항함수는 실수 전체에서 연속, 특별한 조건이 없다면.
<SYNC Start=1581561><P Class=KRCC>
그리고 유리함수, 무리함수는 어디에서 연속? 그렇지. 정의역에서 연속. 그래서 다음 시간에 그거하고 관련된 문제 하나 더 풀 거니까 유, 무리함수는 공부를 좀 해 보고
<SYNC Start=1591852><P Class=KRCC>
그리고 두 번째로는 사잇값 정리. 그래서 연속 함수에 대한 정리이고 근의 존재성을 확인할 때 쓰이는 게 사잇값 정리였어. 우리 마지막 문제처럼.
<SYNC Start=1601152><P Class=KRCC>
그래서 오늘도 너무너무 고생 많았고 다음 시간에 16강에서 보자. 안녕.
<SYNC Start=1606382><P Class=KRCC>
&nbsp;
</BODY>
</SAMI>