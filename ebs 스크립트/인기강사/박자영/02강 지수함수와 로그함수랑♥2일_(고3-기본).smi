<SAMI>
<HEAD>
<TITLE>(주)기록법인상생 자막 2019</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=9995><P Class=KRCC>
안녕하세요. 얘들아, 오늘도 사진을 좀 준비했는데. 오늘 준비한 사진은 내가 옛날에 수특 찍었었거든. 여기 보면 수능특강 이렇게 써져 있지. 이때는 내가 교복 입고 찍었었단 말이야.
<SYNC Start=23459><P Class=KRCC>
그리고 애들하고 뭘 했었냐면 꿈틀이 이름 만들기를 했었어. 우리 누군가의 꿈이 되자는 목표를 가지고 꿈틀이 이름을 만들었었는데,
<SYNC Start=32402><P Class=KRCC>
내가 애들한테 ‘이런 거 어때?’ 하면서 되게 용기 내서 물어봤다. 수능만점 가자영 꿈틀이, 그리고 나 민초 되게 좋아하거든. 완전 민초파 꿈틀이 이런 거 해 보고.
<SYNC Start=43354><P Class=KRCC>
그리고 이름 정해서 강의 시작한 날짜, 그리고 완강하고 싶은 날짜. 이런 게 혼자 공부하는 것보다 같이 정해서 얘기하면 뭔가 더 의지가 불타잖아. 그래서 우리 같이 열심히 해 보자.
<SYNC Start=55523><P Class=KRCC>
이런 얘길 했었는데, 처음에 하면서 ‘애들이 안 해 주면 어떡하지.’ 되게 걱정을 했었다. 처음으로 해 보는 거니까. 근데 다음 사진 보면 애들이 이렇게 엄청 열심히 해 줬어.
<SYNC Start=66399><P Class=KRCC>
정말 이름들이 하나하나 다 달라. ‘긍정왕이 되고 싶은 꿈틀이’도 있었고, ‘장미꽃 꿈틀이’, ‘수학 쌤이 될 꿈틀이’, ‘꿈이 많은 꿈틀이’, 그리고 ‘수능 뿌실 꿈틀이’.
<SYNC Start=76393><P Class=KRCC>
정말 이렇게 다양하게 애들이 열심히 이름 만들어 주고, ‘선생님, 저 왔어요.’ 하면서 인사해 주더라고. 이렇게 이름을 만드니까 내가 너희들을 더 기억하기도 좋고,
<SYNC Start=86477><P Class=KRCC>
그래서 이번에도 너희들이 꿈틀이 이름을 한 번씩 생각해서 내가 공지사항에 조금 더 자세하게 써 놓을게. 나하고 같이 공부했던 친구들은 옛날에 썼던 이름 다시 써도 괜찮고,
<SYNC Start=97566><P Class=KRCC>
그럼 내가 ‘어, 너 왔구나.’ 이렇게 해 줄 수 있으니까. 아니면 ‘선생님, 저는 새로운 꿈틀이로 거듭나고 싶어요.’ 하는 친구들은 이름 바꿔서 써도 괜찮고.
<SYNC Start=106524><P Class=KRCC>
한 번씩 고민해보고 이름 정해서 수강 후기 게시판에다가 남겨 줘. 그리고 다음 그림 보면, 이거 나야. 내가 저번에 물어봤을 때 애들이 같이 이름 정해 줬거든. 꿈을 전달하는 꿈틀이라고.
<SYNC Start=120955><P Class=KRCC>
그래서 또 피디님이 이렇게 이름표 만들어 오셨어. 아이돌처럼. 이런 것도 이제 처음으로 붙여 봤단 얘기야. 나는 앞으로 너희들하고 수업하면서 나도 꿈틀이 이름 이렇게 달고 나올게.
<SYNC Start=132576><P Class=KRCC>
너희들도 이름 정해서 같이 얘기할 수 있었으면 좋겠다. 우리 이제 지난 시간하고 이어서 내용을 좀 보자. 우리 지난 시간에는 거듭제곱근 했었고, 그리고 또 뭐 했지? 그렇지. 지수의 확장까지 했고.
<SYNC Start=146621><P Class=KRCC>
그리고 마지막으로는 로그 정의하고 끝났었지. 지난 시간 마지막에 했던 건 로그에 대한 정의였고, 내가 제목을 로그의 구구단이라는 이름을 붙였어. 얘는 로그를 가지고 계산하는 방법이야.
<SYNC Start=158621><P Class=KRCC>
정말 구구단처럼 자다가 일어나서도 바로바로 대답할 수 있어야 되고 자유롭게 쓸 수 있어야 돼. 첫 번째는 log a의 1. 우리 진수가 1이면 무조건 로그값은 0이었지.
<SYNC Start=170535><P Class=KRCC>
두 번째, 나 밑하고 진수가 같아. 우리 이럴 때는 로그값은 1이었었고 가장 많이 쓰이는 연산이 ③번하고 ④번이었어. 우리 밑이 같은 두 로그를 더했어. 우리 그럴 때는 진수끼리는 곱했었지.
<SYNC Start=184770><P Class=KRCC>
이렇게. 근데 또 하나가 나 등호 썼단 얘기는 왼쪽하고 오른쪽이 같다는 뜻이잖아. 그럼 왔다 갔다 할 수 있단 얘기니까 나 얘를 가지고 이렇게 쪼갤 수도 있어야 된다. 밑이 같다면.
<SYNC Start=196369><P Class=KRCC>
그리고 두 번째로는 나 밑이 같은 두 로그끼리 뺐어. 그럴 때는 진수끼리는, 나 여기 느낌상 더했을 때 곱했으니까 뺀다면? 그렇지. 나누겠지.
<SYNC Start=207126><P Class=KRCC>
그래서 뒤에 있는 애가 분모로 오고 앞에 있던 게 분자로 위로 올라가는 거야. 그리고 다섯 번째 거, 나 진수에 이렇게 제곱 달려 있다. 근데 그 머리 위에 있는 제곱이 너무 무겁잖아.
<SYNC Start=218682><P Class=KRCC>
그래서 얘가 데굴데굴 내려와. 그래서 식이 k 곱해져 있고 log a의 M. 데굴데굴 떨어질 수도 있고 조건에 따라서 위로 올라갈 수도 있고. 그리고 ⑥번 나 이거 많이 쓰는 성질 중에 하나야.
<SYNC Start=231294><P Class=KRCC>
나 여기 있는 a하고 여기 있는 c하고 자리 바꾸는 게 가능해. 그래서 어떤 식이 되냐면 c (log b의 a). 이런 식으로. 밑에 있던 밑하고 로그에 있는 진수하고 자리 바꾸는 거 가능.
<SYNC Start=244668><P Class=KRCC>
이 6가지 수식들이 한 문제를 풀기 위해서 전부 다 사용이 될 거야. 우리 필수 유형부터 보자. 우리가 같이 이렇게 교재 문제를 풀다 보면 어떤 개념들이 나오고,
<SYNC Start=257720><P Class=KRCC>
그다음에 제일 먼저 만나게 되는 문제가 필수 유형이잖아. 근데 원래대로라면 제일 먼저 만나는 문제는 좀 쉬워야 되거든.
<SYNC Start=265692><P Class=KRCC>
근데 필수 유형이다 보니까 아무래도 대표 문항들이 나와서 조금 어렵게 느껴질 거야. 그래서 만약에 처음부터 필수 유형 푸는 게 어려우면 그 뒤에 좀 쉬운 거 있지. 계산 문제들.
<SYNC Start=275340><P Class=KRCC>
그거 먼저 하고 그다음에 다시 한번 필수 유형 봐 봐. 이름이 필수 유형인 만큼 정말 중요한 문제들이 맞거든. 기출 문제들이고.
<SYNC Start=283558><P Class=KRCC>
이 문제는 2020학년도 수능에 나왔던 문제인데 조건들부터 읽어 볼게. 자연수 n의 양의 약수의 개수를 f(n)이라고 부른다 그랬어.
<SYNC Start=293368><P Class=KRCC>
그랬을 때 나 문제에서는 36의 모든 양의 약수를 이렇게 부를 거래. 그랬을 때 이거의 값을 구해 달라 그랬어. 일단 첫 번째로 내 눈에 보이는 건 ∑야. 우리 ∑ 무슨 뜻? 뭐에 대한 기호?
<SYNC Start=306699><P Class=KRCC>
그렇지. 합에 대한 기호였지. 우리 합이라는 거 영어로 sum이라고 부르는데 그 s자를 따 가지고 ∑라는 게 저 s의 그리스어였잖아. 그래서 ∑라는 거 합에 대한 기호였고, 주르륵 더한단 뜻인데
<SYNC Start=319598><P Class=KRCC>
누구를 더하냐면 이 뒤에 있는 애들을 더하는 거야. 즉 ∑를 가지고 문제 풀 때 중요한 건, 이 뒤에 나오는 일반항을 먼저 파악하는 게 중요해.
<SYNC Start=328800><P Class=KRCC>
내가 여기 나와 있는 36의 약수들을 가지고 하나씩 하나씩 대입을 하겠지. 그럼 이 뒷부분은 약수마다 달라질 거야. log 2, log 3, log 6 이렇게 바뀌겠지.
<SYNC Start=340316><P Class=KRCC>
근데 앞부분을 봤더니 -1의 f(ak)가 있어. 우리 이렇게 -1의 거듭제곱은 점점 커지거나 점점 작아지는 게 아니지. 우리 -1의 거듭제곱은 뭐만 가능해? 무조건? 그렇지. +-+-만 가능해.
<SYNC Start=355818><P Class=KRCC>
얘는 +1이거나 -1이야. 값을 결정해 주는 건 이거고, 부호를 결정해 주는 건 얘야. 조금 더 정확히는 -1의 지수가 부호를 결정하겠지.
<SYNC Start=367441><P Class=KRCC>
근데 그 지수의 뭐에 따라서 바뀌냐면 얘가 짝수라면 양수일 거고, 얘가 홀수라면 - 살아있으니까 음수될 거고. 그런 얘기지.
<SYNC Start=376177><P Class=KRCC>
그럼 내가 부호를 결정하기 위해서 필요한 건 이 f(ak)라는 지수의 짝수인지 홀수인지야. 그래서 지금은 뭐 할거냐면 처음 거, 짝홀을 좀 한번 생각해 보자. 나 누구의 짝홀 생각하는 중이야?
<SYNC Start=390553><P Class=KRCC>
그렇지. f(ak). 근데 이 f(ak)라는 게 무슨 뜻이었냐면 ak라는 그 아이의 양의 약수의 개수야. 즉 약수의 개수라는 그 아이가 짝수인지 홀수인지가 궁금한 거고,
<SYNC Start=404505><P Class=KRCC>
저 알맹이에 들어가는 ak라는 건 누구의 약수였냐면 36의 약수였어. 우리 이거 낯설잖아. 그러니까 우리 36의 약수 진짜 한번 써 보자. 뭐 있는지. 그럼 36의 약수는 1 그리고 2,
<SYNC Start=418648><P Class=KRCC>
36의 약수 구하는 중이야. 4, 6, 9, 12, 18, 36 나 이만큼이 약수가 존재하겠지. 근데 약수값을 정확하게 쓰는 게 아니라 진짜로는 뭐가 필요한 거냐면 약수의 개수가 필요한 거야.
<SYNC Start=441465><P Class=KRCC>
이번에는 나 얘네들의 약수의 개수를 밑에다가 써 볼게. 그럼 1이라는 건 약수가 1밖에 없을 거고, 2는 1, 2니까 2개, 3은 1, 3이니까 2개, 4는 1, 2, 4니까 3개, 6은 1, 3, 6이니까 3개.
<SYNC Start=456865><P Class=KRCC>
근데 이쯤 넘어가면서부터 고민이 좀 될 거야. 우리 9까지만 직접 찾아. 9는 1, 3, 9인 거지. 그럼 4는 1, 2, 4, 6은 1, 2, 3, 6 4개. 9는 1, 3, 9니까 몇 개 나오냐면 3개. 이만큼이잖아.
<SYNC Start=473958><P Class=KRCC>
근데 우리 얘네들 같은 경우는 숫자가 조금 더 크니까 뭐 하기가 어려워? 하나씩 세기가 어려워. 그래서 하나씩 세기 보다는 우리 약수의 개수 배웠지. 그거 한번만 좀 써 보자.
<SYNC Start=485250><P Class=KRCC>
나 만약에 n이라는 애가 하나 있었는데 얘를 소인수분해 했더니 a의 p제곱 b의 q제곱 c의 r제곱이었어. 그렇다면 지수에다가 1 키워서 몽땅 곱하는 게 약수의 개수였지.
<SYNC Start=496704><P Class=KRCC>
그래서 (p+1)(q+1)(r+1) 이게 약수의 개수 구하는 방법이었어. 그럼 이제 얘 활용해 가지고 나머지 애들의 약수를 좀 구해 보면, 나 12는 4×3이지. 근데 우리 4라는 거 2², 3은 3¹.
<SYNC Start=514913><P Class=KRCC>
지수에다가 1, 1 키워 보면 3하고 2. 그러니까 6 나오는 거지. 다음 거. 나 18은 9×2였어. 결국 3², 2¹. 그럼 식에서 1이었어. 그럼 지수에서 1씩 키워 보면 3하고 2. 그러니까 얘도 약수 6개.
<SYNC Start=537968><P Class=KRCC>
이번에는 36. 나 4×9=36이지. 그러면 2², 3². 지수에서 1씩 키워서 곱해 주면 9. 이만큼이야. 지금 아래 줄에 구한 게 약수의 개수야.
<SYNC Start=549773><P Class=KRCC>
근데 내가 그 약수의 개수에서 진짜 필요했던 건 뭐냐면 짝수인지 홀수인지가 필요했던 거지. 약수의 개수를 가지고 우리 짝수, 홀수 한번 나눠 보자. 얘를 가지고 기준으로 나누는 거야.
<SYNC Start=561697><P Class=KRCC>
그럼 이 안에서 짝수인 거 일단 먼저 한번 찾아볼까? 짝수인 애들 봤더니 2 있었고 짝수인 거 3, 그리고 짝수인 숫자 6, 또 짝수 되는 거 12, 그리고 18. 이 숫자들은 약수의 개수가 짝수였어.
<SYNC Start=576930><P Class=KRCC>
그럼 이번엔 홀수인 거. 얘를 뺀 나머지니까 1 있었고, 홀수인 거 4, 그리고 홀수인 거 9 있었고 또 마지막 거 36. 이렇게인 거야. 우리가 짝수일 때는 -1을 짝수 번만큼 곱했으니까 어떻게 돼?
<SYNC Start=593018><P Class=KRCC>
그렇지. 얘네들은 양수 되겠지. 근데 홀수 제곱 하게 되면 얘네들은 전부 부호가 음수일 거야. 그럼 이제 진짜 ∑에다가 한번 넣어 보자. 내가 쟤를 가지고 문제 한번 다시 읽을게.
<SYNC Start=604851><P Class=KRCC>
어디까지 정리했냐면 나 얘를 가지고 짝, 홀로 부호를 결정한 거야. 그럼 이미 부호는 결정했으니까 그다음에는 로그에다가 숫자만 대입해 주면 되겠지. 하나씩 약수 대입하자.
<SYNC Start=615770><P Class=KRCC>
그리고 로그에서 밑이 없어. 저거 상용 로그인 거야. 그럼 이제 짝수인 애들은 +로 식이 나올 텐데 ∑는 더하기에 대한 기호였지. 그래서 +인 애들 먼저 쓰면 log 2+log 3+log 6+log 12+log 18.
<SYNC Start=633960><P Class=KRCC>
이만큼이 플러스. 근데 여기에서 끝이 아니라 그 다음 애들은 부호가 마이너스인 것 뿐이고 나머지 애들도 전부 다 더할 거잖아. 앞에서부터 보면 -log 1, 근데 우리 log 1은 0이니까 쓰지 말자.
<SYNC Start=647070><P Class=KRCC>
나머지 거 -log 4-log 9-log 36 이만큼을 연달아서 계산하는 거야. 근데 자세히 보면 나 밑이 안 써 있다. 우리 밑이 없는 로그 무슨 뜻이라 그랬어? 그렇지. 상용 로그.
<SYNC Start=662073><P Class=KRCC>
그럼 밑이 없기 때문에 밑이 동일하잖아. 10으로 전부. 우리 밑이 같은 로그를 가지고 더할 때는 진수끼리 곱할 거고, 밑이 같은 애들을 가지고 뺄 때는 진수끼리 나눌 거지.
<SYNC Start=673064><P Class=KRCC>
그럼 나 얘를 가지고 전체값을 하나의 로그로 정리할 수 있겠지. 그래서 나 양수인 애들은 전부 다 곱하는 거야. 그럼 앞에서부터 2×3×6×12×18 이만큼은 양수니까 그대로 곱했어.
<SYNC Start=688263><P Class=KRCC>
그리고 나머지, 나 마이너스는 나눈다 그랬지. 즉 역수를 곱해 주면 되는 거지. 분모로 깔리니까 숫자가 4×9×36 이만큼 남겠다.
<SYNC Start=698748><P Class=KRCC>
그럼 이제 이만큼 자체가 진수가 되니까 최대한 한번 약분시켜 보자. 2하고 약분돼서 36 사라졌고, 그다음 내용이 나 또 뭐 지울 수 있어? 그렇지. 4하고 9 한번 약분시켜 볼까?
<SYNC Start=712073><P Class=KRCC>
나 이거 지워져서 3 됐고 3×3=9 없어졌어. 그러니까 남은 게 뭐냐면 log 6만 남았지. 이렇게 계산을 했어. log 6만 남았는데 문제는 나 이 log 6이 보기에 있어, 없어? 그렇지. 없어.
<SYNC Start=726018><P Class=KRCC>
한 번 더 쪼갠 게 들어 있지, 대신. 우리 6이라는 거 2×3이지. 그래서 합칠 수도 있지만 다시 한번 이렇게 쪼갤 수도 있어야 된다. 정답은 log 2+log 3이었어.
<SYNC Start=738186><P Class=KRCC>
log 2+log 3 어디 있는지 봤더니 ①번 돼 주면 되겠다. 아마 이 문제 조금 어려웠을 거야. 이 문제 풀기 위해서는 처음에 뭐 알아야 돼? 그렇지. 약수.
<SYNC Start=748964><P Class=KRCC>
약수의 개수 구하는 방법 알아야 되고, 그 약수의 개수를 가지고 지수에 대한 부호 결정해서, 그 로그값에 대입하고, ∑라는 거 합에 대한 기호고, 로그 계산 할 수 있어야지 풀 수 있는 문제가
<SYNC Start=760668><P Class=KRCC>
이 필수 유형 문제였지. 그리고 7번 한번 보자. 모든 실수 x에 대해서 저 로그가 정의된다 그랬어. 저거 내가 로그에 대한 얘기하면서 강조했던 부분인데. 로그가 정의된다.
<SYNC Start=776122><P Class=KRCC>
우리 한번만 다시 써 볼까? 우리 로그라는 게 뭐였냐면, 나 a, b 쓸게. 문자. log a b라는 애가 정의된다. 이거 무슨 뜻이었어? 몇 가지 조건 만족해야 돼? 그렇지. 2가지 조건.
<SYNC Start=788948><P Class=KRCC>
a하고 b라는 애가 각각 이름이 있었고 무슨 조건 만족하냐면 a는 밑 조건, b는 진수 조건. 밑 조건은 양수여야 되고 단 1은 제외시켜야 되고, 진수 조건은 0보다 큰 양수였지.
<SYNC Start=802914><P Class=KRCC>
이 조건을 만족해야지만 로그가 정의될 수 있었어. 그럼 이 내용 그대로 문자로만 좀 바꿔 보자. 밑이 누구냐면 |a+3| 이만큼이 밑이야.
<SYNC Start=814179><P Class=KRCC>
근데 내가 필요한 밑 조건이 뭐였냐면 양수이면서 1은 제외시켜야 돼. 나 얘는 양수여야 돼. 그리고 동시에 |a+3|은 1은 아니어야 돼. 우리 이거 풀 때 있잖아.
<SYNC Start=827207><P Class=KRCC>
물론 수식 정리해서 풀어도 되지만 우리 절댓값은 원점으로부터의 거리가 정의였지. 그럼 원점으로부터의 거리니까 당연히 항상 0 이상으로 나오지.
<SYNC Start=837266><P Class=KRCC>
우리 절댓값은 안에 뭐가 들어가든지 간에 항상 값이 0 이상이었어. 근데 그 0 이상인 값에서 지금 누구만 빠진 거냐면 0만 빠진 거야. 즉 0만 아니면 돼. 근데 얘가 언제 0이냐면 -3일 때.
<SYNC Start=851020><P Class=KRCC>
그러니까 a가 -3만 아니라면 이 값은 절댓값이니까 항상 0보다 크다로 나오는 거야. 근데 두 번째 거 봐 봐. 나 얘는 1이 아니었음 좋겠대.
<SYNC Start=861317><P Class=KRCC>
우리 절댓값이 1이 되는 그런 값에는 뭐가 있냐면 ±1이 있지. 그럼 얘가 ±1이 아니었음 좋겠단 얘기는 결국 a가, 나 +3 넘어간다. +3 넘어가면 -4인데 +1이랑 계산하게 되면 -2. 식 봐 봐.
<SYNC Start=882774><P Class=KRCC>
그리고 또 하나, 나 +3 넘어가면 -4. 그래서 -2가 아니었음 좋겠고 -4도 아니었으면 좋겠지. 첫 번째에서는 -3이라는 거 그 순간에 0이 되니까 제외시켰고,
<SYNC Start=895285><P Class=KRCC>
나 두 번째에서는 ±1 제외시킬 때 -3 한번 넘어갔고 -1하고 계산해서 이 두 값이 제외됐어. 지금 ①번 조건으로 체크할 수 있는 건 뭐냐면 저 3개의 숫자들이 제외된 거야.
<SYNC Start=907236><P Class=KRCC>
그리고 이제 다음 조건 한번 보자. 나 방금 전에는 밑 조건 썼고, 이제 진수 조건 한번 써 볼게. x²+ax-a+3 얘가 진수고, 나는 진수가 양수였으면 좋겠어.
<SYNC Start=921209><P Class=KRCC>
근데 진수에 대한 형태를 좀 봤더니 이거 몇 차 함수야? 그렇지. 이차 함수야. 특히 최고차의 부호가 +였어. 우리 최고차의 부호가 +란 얘기는 웃는 모양인 아래로 볼록이지.
<SYNC Start=933385><P Class=KRCC>
나 아래로 볼록인 그래프가 항상 0보다 크대. 즉 x축 기준으로 그래프 어떻게 그려져야 돼? 둥둥 떠 있어야 되지. 항상 0보다 크기 위해서는 나 그래프가 x축 기준으로 위에 떠 있어야 돼.
<SYNC Start=946089><P Class=KRCC>
그럼 x축을 기준으로 공중에 떠 있단 얘기는 결국 x축하고 안 만나. 그러니까 근이 없어. 우리 이차 방정식의 근이 없단 얘기는 결국 판별식이 0보다 작단 얘기지. 여기서는 판별식 활용하는 문제야.
<SYNC Start=959971><P Class=KRCC>
그리고 그 판별식이라는 거 공식이 크게 2개 있었다. 나 지금 여기 있는 문자 말고 판별식 공식 쓰는 중이야. b²-4ac 이 공식도 있었고, 아니면 4분의D라는 짝수 공식도 있었지.
<SYNC Start=974351><P Class=KRCC>
얘는 반의 제곱 -ac. 이런 공식들이었어. 그럼 내가 가지고 있는 a는 짝수인지 모르니까 내가 알고 있는 기본 판별식 공식 활용해서 한번 써 보자. 판별식 써 주면 식이 반의 이거.
<SYNC Start=989482><P Class=KRCC>
a라는 가운데 거 제곱-4ac인데 우리 c라는 거 일차항을 뺀 나머지 부분이 전부 다 c가 되는 거야. 그리고 이 판별식이 0보다 작아야 되는 거지.
<SYNC Start=1000440><P Class=KRCC>
전개까지 해 주면 나 a²+4a-12라는 애가 0보다 작아야 돼. a에 관한 이차 부등식이야. 식 인수 분해 해야겠지. 인수 분해 해 주면 6, 2니까 (a+6)(a-2)이 0보다 작았어.
<SYNC Start=1017048><P Class=KRCC>
나 a쪽으로 부등호 오므라져있다. 그럼 답도 닫혀지게 오므라진 형태로 나오고 결국 범위는 -6부터 2까지가 되는 거야. 근데 이 범위 안에 있는 해가 전부 다 해당되는 게 아니고
<SYNC Start=1029931><P Class=KRCC>
나 아까 전에 누구 누구 누구 뺐어? 문제 한번 다시 보자. 아까 전에 3개 제외시켰지. -3, -2, -4 이렇게 3개. 그리고 우리 문제에서 원하는 건 정수들을 전부 다 더해 달라 그랬어.
<SYNC Start=1042694><P Class=KRCC>
그럼 이제 조건 만족하는 애들만 찾아보자. 우리 이 안에 들어가는 거 순서대로 찾아볼게. 나 -6보다 커야 되니까 -5, -4인데 그거 빼고, -3인데 걔도 빼고, -2도 빼고, -1, 0, 1인 애들이지.
<SYNC Start=1059550><P Class=KRCC>
근데 이거 전부 더해 달라고 했으니까 결국 답은 -5가 돼 주면 되겠다. 이 7번 문제 같은 경우는 가장 기본 유형의 문제였어. 로그를 주면서 로그가 정의된다는 표현을 줬어.
<SYNC Start=1072497><P Class=KRCC>
로그가 정의되기 위해서는 밑 조건, 진수 조건을 만족해야 되는데 그 밑 조건, 진수 조건을 만족하는 애들을 찾으려고 봤더니 밑에는 절댓값이 들어 있고 진수에는 이차 함수가 들어 있었어.
<SYNC Start=1084569><P Class=KRCC>
그래서 우리가 옛날에 배웠던 그런 기본 내용들을 알고 있어야지 풀 수 있는 문제가 이 7번 유형의 문제였지. 그리고 8번 한번 보자. 8번은 진짜 로그값 기본 계산이다. 그렇지?
<SYNC Start=1098518><P Class=KRCC>
일단 다행히 저 3개의 로그가 뭐가 똑같아? 전부? 그렇지. 밑이 똑같아. 그러니까 우리 하나로 묶어 버리자. 얘를 가지고 log 2 이렇게 한 덩어리로 정리할 거야.
<SYNC Start=1109530><P Class=KRCC>
그러면 진수가 30이었는데 우리 로그끼리 뺐어. 나 밑이 같은 두 로그를 뺀단 얘기는 결국 진수끼리 나누겠단 얘기인데 나누기라는 건 역수를 곱하는 거지.
<SYNC Start=1122309><P Class=KRCC>
그러니까 굳이 얘를 나누기 기호 쓸 게 아니라 얘 가지고 역수를 곱해 주면 된다. 한 번 더, 나 얘도 뺐으니까 마찬가지로 역수를 곱해 주면 되지. 그럼 이제 식 약분해 보자.
<SYNC Start=1134274><P Class=KRCC>
나 3, 5, 15니까 약분돼서 2 됐어. 결국 log 2에다가 나 2하고 2하고 4, 2 몇 개 생겼냐면 4개 생겼지. 그럼 우리 이렇게 머리 위에 있는 지수 어떻게 하기로 했어? 무거워서 뚝 떨어지기로 했지.
<SYNC Start=1149552><P Class=KRCC>
나 앞에 있는 거 4 떨어졌고 log 2의 2 밑하고 진수가 같을 때는 1. 그래서 값이 4 나와 주면 되는 거야. 이 8번 문제는 기본 로그의 구구단 활용하는 문제였지. 그리고 이제 9번 한번 보자.
<SYNC Start=1165582><P Class=KRCC>
여기서부터가 이제 조금 그래도 고민되는 문제 유형들이었지. 2개의 양수가 있었어. a, b라는. 근데 그 2개의 양수가 무슨 조건을 만족하냐면 이 전체값은 1이 되고 이만큼은 10이 된다 그랬어.
<SYNC Start=1179439><P Class=KRCC>
저거부터 좀 한번 고쳐 보자. 첫 번째, 나 음수 지수 나왔다. 음수 지수 무슨 뜻이었어? 그렇지. 역수였지. 그럼 얘 다시 한번 쓰자면 b³분의a² 이만큼이 1. 이 뜻이지.
<SYNC Start=1193664><P Class=KRCC>
좀 더 예쁘게 쓰면 a²이 결국 b³. 이 수식을 가지고 그대로 써도 괜찮고, 아니면 우리 문자 2개 나와서 불편하니까 한 문자로 정리해 보자. 얘를 가지고 다시 쓰자면 얘는 결국 b의 (2분의3)제곱.
<SYNC Start=1209574><P Class=KRCC>
얘를 가지고 쭉 식 정리한 거야. 그럼 이번에는 두 번째 식 한번 활용해 볼게. 나 얘를 쓸 건데 일단 이렇게 뭉쳐져 있으면 내가 계산하기 힘들잖아. 우리 언제 진수끼리 곱하는 거야?
<SYNC Start=1221627><P Class=KRCC>
애초에 뭐였어? 그렇지. 밑이 같은 두 로그의 더하기였지. 그래서 얘를 가지고 다시 더하기로 쪼개 보자. 그럼 다시 쓰면 log b의 a의 m제곱인데 그 m제곱 앞으로 데굴데굴 떨어질 수 있지.
<SYNC Start=1235562><P Class=KRCC>
그리고 + log b에다가 bⁿ인데 이 앞에 2 생략되어 있지. 그럼 저거 분수 지수로 고쳐 보면 a의 b 2분의n. 이거 지금 이해돼? 나 지금 얘를 가지고 진수가 곱하기니까 둘을 더하기로 쪼갰어.
<SYNC Start=1253609><P Class=KRCC>
앞부분 가지고 식 쓰자면 m 떨어지면서 log b의 a인 거고, 그리고 뒷부분 살펴보면 이거 지수로 고치면 2분의n제곱인데 2분의n제곱 떨어지면서 log b의 b인 거야.
<SYNC Start=1265129><P Class=KRCC>
근데 밑하고 진수가 같을 때는 우리 어차피 1이지. 결국 남은 건 뭐냐면 2분의n만 앞으로 붙겠지. 근데 이 전체값이 몇이라 그랬냐면 10이 된다는 조건 줬어. 한번 더 해 보자.
<SYNC Start=1277513><P Class=KRCC>
한 줄 더 정리해 주면, m log b의 a였고 그다음에 나오는 식이 앞으로 2분의n 뚝 떨어져서 10 됐어. 나 이 식을 조금 더 정리할 수 있을 거 같은데.
<SYNC Start=1289389><P Class=KRCC>
나 방금 전에 a라는 거 b의 (2분의3)제곱으로 정리했지. 그럼 b 이만큼 대입해 보자. 그럼 내가 a 대신에 b의 (2분의3)제곱을 넣을 거야. 이만큼. 그럼 무슨 일이 일어나?
<SYNC Start=1303416><P Class=KRCC>
그렇지. 2분의3이 앞으로 뚝 떨어져. m하고 곱하겠지. 그러니까 결국 (2분의3)m에다가 log b의 b인데 그거 1이잖아. 그래서 (2분의3)m 그리고 방금 전에 있던 2분의n. 이 전체값은 10.
<SYNC Start=1316641><P Class=KRCC>
나 이거 만족하는 m, n 찾는 거야. 그럼 이거 만족하는 m, n인데 분수식이라 불편하잖아. 그래서 분수 없애 주려고 양변에다가 2 곱했어. 그랬더니 3m+n 둘 곱해 준 거 없어지면서 전체값 20.
<SYNC Start=1331625><P Class=KRCC>
그럼 나 이거 만족하는 m, n인데 이거 풀면서 이 식 안에 문자 몇 개 있어? 2개 있어. 근데 내가 구한 식은 몇 개밖에 없어? 하나밖에 없어.
<SYNC Start=1342123><P Class=KRCC>
근이 딱 유일하게 하나로 결정되는 게 아니라 케이스로 답이 나와. 그리고 우리 문제에서 이 m하고 n을 가지고 뭐라고 얘기했냐면 자연수라는 조건을 줬잖아.
<SYNC Start=1351815><P Class=KRCC>
자연수기 때문에 하나씩 직접 너희들이 넣어 가지고 케이스 찾아봐야 된다. m에다가 1 대입했어. 나 만약에 m이 1이었다면 그때는 3, n, 20. 그러니까 17 되겠지.
<SYNC Start=1365348><P Class=KRCC>
나 m에다가 2 넣었어. 그랬더니 6이지. 그러니까 14. 3 대입했더니 11. 4×3=12니까 8. 5×3=15니까 5. 그리고 마지막 6×3=18이니까 2.
<SYNC Start=1377782><P Class=KRCC>
나 이게 왜 마지막이냐면 7 넣는 순간 21 되니까 더 이상 n이 자연수일 수가 없지. 그래서 가능한 케이스가 이만큼. 그리고 우리 문제에서 물어보는 건 m하고 n 더한 거의 최솟값이래.
<SYNC Start=1389864><P Class=KRCC>
이 둘 더해서 제일 작은 거 어디 있냐면 여기 있네. 맨 밑에 거. 그래서 정답은 6하고 2 더해서 8이 나와 주면 되겠다.
<SYNC Start=1399617><P Class=KRCC>
이 문제는 너희들한테 지수 식 줘서 그 지수 식 가지고 열심히 식 정리해서 한 문자로 정리했어. 그 한 문자로 정리한 거 가지고 나머지 로그 식에다가 로그의 구구단 활용해서 식 정리했고.
<SYNC Start=1412379><P Class=KRCC>
근데 문자는 2개인데 식이 한 줄밖에 안 나왔어. 근데 m, n이라는 애가 자연수래. 그러니까 하나씩 넣어 가면서 케이스 직접 찾는 거야. 얘가 9번 문제였어.
<SYNC Start=1423895><P Class=KRCC>
그리고 이번에는 제일 중요한 내용 중에 하나야. 우리 로그도 그렇고 지수도 그렇고 언제만 계산이 가능하지? 우리 로그의 구구단 내가 아까 동그라미 쳤었는데, 언제만 연산이 가능했냐면?
<SYNC Start=1436562><P Class=KRCC>
그렇지. 밑이 같을 때만. 그러니까 밑이 같아야지만 내가 문제를 풀 수 있었어. 근데 지수 같은 경우는 내 마음대로 밑을 바꾸는 게 그렇게 쉽지 않지만
<SYNC Start=1445771><P Class=KRCC>
로그는 다행히도 얼마든지 내 마음대로 밑을 다 바꿀 수 있다. 그래서 지수보다는 로그가 좀 더 연산이 말랑말랑하거든. 그래서 내 마음대로 밑을 바꾸는 거야.
<SYNC Start=1455696><P Class=KRCC>
밑을 바꾸는 방법들이 다양한데 우리 이 4가지는 전부 다 쓰인다. 4개 다 정리해 보자. 처음에는 뭐냐면 아예 새로운 밑으로 만드는 거야. C라는 새로운 문자로.
<SYNC Start=1466284><P Class=KRCC>
log a의 b라는 로그가 하나 있었는데 내 마음대로 밑을 C로 만들 거야. 우리 그럴 때는, 밑은 밑으로 온다 그랬지.
<SYNC Start=1474807><P Class=KRCC>
그래서 밑을 C로 바꾸는데 밑에 있던 a가 분모로 오고 그리고 위에 있던 b가 이렇게 분자로 오는 거야. 여기에서 여기로도 고칠 수 있어야 되고,
<SYNC Start=1484916><P Class=KRCC>
등호 썼단 얘기는 여기에서 여기로도 지울 수 있어야 된다. 밑은 밑으로야. 아래 있던 게 아래로, 위에 있던 게 위로 올라가. 그리고 두 번째, 나 밑이랑 진수랑 자리 바꿀 거야.
<SYNC Start=1495799><P Class=KRCC>
우리 밑이랑 진수랑 자리 바꾸게 되면 무슨 일이 일어났었냐면 역수가 됐었지. log 2의 3, log 3의 2 그 둘은 역수 관계였어. 그리고 세 번째 거, 그럼 얘는 어떻게 될까, 식이?
<SYNC Start=1508970><P Class=KRCC>
나 log a의 b, log b의 a 이 둘 아까 무슨 관계였어? 역수. 그럼 역수끼리 곱했으니까 뭐 나와? 1. 이렇게 바로 나오면 좋고 만약에 잘 안 되면 앞부분이 log a의 b였어.
<SYNC Start=1522582><P Class=KRCC>
근데 log a의 b를 가지고 뒷부분은 log b의 a야. 저거 a, b를 바꾸자면 log a의 b로 바꾸면서 역수. 그러니까 없어지면서 뭐 나오는 거냐면 전체값 1. 이 내용이지.
<SYNC Start=1536460><P Class=KRCC>
그리고 네 번째 거, 이거 많이 쓰인다. 앞부분이 밑에도 지수가 있고 진수에도 지수가 있어. 근데 우리가 지난번에 진수에 지수 있는 건 했다. 나 이렇게 머리 위에 있는 거 어떻게 됐어?
<SYNC Start=1547532><P Class=KRCC>
무거워서? 그렇지. 데굴데굴 떨어졌지. 나 얘가 앞으로 데굴데굴 떨어질 건데 얘도 마찬가지로 앞으로 튀어나와. 근데 그냥 나오는 게 아니라 밑에 있었으니까 밑으로 나와.
<SYNC Start=1557910><P Class=KRCC>
그래서 이 m하고 n이 쭉 앞으로 밀려 나와서 무슨 식이 되냐면 m분의n 그리고 log a의 b 이렇게 나오는 거야.
<SYNC Start=1566352><P Class=KRCC>
밑에 있는 것도, 진수에 있는 것도 만약에 그 안에 거듭제곱이 있다면 앞으로 꺼내 줄 수 있어. 얘가 밑을 바꾸는 방법이었고, 그리고 이제 필수 유형 문제 한번 보자. 2개의 양수 a, b가 있었어.
<SYNC Start=1582541><P Class=KRCC>
근데 그 두 양수 a, b에 대해서 무슨 일이 일어났냐면 좌표평면 위에 2개의 점이 있었대. 근데 그 두 점을 지나는 직선이 하나 있었는데 그 직선이 원점도 지나고 있대. 이거 무슨 얘기야?
<SYNC Start=1595956><P Class=KRCC>
내가 만약에 얘를 A라고 부르고 얘를 한번 B라고 불러 보자. 나 두 점이 있었어. A라는 점 하나, B라는 점 하나. 근데 그 두 점을 지나는 직선이 하나 있었을 거 아니야.
<SYNC Start=1608067><P Class=KRCC>
근데 그 직선이 어디도 지나냐면 원점도 하나 이렇게 지나고 있는 거야. 그러니까 원점, A, B 이 세 개의 점이 전부 어디 있는 거냐면 하나의 직선 위에 존재하는 거야.
<SYNC Start=1620035><P Class=KRCC>
그럼 이렇게 하나의 직선 위의 점들이 존재할 때 직선이 동일하기 때문에 뭐도 동일하게 나오냐면 결국 기울기도 동일하게 나오지. 이거 이해돼?
<SYNC Start=1630822><P Class=KRCC>
내가 얘를 가지고 각각 두 개씩 묶어서 기울기를 구한다면 예를 들어서 OA의 기울기나 AB의 기울기나 OB의 기울기나 전부 동일하게 나오겠지. 그럼 얘를 가지고 굳이 직선 식을 잡지 않고
<SYNC Start=1643563><P Class=KRCC>
좀 더 간단하게 기울기만 가지고 체크를 하는 거야. 하나의 직선 위에 있기 때문에 기울기가 동일. 우리 이 얘기는 뒤에서 다른 문제 풀 때도 한 번 더 나온다. 그러니까 이 내용은 기억해 놔.
<SYNC Start=1655000><P Class=KRCC>
만약에 점들이 하나의 직선 위에 존재한다면 기울기가 동일한 거야. 직선 식이 같으니까. 그럼 이제 얘 가지고 문제들을 좀 활용해 보려면 기울기에 대한 정의를 알아야겠지.
<SYNC Start=1665420><P Class=KRCC>
기울기라는 게 뭐였었냐면 얼마큼 기울어져 있니? 기울어진 정도를 우리가 기울기라고 얘기했고. 정의로는 (x증가량)분의(y증가량). x가 이만큼 커질 때 y값 얼마큼 커지니? 그게 기울기였어.
<SYNC Start=1678887><P Class=KRCC>
점으로 얘기하자면 (x₁,y₁)이라는 점이 있고 (x₂,y₂)라는 점이 하나 있었어. 그럼 이 두 점 사이의 기울기는 (x증가량)분의(y증가량). 그러니까 (x₂-x₁)분의(y₂-y₁) 이렇게 구할 수도 있고.
<SYNC Start=1697052><P Class=KRCC>
아니면 우리 분수일 때는 안에다가 같은 값, 분자 분모에 곱하게 되면 식의 값 그대로 유지되지. 그럼 내가 -1씩 곱한다면 (x₁-x₂), (y₁-y₂)도 가능. 무슨 얘기냐면 어디서 뭘 빼든 상관없다.
<SYNC Start=1713028><P Class=KRCC>
그 순서만 맞춰 준다면. 2에서 1 빼면 분자도 2에서 1 빼면 되고. 1에서 2 뺐으면 1에서 2 빼 주면 되는 거야. 기울기라는 거 (x증가량)분의(y증가량) 그게 기울기다.
<SYNC Start=1725697><P Class=KRCC>
그럼 이제 이 내용 생각하면서 이거 한번 보자. A하고 B하고 원점하고 하나의 직선 식에 있어. 그러니까 당연히 뭐가 똑같은 거야? 기울기가 똑같은 거야. 그럼 기울기 한번 찾아볼까?
<SYNC Start=1738642><P Class=KRCC>
기울기 어떻게 찾지? 나 얘를 A라고 부르고 얘를 B라고 부르자고 했어. 그럼 이왕이면 나 AB 사이의 기울기를 구하게 되면 문자가 많잖아. 그러니까 그거보다는 OA 구하고 OB 구하게 되면
<SYNC Start=1752172><P Class=KRCC>
하나가 원점이라서 (0,0)이니까 계산하기 편하지. 그럼 내가 O라는 애 가지고 구해 보자. 처음에는 OA라는 애 기울기야. O는 원점이었고 A는 이거였어. 결국 기울기는 나 2에서 0 빼나 마나지.
<SYNC Start=1767208><P Class=KRCC>
그러니까 그냥 2. 얘 y값이 log 4의 a였는데 그것도 빼나 마나니까 값 그대로. 얘가 OA에 대한 기울기. 마찬가지 방법으로 OB에 대한 기울기를 찾아봤더니 B라는 점의 좌표가 (3,log 2의 b)였어.
<SYNC Start=1783217><P Class=KRCC>
그러니까 3분의(log 2의 b) 이만큼인 거야. 근데 이 둘이 결국 같지. 기울기가 같으니까. 그럼 이제 이 식 한번 세워 볼게. 2분의, 좀 더 정리해서 쓰자. 나 얘가 log 4의 a였어.
<SYNC Start=1800762><P Class=KRCC>
분모가 3분의(log 2의 b)였어. 나 이거 문제 풀려고 봤더니 계산식이 귀찮아. 얘도 분수, 얘도 분수. 우리 이럴 때는 대각선으로 곱하면서 식 정리하는 거였지. 앞에 2 있었고 log 2의 b.
<SYNC Start=1816991><P Class=KRCC>
그리고 3 곱해지면서 log 4의 a. 이만큼이었어. 좀 더 정리할 수 있는 거 보여? 우리 4 뭐라고 쓸 수 있어? 그렇지. 2². 근데 우리 그 2²이 밑에 있으니까 앞으로 밀려나오지.
<SYNC Start=1830218><P Class=KRCC>
그래서 얘는 2분의3 log 2의 a. 여기까지 정리할 수 있겠다. 얘는 내가 기울기를 통해서 식 정리를 한 거고, 우리 문제에서 너희들한테 진짜 구하라고 한 건 누구냐면 log a의 b였어.
<SYNC Start=1844790><P Class=KRCC>
얘를 가지고 바꿔도 되고, 쟤네를 가지고 log a의 b로 바꿔도 괜찮아. 근데 나 같은 경우는 이 식을 가지고 밑을 2로 바꿨어. 왜냐하면 내가 가지고 있는 애들이 전부 밑이 2라서.
<SYNC Start=1856183><P Class=KRCC>
그럼 얘를 가지고 새로운 밑으로 바꾸니까, 우리 밑은 밑으로 온다 그랬지. 그럼 2로 바꿨으니까 log 2의 a. 2로 바꿨으니까 log 2의 b. 이만큼이야. 근데 자세히 보면 이 식 만들 수 있을 것 같아.
<SYNC Start=1870134><P Class=KRCC>
나 2 log 2의 b 그리고 2분의3 log 2의 a 이 두 값이 같아. 근데 우리 문제에서는 log 2의 a가 분모에 깔려있어. 나 이거 나눠 버리면 되지. 그럼 내가 이 값으로 나눌 거야. log 2의 a로.
<SYNC Start=1885154><P Class=KRCC>
그럼 얘를 나누면서 2 오른쪽으로 넘어갔어. 그러니까 값이 ¾이 돼 주면 되겠다. 그래서 이 필수 유형 문제 한번만 다시 보면 제일 중요한 건 이 기울기였어.
<SYNC Start=1896908><P Class=KRCC>
너희들이 기울기에 대한 정의를 정확하게 공부를 했다면 기울기만 활용해 가지고 계산식 많지 않게 바로 풀어낼 수 있는 문제가 이 필수 유형 문제였지. 이번에는 10번 한번 보자.
<SYNC Start=1911953><P Class=KRCC>
10번은 가장 우리가 문제 풀 때 계산만 활용해서 풀 수 있는 유형의 문제지. 지금 형태 잘 봐 봐. 나 로그하고 지수가 막 섞여 있어. 그럼 이렇게 로그가 지수에 올라가 있던 그 공식 기억나?
<SYNC Start=1925270><P Class=KRCC>
한 번만 더 쓸까? 어떤 공식이었어? a의 log b의 c. 나 이렇게 지수에 로그 들어가 있을 때는 밑하고 진수하고 자리 바꿀 수 있었지. 그래서 식이 c log b의 a 이렇게 쓸 수 있었다.
<SYNC Start=1940834><P Class=KRCC>
그럼 이제 이 성질 활용해서 얘 정리해 보면, 알맹이 먼저 풀어 보자. 나 4하고 ⅓하고 자리 바꿨어. 그랬더니 ⅓ 있었고 그리고 log 2의 4라고 안의 부분이 묶이지.
<SYNC Start=1954113><P Class=KRCC>
그리고 바깥쪽에 뭐 있냐면 log 3의 6분의1 하나 더 있고. 그럼 우리 이거 몇이야? log 2의 4? 그렇지. 이거 2잖아. 그럼 얘 다시 한번 써 보면 식이 3(-²)의 (log 3의 6분의1). 이런 상황이지.
<SYNC Start=1973194><P Class=KRCC>
근데 이게 만약에 너희들이 보기에 3(-²)이 낯설다면 우리 그 성질 한 번 더 쓸 거잖아. 그러니까 처음부터 9분의1로 바꿔도 괜찮아. 그럼 얘를 가지고 내가 9분의1로 이렇게 바꿨어.
<SYNC Start=1985388><P Class=KRCC>
그랬더니 식이 log 3의 6분의1. 나 다시 한 번 이 성질 활용해서 밑하고 진수하고 바꿔 버릴 수 있지. 그럼 밑하고 진수 바꿔 버리면 무슨 일이 일어나냐면 일단 밑이 6분의1로 바뀌었어.
<SYNC Start=1999363><P Class=KRCC>
그리고 이제 고민. 나 log 3의 9분의1이야. 우리 9분의1은 3(-²)이지. 그러니까 이 부분이 뭐로 바뀌어? -². 근데 우리 6분의1이라는 거 6(-¹). 그러니까 6²이어서 결국 36이 나오면 되겠다.
<SYNC Start=2015454><P Class=KRCC>
이 문제는 밑하고 진수하고 바꿀 수 있는 이 성질 활용하는 문제였어. 그리고 중간 중간 계산할 때 진수에 분수 들어 있더라도 내가 밑하고 연관성 있는,
<SYNC Start=2026179><P Class=KRCC>
거듭제곱으로 표현 가능한 진수라면 그거 바로 떨어뜨릴 수 있어야 된다. 이 문제는 정답이 36이었고. 이제 11번 한번 보자. 이 등식을 만족시켜 주는 양수 a의 값을 구해 달라 그랬어.
<SYNC Start=2042766><P Class=KRCC>
등식을 봤더니 뭐가 눈에 보기 불편해? 나 이거 분모에 깔려있고, 이거 분모에 깔려있다. 근데 형태를 봤더니 분의1, 분의1이야. 저게 좀 위로 올라왔으면 좋겠어. 그거 무슨 식일까?
<SYNC Start=2056459><P Class=KRCC>
저 식이 뒤집히면서 위로 올라오는 식. 우리 밑을 정리하는 방법에서 log a의 b. 나 여기서 밑하고 진수 자리 바꾸면 무슨 일이 일어났어? 그렇지. 역수 됐잖아.
<SYNC Start=2068071><P Class=KRCC>
나 이거 뭐하고 똑같냐면 밑하고 진수 자리 바꾸면서 역수 되는 이 식하고 같았었지. 그럼 내가 이거, 이거 보기 싫으니까 다 분모들을 뒤집어서 위로 올려 버리자.
<SYNC Start=2079795><P Class=KRCC>
그러면 식이 어떤 형태가 되냐면, 나 (log 2의 a)분의1이었어. 밑하고 진수 자리 바꾸니까 log a의 2. 괜찮아? 뒤집은 거야. 얘도 마찬가지로 식 뒤집는다. 그럼 형태가 log a의 3.
<SYNC Start=2097538><P Class=KRCC>
다시 한 번, 얘는 사실 이미 머리 위에 올라가 있어. 그러니까 굳이 걔 보지 말고 분모만 위로 올려 보내자. 그럼 얘 뒤집을 거야. 그러니까 log a의 5. 여기에다가 얘가 곱해진 건데 정리 덜 됐지.
<SYNC Start=2111596><P Class=KRCC>
우리 25는 5². 그러니까 2 있는데 그 2가 앞으로 밀려나와. 단, 밑에 있으니까 밑으로 밀려나와. 그래서 ½ 곱해지면서 다시 한번 log 5의 a. 이만큼이었어. 근데 이 전체값이 뭐가 되냐면 1.
<SYNC Start=2130485><P Class=KRCC>
좀 지워지는 거 눈에 보여? 일단 얘는 한 덩어리로 바꿀 수 있을 거고, 이 부분이 지워진다. log a의 5, log 5의 a. 밑하고 진수가 엇갈려. 즉 이 둘은 무슨 관계야? 역수 관계.
<SYNC Start=2143234><P Class=KRCC>
그러니까 싹 지워져. 그럼 이제 숫자 누구만 남았냐면, ½ 혼자 남았으니까 오른쪽으로 넘겨 주면 식 정리할 수 있겠다. 왼쪽 로그 한 덩어리로 만들면 밑이 a로 같으니까 진수끼리 곱해서 6 됐고,
<SYNC Start=2157251><P Class=KRCC>
그리고 오른쪽은 1이었는데 ½ 넘어갔으니까 ½만 남았지. 괜찮아? 그래서 우리 이거 가지고 다시 한번 지수로 고쳐 볼까? 우리 한번 밑은 영원한 밑이었어. a의 얼마? ½제곱.
<SYNC Start=2172141><P Class=KRCC>
근데 그게 몇인 거냐면 6인 거지. 우리 문제에서는 a값 구해 달라 그랬고, 그럼 ½제곱을 없애 주려면 양변에 제곱하면 되겠다. 그래서 a는 6 제곱하니까 36이 되는 거야.
<SYNC Start=2185354><P Class=KRCC>
이 문제 풀려면 너희들이 밑 정리하는 방법 알아야 되고, 특히 밑하고 진수가 자리 바꾸게 되면 역수된다. 이 내용이 되게 중요하게 쓰이는 문제가 11번 문제였어. 그리고 12번 한번 보자.
<SYNC Start=2201512><P Class=KRCC>
이 12번 문제는 낯설지 않지. 이거 맨날 모의고사 보면 하나씩 비슷한 거 꼭 들어 있지 않아? ㈎하고 ㈏에 대한 조건을 주는데 거듭제곱근이 저렇게 종류가 다른 것들이 나와.
<SYNC Start=2213615><P Class=KRCC>
그리고 너희들한테 이 전체값은 1을 만족하고, 이거의 최솟값을 구해 달라 그랬어. 이 문제 같은 경우는 문제 형태는 너희들 눈에 많이 익을 거야.
<SYNC Start=2223713><P Class=KRCC>
근데 막상 다 구하고 나서 마지막 마무리하는 단계에서 조금 옛날 개념이 쓰이는 유형의 문제였지. 정리부터 좀 해 보자. ㈎였어. 우리 이렇게 거듭제곱근 종류 다른 거 나오면 문제 어떻게 풀었어?
<SYNC Start=2239332><P Class=KRCC>
종류 다를 때는? 그렇지. k라는 새로운 문자로 이렇게 정리했었지. 그럼 내가 이 전체값을 k로 잡았다는 얘기는 결국 나 a의, 이거 ½제곱이지. 그게 뭐가 됐어? k. 그러니까 k²으로 고칠 수 있지.
<SYNC Start=2254021><P Class=KRCC>
똑같이 한 번 더. 그럼 b라는 건 결국 k의, b만 쏙 꺼내려면 양변 ³. c는 k의 다섯제곱이 되겠지. 각각에 대한 a, b, c라는 애를 k라는 새로운 문자를 가지고 와서
<SYNC Start=2267577><P Class=KRCC>
이렇게 k에 대한 거듭제곱으로 썼어. 왜냐하면 문자가 너무 많잖아. 나 이렇게 하나의 문자로 정리해야 그대로 소거되면서 문제 풀 수 있겠지.
<SYNC Start=2276399><P Class=KRCC>
그럼 그 성질 활용해서 이 ㈏ 조건 다시 한번 정리해 보자. log 2의 a분의bc였거든. 근데 그 a 대신에 k²이라고 쓸 수 있고, bc라는 거 둘 곱하는 건데 k³, k의 5제곱이니까 k의 8제곱이겠지.
<SYNC Start=2294493><P Class=KRCC>
괜찮아? 다 했어. 그럼 이제 log 2에다가 나 이 부분 볼까. k 8개 있었어, k 2개 있었어. 지수끼리 빼는 거지. k의 6제곱. 근데 이만큼이 뭐가 되냐면 3. 여기까지 됐어?
<SYNC Start=2309772><P Class=KRCC>
그럼 나 이만큼이 3이 된다 그랬다. 최대한 한번 정리해 보자. k에 대해서 예쁘게 나올 수 있게. 우리 k의 6제곱은 결국 밑이 2지. 한번 밑은 영원한 밑이라 그랬어. 2³.
<SYNC Start=2321553><P Class=KRCC>
그러니까 k라는 애가 뭐냐면 2의 (6분의3)제곱. 즉 ½제곱. 그러니까 내가 저 아래 식을 가지고 정리해 봤더니 k라는 애가 2의 ½제곱이라는 걸 구한 거야. 제일 중요한 조건이지.
<SYNC Start=2334691><P Class=KRCC>
왜냐하면 내가 k라는 문자를 값으로 찾은 거니까. 그럼 이제 이 내용 활용해서 문제에서 구하라고 했던 식을 좀 정리해 보자. 우리 문제에서 구하라는 거 다시 한번 읽어 보면 이만큼이야.
<SYNC Start=2346779><P Class=KRCC>
근데 문자 좀 봐 봐. a, m, b, n, c 엄청 많아. 근데 내가 다행히도 이 a, b, c라는 문자는 k에 대해서 정리해 놨지. 그러니까 나 이거 가지고 올 때 k로 다 바꾸면서 가지고 온다.
<SYNC Start=2360628><P Class=KRCC>
앞부분에서부터 log 2였어. 근데 a 대신에 뭐라고 쓸 거냐면 k². 그리고 log 밑이 m이었고 b 가지고 올 건데 그 b라는 애는 k³. 그리고 log 마지막 건 n이었고 c였는데 c라는 건 k의 5제곱.
<SYNC Start=2380422><P Class=KRCC>
그리고 이 전체값은 1. 이런 상황이야. 최대한 정리할 수 있겠지. 여기서 지수를 떨어뜨린 다음 k를 넣어도 되고, 아니면 나 같은 경우는 우리 k가 2의 ½제곱이라는 거 방금 전에 구했잖아.
<SYNC Start=2393963><P Class=KRCC>
그러니까 이 상태에서 바로 집어넣자. 그럼 이거 2의 ½제곱 대입한 거야. 그럼 log 2의, 2의 ½제곱에다가 제곱했어. 그러니까 2. 괜찮아? 나 k에다가 숫자 넣는 중이야. log m.
<SYNC Start=2408471><P Class=KRCC>
근데 우리 k라는 거 2의 ½. 2의 ½의 ³이니까 2분의3. log n. 2의 ½. 그거의 전체 5제곱이니까 2의 2분의5. 근데 이 전체값이 1. 최대한 정리. 나 이거 2의 2니까 1로 없어지고,
<SYNC Start=2425632><P Class=KRCC>
머리 위에 있는 이 지수들 앞으로 데굴데굴 떨어질 거고, 나 얘랑 얘랑 앞으로 쏙 뽑아 보자. 2분의3 그리고 2분의5 이만큼 앞으로 꺼냈어.
<SYNC Start=2437021><P Class=KRCC>
그럼 얘하고 얘는 이미 앞으로 떨어져서 앞으로 꺼냈으니까 남은 거 뭐냐면 얘하고 얘. 결국 log m의 2, log n의 2 여기다가 곱할 거야. 근데 이왕이면, 자세히 봐 봐.
<SYNC Start=2448911><P Class=KRCC>
나 얘하고 얘하고 뭐가 달라? 그렇지. 밑이 달라. 나 밑이 다르면 연산하기 어려워. 근데 밑은 다르지만 뭐는 똑같아? 진수는 똑같아.
<SYNC Start=2459391><P Class=KRCC>
이왕이면 얘를 가지고 올 때 그냥 가지고 오는 게 아니라 밑하고 진수 바꿔 가면서 정리해서 가지고 오자. 얘 그냥 오는 게 아니라 밑하고 진수를 내가 바꿨어. 그러니까 역수 됐겠지. 한 번 더.
<SYNC Start=2472249><P Class=KRCC>
나 이거 가지고 올 때 그냥 가지고 오지 말고 밑하고 진수 바꿔 가면서 가지고 왔어. 대신에 역수 됐겠지. 근데 이만큼이 1인 거야. 좀 느낌 와? 나 이거 4분의15.
<SYNC Start=2485771><P Class=KRCC>
그리고 나 4분의15에다가 이만큼 분모에 깔려있는데 나 저거 분모에 있는 거 싫잖아. 그럼 양변에다 똑같은 거 곱했어.
<SYNC Start=2493718><P Class=KRCC>
그러면 얜 없어지고 오른쪽에 뭐가 남는 거냐면 log 2의 mㆍlog 2의 n만 남겠지. 저 수식을 쭉 정리해 봤어.
<SYNC Start=2502911><P Class=KRCC>
그랬더니 결국 내가 원하는 거, 이걸 만족하는 그런 값을 찾아 주는 게 내 목표인 거야. 근데 최종 목적이 뭐냐면, 문제 한번 읽어 보자. 진짜 내가 원하는 거 이거야.
<SYNC Start=2515815><P Class=KRCC>
log 2의 mn. 나 그거의 최솟값이 궁금해. 잘 생각해 봐. 내가 구한 거 하고 내가 구해야 되는 걸 비교할 거야. 내가 방금 전에 뭘 하나 구했냐면 m하고 n이 누구인지는 모르겠지만
<SYNC Start=2528902><P Class=KRCC>
log 2의 m 그리고 log 2의 n 이 값이 뭐가 됐냐면 4분의15가 됐어. 그리고 우리 문제에서는 뭘 구하라고 했냐면 log 2의 mn의 최솟값. 우리 m하고 n이 같이 있어. 불편하다. 그렇지?
<SYNC Start=2543905><P Class=KRCC>
근데 우리 어떨 때 이렇게 진수끼리 곱하는 거야? 원래 로그끼리? 그렇지. 더하기였을 때. 그럼 이걸 더하기로 다시 쪼개 보면 log 2의 m+log 2의 n.
<SYNC Start=2555823><P Class=KRCC>
그리고 내가 원하는 건 이거의 무슨 값을 찾는 거냐면 최솟값. 이쯤 내가 일부러 쭉 풀어서 썼다면 너희들 눈에 보였으면 좋겠는데. 내가 동그라미로 체크할 테니까 봐 봐.
<SYNC Start=2569017><P Class=KRCC>
내가 만약에 얘를 동그라미 썼고, 이거 세모 썼어. 나 지금 동그라미하고 세모를 더한 거의 최솟값이 궁금하다. 근데 문제에서 뭐 알려줬냐면 동그라미하고 세모를 곱한 값을 알려줬어.
<SYNC Start=2580870><P Class=KRCC>
나 곱한 값을 알고 있고 합의 최솟값이 궁금해. 뭐 떠오르는 거 없을까? 곱하기를 주면서 합의 최솟값을 물어봐. 무슨 식이 생각이 나야 돼? 산술평균, 기하평균 사이의 관계가 생각이 나야 되지.
<SYNC Start=2593894><P Class=KRCC>
우리 이거 1학년 때 배웠던 개념이고, 정말 이 산술, 기하는 아무 이유 없이 중간에 갑자기 툭툭 나와. 그래서 꼭 복습해 놔야 돼.
<SYNC Start=2602088><P Class=KRCC>
저 산술, 기하 식이 뭐였었냐면 각각의 양수인 케이스에 대해서 둘을 더한 것은 크거나 같지. 2배√둘을 곱한 거보다.
<SYNC Start=2610815><P Class=KRCC>
그럼 여기서 합의 최솟값을 물어보면서 곱을 알려줬으니까 식에다가 그대로 한번 넣어 보자. 내가 원하는 log 2의 m 그리고 log 2의 n이라는 그 아이는 2배√두 개 곱한 거.
<SYNC Start=2625742><P Class=KRCC>
근데 그 두 개 곱한 게 몇이었냐면 4분의15. 얘보다 크거나 같지. 근데 우리 √4는 2니까 없어졌어. 결국 이 값은 √15보다 항상 크거나 같아.
<SYNC Start=2636275><P Class=KRCC>
근데 문제에서는 최솟값 구해 달라고 했으니까 √15가 돼 주면 되겠다. 이 문제는 중간까지는, 이 부분 있지. ②번. 여기까지는 너희가 많이 풀어 본 문제의 형태야.
<SYNC Start=2647873><P Class=KRCC>
우리 저렇게 거듭제곱근 종류 주면 k로 치환하고 그 전체값 k라고 잡아서 식 정리하는 건 많이 해 봤어. 근데 그거는 많이 해 봤지만 여기 세 번째 단계에서 곱을 주면서 합의 최솟값을 물어봐?
<SYNC Start=2660215><P Class=KRCC>
그렇다면 나는 양수인 거 확인했으니까 산술, 기하. 이 부분이 좀 낯설었을 것 같아. 산술, 기하 혹시라도 까먹었으면 꼭 다시 한번 정리를 해 놔야 된다.
<SYNC Start=2670154><P Class=KRCC>
그리고 이번에는 우리 지수 함수 한번 보자. 우리 기본적인 지수하고 로그의 정의를 했고 여기서 나오는 건 지수 함수야. 지수에다가 이제 함수라는 개념까지 들어간 부분이지.
<SYNC Start=2684451><P Class=KRCC>
형태 자체는 y=a의 x제곱. 이게 기본 지수 함수. 그리고 기본 지수 함수의 조건을 좀 보자면, 결국 x라는 애가 지수에 들어 있는 게 지수 함수였고.
<SYNC Start=2695094><P Class=KRCC>
우리가 알고 있는 조건, 밑은 0보다 크고 그리고 1은 아니다. 우리 이런 거 알고 있지. 지수 함수는 역시나 함수이기 때문에 제일 중요한 건 그래프였어. 함수만의 특징이잖아.
<SYNC Start=2708028><P Class=KRCC>
그림으로 표현해 낼 수 있다는 거. 근데 뭐에 따라서 그림이 달라지냐면, 그렇지. a값의 부호에 따라서. 그래서 제일 중요한 건 그래프를 그리는 거고,
<SYNC Start=2716971><P Class=KRCC>
그래프를 그리는 일에서 중요한 건 모양이었어. 밑의 범위에 따라서 그래프의 모양이 달라지는데 밑이 1보다 큰지, 그리고 밑이 0보다 크고 1보다 작은지에 따라서 그래프의 형태가 달라졌지.
<SYNC Start=2730774><P Class=KRCC>
밑이 1보다 크다면 자꾸자꾸 커지는 증가였고, 밑이 1보다 작다면 그때는 감소였어. 기본 형태가 항상 (0,1)이라는 점을 지나면서 밑이 1보다 클 때는 증가하는 그래프였고,
<SYNC Start=2744953><P Class=KRCC>
나 만약에 밑이 1보다 작아. 그렇다면 이렇게 작아지는 감소의 그래프였어. 일단 제일 중요한 건 뭐야? 그리고 두 번째 중요한 특징은 뭐냐면 점근선이야.
<SYNC Start=2757752><P Class=KRCC>
이게 지수 함수만의 또 중요한 특징 중의 하나였잖아. 점점 가까워지지만 닿지는 않는 선이 점근선이었지. 근데 그래프를 봤더니 자꾸자꾸 가까워져. 근데 닿지는 않아.
<SYNC Start=2768777><P Class=KRCC>
왜냐하면 0이 될 수 없거든. 밑이 0이 아니니까. 결국 나 누구한테 가까워지고 있냐면 x축에 가까워지고 있지. 점근선은 누구냐면 기본형에 대해서는 x축이야.
<SYNC Start=2780081><P Class=KRCC>
근데 우리 축이 아니라 함수식으로 기억해야 되지. 그래서 함수식으로 치자면 y=0. 우리 지수 함수의 기본형은 항상 (0,1)을 지나고 증가, 감소에 따라서 그래프 모양 달라지고,
<SYNC Start=2792662><P Class=KRCC>
x축, 즉 y=0이라는 점근선을 갖고 있어. 이게 가장 중요한 특징들이었어. 근데 이번에는 이 기본형을 가지고 뭐 할 거냐면, 공부해 본 사람은 알 거야. 기본형 나와, 안 나와? 잘 안 나와.
<SYNC Start=2805270><P Class=KRCC>
뭐가 나오냐면 움직움직 해 놓은 애가 나와. 우리는 함수를 가지고 들어서 움직일 거야. 근데 그렇게 움직이는 방법에는 뭐가 있냐면 첫 번째, 평행 이동.
<SYNC Start=2816992><P Class=KRCC>
그래서 평행 이동이 진짜 중요한 개념이거든. 이쪽 파트에서. 우리 진짜로 한번 평행 이동 시켜 보자. y=a의 x제곱이라는 함수가 있었는데
<SYNC Start=2826865><P Class=KRCC>
내가 걔를 가지고 x축으로 m만큼, y축으로 n만큼 평행 이동 시킬 거야. 우리 평행 이동이라는 거 그래프를 들어 가지고 진짜 이렇게 가로 세로로 움직이는 걸 평행 이동이라고 부르거든.
<SYNC Start=2838783><P Class=KRCC>
근데 그 평행 이동이 식에서는 어떻게 반영이 되냐면, 부호가 반대였지. 식으로 치자면 y=a의 (x-m). -n이었다가 넘어왔어. +n 이렇게 표현이 돼.
<SYNC Start=2851334><P Class=KRCC>
이 식을 보고도 이거 x축으로 +m만큼, y축으로 n만큼 평행 이동했구나. 느낄 수 있어야 돼. 근데 평행 이동에서 진짜 중요한 건 뭐냐면, 모양과 점근선이야.
<SYNC Start=2862716><P Class=KRCC>
우리 점점 커지는 그래프에 대해서 생각을 해 볼게. 나 (0,1) 지나면서 커지는 그래프 한 토막이 있었어. 지수 함수. 근데 내가 얘를 가지고 위아래로 움직여. 즉 y로의 평행 이동.
<SYNC Start=2874750><P Class=KRCC>
좌우로 움직여. x로의 평행 이동. 내가 얘를 위아래로 들어서 움직이고 좌우로 들어서 움직인다고 모양이 바뀌어, 안 바뀌어? 안 바뀌어.
<SYNC Start=2884041><P Class=KRCC>
그러니까 평행 이동을 한다고 그래프의 모양이 바뀌는 게 아니야. 근데 뭐가 바뀌냐면 내가 얘를 가지고 x축으로 평행 이동해. 좌우 점근선 바뀌어, 안 바뀌어? 안 바뀌어.
<SYNC Start=2894880><P Class=KRCC>
근데 들어서 올리는 순간 뭐가 바뀌어? 점근선이 같이 바뀌지. 올라간 만큼 올라가고, 내려오는 만큼 내려와. 그래서 지수 함수에서 중요한 건 y로의 평행 이동이야.
<SYNC Start=2905810><P Class=KRCC>
기본형에서는 x축이었기 때문에 점근선이 y=0이었거든. 근데 평행 이동 시키게 되면 평행 이동 시킨 만큼 점근선이 같이 따라서 움직이는 거야.
<SYNC Start=2916150><P Class=KRCC>
그래서 지수 함수에서의 점근선을 결정해 주는 가장 중요한 요소는 y로의 평행 이동이야. 그리고 두 번째로는 대칭 이동이라는 게 있었지. 우리 대칭 이동이라는 건 뭐였냐면, 이거 반으로 접는 거였어.
<SYNC Start=2933230><P Class=KRCC>
그거로 반 접어 주면 되는데 중요한 건 뭐가 바뀌는지를 기억해야 돼. 식 안에서. 대칭 이동은 총 몇 가지 배웠어? 그렇지. 4가지. 처음에는 x축 대칭, y축 대칭, 원점 대칭, 마지막은 y=x 대칭.
<SYNC Start=2949257><P Class=KRCC>
근데 이렇게 대칭하게 되면 우리 x축으로 대칭하면 위아래가 뒤집히잖아. 그래서 y의 부호가 바뀌었고, y축으로 대칭하면 x의 부호가 바뀌었고, 원점 대칭 시키면 부호가 둘 다 바뀌었고,
<SYNC Start=2961821><P Class=KRCC>
y=x 대칭시키면 x가 y로, y가 x로 바뀌었었지. 대칭 이동하고 평행 이동 같은 경우는 각각 따로 나오기 보다는 저 두 가지가 섞여 있는 문제들이 많이 나와.
<SYNC Start=2974454><P Class=KRCC>
다음 시간에 이 지수 함수 가지고 문제 풀 거니까 지수 함수의 기본형과, 그리고 평행 이동, 대칭 이동된 상태. 그거 꼭 공부해 와야 된다. 오늘 뭐 했나 정리 한번 좀 해 보자.
<SYNC Start=2987852><P Class=KRCC>
우리 오늘은 로그에 대한 문제들이 좀 많았었지. 처음에 뭐 했냐면 로그 했어. 지수에서 자리만 잘 바꿔 주는 게 로그였고, 로그가 정의되기 위한 조건이 중요했다.
<SYNC Start=2999729><P Class=KRCC>
그리고 두 번째로는 우리 로그 계산은 밑이 같을 때만 가능했어. 근데 다행히도 얼마든지 내 마음대로 밑을 만들 수 있었지. 그래서 로그 밑 정리하는 방법 알고 있어야 되고.
<SYNC Start=3010563><P Class=KRCC>
우리 다음 시간에는 지수 함수 가지고 조금 더 문제 풀고 공부해 보자. 오늘도 너무 고생 많았고, 3강에서 보자. 안녕.
<SYNC Start=3019874><P Class=KRCC>
꿈을 전달하는 꿈틀이의 2일 던던. 연유라떼에 연유 반만 넣기. 5000보 걷기. 수능완성 10분 넘게 펴 놓기.
<SYNC Start=3040053><P Class=KRCC>
&nbsp;
</BODY>
</SAMI>