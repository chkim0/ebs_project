<SAMI>
<HEAD>
<TITLE>(주)기록법인상생 자막 2015</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=10263><P Class=KRCC>
안녕하세요. 오늘은 내가 좋아하는 김미묘 작가님 그림 중에 하나를 좀 가지고 왔거든? 나 평소에 이런 일러스트 보는 거 되게 좋아한단 말이야.
<SYNC Start=20820><P Class=KRCC>
근데 이 행곰이라는 애가 있는데 내용 보면 되게 귀여워. 처음에 행곰이가 막 이렇게 의욕 넘치게 ‘난 할 수 있다. 세상아 덤벼라.’ 막 이랬어.
<SYNC Start=30298><P Class=KRCC>
근데 온갖 고난과 시련과 위기와 시험이 저렇게 몰려오는 거야. 그랬더니 행곰이가 당황해서 땀을 흘리더니 ‘조금만 덤벼라.’ 이렇게 조금 약해졌다.
<SYNC Start=41327><P Class=KRCC>
이거 보면서 무슨 생각이 들었었냐면 나도 평소에 참 지나고 나면 별거 아닌데 그때 당시에는 정말 이렇게 세상이 무너질 것처럼 너무너무 그 상황 속에서는 크게 느껴지고
<SYNC Start=53889><P Class=KRCC>
너무 어마어마한 일처럼 느껴지잖아. 그러니까 그 상황 안에 빠져 있을 땐 그런 것 같아. 나만 하더라도 오늘이 이제 너희들하고 만나는 첫날이다 보니까 막 온갖 걱정이 된다?
<SYNC Start=65464><P Class=KRCC>
‘말 더듬으면 어떡하지?’ ‘계산 실수하면 어떡하지?’ ‘평소보다 이렇게 수업할 때 혹시 내용을 빼먹으면 어떡하지?’ 막 그런 고민과 걱정들이 잔뜩 된단 말이야.
<SYNC Start=76500><P Class=KRCC>
근데 그때 당시에는 이렇게 커다랗게 느껴지지만 사실 지나고 보면 정말 별거 아닌 일들이 많잖아.
<SYNC Start=83491><P Class=KRCC>
그래서 어려운 일이지만 나한테도 힘든 일이지만 좀 너희들이 그렇게 힘들 때에는 특히나 더 ‘그래, 이거 뭐 못한다면 어떻게 되겠어?’ 그런 좀 가벼운 마음을 가지고 볼 수 있었으면 해서
<SYNC Start=96772><P Class=KRCC>
이 그림을 좀 준비를 한 거야. 그래서 우리 지난 시간에 처음으로 거듭제곱근하고 지수라는 내용을 봤었고 우리 오늘은 뭘로 시작을 할 거냐면 로그로 한번 시작을 해 보자.
<SYNC Start=107898><P Class=KRCC>
근데 이 로그라는 개념은 시작이 누구냐면 지수에서 시작을 한다? 어떤 애를 가지고 x번 곱했어. 그랬더니 3이 됐대. 원래 이런 숫자는 존재하지 않았었지?
<SYNC Start=119433><P Class=KRCC>
근데 이런 숫자가 존재한다고 굳이 만들어 냈지, 수학자들이? 수학자들은 누구는 있고 누구는 없고 그런 거 싫어한다 그랬잖아.
<SYNC Start=127546><P Class=KRCC>
그래서 얘를 만족하는 그런 x를 우리 뭐라고 부르기로 했냐면 log₂3이라고 부르기로 했어. 그래서 저 로그라는 게 어마어마한 게 아니라
<SYNC Start=137941><P Class=KRCC>
진짜로 얘를 만족시켜 주는 그런 하나의 무리수를 만들어 낸 거다? 그래서 로그의 시작은 지수이고 지수하고 로그는 되게 비슷한 점도 차이점도 많아.
<SYNC Start=148381><P Class=KRCC>
그래서 첫 번째로 a를 가지고 x번 곱했더니 b가 됐어. 우리 여기에서 시작. 여기에서 위치만 잘 바꿔 준 거. 머리 위에 있는 지수를 똑 떨어뜨려 주는 게 로그야.
<SYNC Start=161080><P Class=KRCC>
그래서 여기에서 우리 각각에 대한 문자 정의부터 한번 해 볼게. 이 안에 문자 몇 개 들어 있어? 그렇지. a, x, b 3 개 들어 있지. 그래서 a랑 x랑 b가 있었어.
<SYNC Start=172377><P Class=KRCC>
근데 이 a는 이름이 뭐였었냐면 밑이었지. 그리고 밑에 대한 범위는 뭐였냐면 양수였어. 지난 시간 내용 기억나? 우리가 지수를 가지고 확장시키면서 반대로 밑의 범위는 점점점 줄어들었지?
<SYNC Start=186457><P Class=KRCC>
그래서 원래 밑의 범위는 양수지만 여기서 또 하나 무슨 일이 생기냐면 뭘 제외시키냐면 1을 제외시킨다? 우리 a라는 애가 1이 돼 버리면 1은 몇 번 곱하든지 간에 무조건 1이잖아.
<SYNC Start=199507><P Class=KRCC>
그래서 그걸 좀 막아 주기 위해서 1이라는 애는 빼 줄 거야. 그리고 x라는 애는 이름이 지수였어. 그리고 범위는 우리가 실수까지 확장을 시켰지.
<SYNC Start=209981><P Class=KRCC>
그리고 b라는 애는 중요하지 않아서 이름이 없었거든? 근데 범위만 좀 생각해 보면 우리 a라는 애가 양수야. 특히 1이라는 양수였어. 1이 아닌 양수를 몇 번 곱해도 음수가 될 수는 없지?
<SYNC Start=223995><P Class=KRCC>
그래서 자연스럽게 비는 이름은 없었지만 적어도 양수라는 범위가 있었어. 근데 이 내용에서 자리만 바꿔 준 게 로그였어.
<SYNC Start=233562><P Class=KRCC>
그래서 머리 위에 있는 지수를, 이거 너무 무거워서 떼굴떼굴 뚝 떨어졌어. 그래서 그 x를 로그 뭐라고 고치냐면 우리 한 번 밑은 영원한 밑이야.
<SYNC Start=243772><P Class=KRCC>
그래서 a라는 애가 그대로 a라고 따라오고 그리고 b 이렇게 수식 쓸 거야. 그래서 저걸 만족시켜주는 x값을 log a의 b라고 불렀어.
<SYNC Start=253026><P Class=KRCC>
그래서 이 수식 그대로인데 아무래도 로그에 대한 식으로 바뀌었으니까 이름들이 조금씩 달라지지? 그래서 첫 번째로는 a, x, b 이거 그대로 한번 살펴보자.
<SYNC Start=264365><P Class=KRCC>
그래서 a라는 애를 뭐라고 부르냐면 지수에서 하고 똑같이 밑이라고 부르고 그리고 범위 자체는 양수이면서 1은 똑같이 제외시킬 거야. 왜냐하면 자리만 바꾼 거니까.
<SYNC Start=276153><P Class=KRCC>
그리고 우리 x라는 애는 원래 지수였거든? 근데 로그로 넘어오면서는 이름이 없었어. 그래서 범위만 존재하는데 얘는 그대로 실수. 근데 이제 b가 중요하다?
<SYNC Start=287217><P Class=KRCC>
우리 b라는 애는 지수에서는 이름이 없었어. 근데 로그로 넘어오면서는 이 b를 뭐라고 부르냐면 진수라고 부르기도 했지? 그리고 그 진수는 범위가 뭘까?
<SYNC Start=298938><P Class=KRCC>
응. 지수에서 그대로 따라와야 되니까 양수인 거지. 그래서 여기서는 밑하고 진수의 범위를 만족할 때를 우리가 ‘로그가 정의된다.’라는 표현을 쓰게 될 거야.
<SYNC Start=310418><P Class=KRCC>
그래서 a라는 밑, b라는 진수. 그 이름하고 조건까지 잘 기억을 해 놔야 되고 그리고 또 하나는 방금 전에 내가 설명한 이 내용은 기본 로그에 대한 정의였어.
<SYNC Start=322252><P Class=KRCC>
근데 그 로그 중에서도 너무너무 특별한 애가 하나 있는데 걔 이름이 상용 로그이다? 상용 로그. 그래서 이 상용 로그는 다른 게 아니라 밑이 1인 로그를 우리가 상용 로그라고 불러.
<SYNC Start=334062><P Class=KRCC>
그래서 log 10의 a 이런 게 상용 로그야. 근데 우리 수학에서는 자주 나오는 애들은 생략해서 쓰거든? 예를 들면 뭐 있어? 우리 생략하는 기호. 우리 3¹을 뭐라고 쓰지? 3이라고 쓰지.
<SYNC Start=349920><P Class=KRCC>
또 우리가 지난 시간에 했었던 ²√5 이런 거 우리 제곱근 표시 안 하고 뭐라고 썼어? 그냥 √5라고 썼지.
<SYNC Start=358497><P Class=KRCC>
그래서 이런 애들처럼 이 상용 로그는 워낙에 많이 쓰기 때문에 밑인 10을 생략해서 그냥 log A라고 부를 거야. 상용 로그는 다른 게 아니라 밑인 1인 로그이고
<SYNC Start=369879><P Class=KRCC>
앞으로 너희들이 문제 풀 때 만약에 밑이 안 써 있어. 그거 무슨 뜻? 10이 생략돼 있다는 뜻인 거야. 그래서 로그에 대한 기본 정의였고
<SYNC Start=379003><P Class=KRCC>
이번에는 그 로그를 가지고 계산하는 방법을 좀 한번 보자. 내가 이름을 로그의 구구단이라고 붙였어.
<SYNC Start=387085><P Class=KRCC>
그래서 정말로 우리가 초등학교 때 배웠던 구구단만큼이나 너희들이 좀 바로바로 볼 수 있어야 되는 게 이 로그에 대한 성질이야. 얘를 알아야지만 우리가 로그로 계산할 수 있다.
<SYNC Start=398354><P Class=KRCC>
첫 번째는 진수가 1이었어. 우리 이럴 때는 로그 값이 무조건 0이야. 근데 왜 이런 식이 나오냐면 이거 다시 한 번 지수로 좀 바꿔 볼까? 우리 한 번 밑은 영원한 밑이라 그랬지?
<SYNC Start=411559><P Class=KRCC>
그럼 식으로 바꿔 보면 a의 0제곱이 되고 우리 a의 0제곱은 몇이야? 1이잖아. 그래서 로그하고 지수는 왔다 갔다 하기 때문에 지수에서의 정의를 가지고 이렇게 바뀐 식들이야. 전부.
<SYNC Start=425142><P Class=KRCC>
여기 나오는 성질들이. 그래서 두 번째로는 밑하고 진수 같았어. 우리 이럴 때에는 로그 값이 항상 1이었고. 밑이 같은 두 로그가 있었어. 근데 그걸 어떻게 했어? 더했어.
<SYNC Start=437747><P Class=KRCC>
그럴 때에는 밑은 그대로 유지되면서 진수끼리를 곱하지. 그럼 그거하고 비교해서 ⑷번 한번 볼까? 이번에는 밑이 같은 두 로그를 뭐 했어? 그렇지. 뺐어.
<SYNC Start=451008><P Class=KRCC>
더했을 때 곱했어. 그럼 뺐을 때에는? 나누겠지. 그래서 식이 log a의 N분의M. 그래서 여기까지가 기본 내용들인데 얘를 가지고 조금 더 업그레이드된 성질들이 있어.
<SYNC Start=464986><P Class=KRCC>
⑸번하고 ⑹번. 그래서 ⑸번 보면 지금 뭐가 좀 생겼어? 진수에 뭐가 달려 있어? 그렇지. 이렇게 제곱들이 달려 있다? 우리 저렇게 머리 위에 있는 거 너무 무거워서 뚝 떨어지기로 했지?
<SYNC Start=479388><P Class=KRCC>
그래서 k가 떼굴떼굴 떨어져서 앞으로 튀어나오고 그리고 log a의 M 이렇게 정리할 수 있지. 그리고 여섯 번째 거. 우리 여기서는 지금 지수에 로그가 들어가 있다?
<SYNC Start=492740><P Class=KRCC>
근데 밑하고 로그에 있는 진수하고 자리 바꾸는 게 가능해. 그래서 이 a하고 c하고 자리 바꿔서 어떻게 쓸 수 있냐면 c 그리고 log b의 a 이런 식으로 정리 가능.
<SYNC Start=505329><P Class=KRCC>
그래서 밑이랑 로그의 진수랑 자리 바꿀 수 있는 거야. 그래서 얘를 가지고 어떤 유형들의 문제들이 나오냐면, 10번 한번 볼게. 두 양수 a, b라는 애가 있었어.
<SYNC Start=518395><P Class=KRCC>
첫 번째로는 log₂(a+4b). 이만큼이 4였다? 여기까지 좀 정리를 해 보자. 지금 이만큼이 4가 된다 그랬어. 항상 1이 기준이야. 1 만든다고 생각해 봐.
<SYNC Start=531200><P Class=KRCC>
그럼 밑이 지금 2니까 이 전체 값이 1이 되기 위해서는 저 네모가 뭐가 돼야 될까? 그렇지. 2가 돼 주면 되지?
<SYNC Start=539169><P Class=KRCC>
그래서 a+4이라는 애가 있었는데 저 전체 값을 1로 만들려면 얘가 2가 돼 주면 된다? 근데 거기서 끝나는 게 아니라 내가 원하는 건 4야.
<SYNC Start=549627><P Class=KRCC>
그러니까 2⁴이 되어 주면 4 뚝 떨어지면서 1 되서 없어지고 전체 값 4 되는 거지? 그래서 얘를 봤을 때 지수 식으로 고치거나 그 단계 거치지 말고 나 이렇게 좀 바로 고칠 수 있어야 돼.
<SYNC Start=563159><P Class=KRCC>
그래서 a+4가 지금 16이었어. 똑같이 한 번 더. 이번에는 log₂a 그리고 log₂b야. 이번에는 뭐가 똑같아? 그렇지. 밑이 똑같아. 밑이 똑같은 두 로그를 더했어.
<SYNC Start=579969><P Class=KRCC>
그럴 때는 진수끼리 뭐 하기로 했어? 그렇지. 곱하기로 했지. 그래서 log₂ab가 됐어. 근데 얘가 몇이냐면 다시 한 번 4인 거지.
<SYNC Start=590403><P Class=KRCC>
그럼 여기에서 이제 ab라는 애는 밑 기준 맞춰야 되니까 2. 즉 2⁴. 그래서 뭐가 되냐면 16이 되는 거지. a+4b 값 구했고 그리고 a, b 2개의 곱까지 구했어. 근데 최종 목표가 뭐지?
<SYNC Start=607100><P Class=KRCC>
이거 좀 모양 볼 수 있어야 되는데 우리 a²+16b² 이 내 목표야. 근데 내가 쟤는 모르지만 뭐는 아냐면 a+4b이는 알고 있다? 그럼 쟤를 가지고 a+4b라는 애가 나올 수 있도록 한번 고쳐 보자.
<SYNC Start=622764><P Class=KRCC>
이 식 다시 쓰면 a²이고 16b²은 누구의 제곱일까? 그렇지. 4b의 제곱이지. 이렇게. 여기까지 돼? 그럼 얘를 가지고 덩어리로 보면 앞에 거 제곱 더하기 뒤에 거 제곱.
<SYNC Start=637987><P Class=KRCC>
우리 이거 완전 제곱식에서 해 봤었지. 그럼 얘는 결국 a+4b라는 애를 전체 제곱했어. 왼쪽, 오른쪽 완전 다르지? 이 안에 뭐가 더 들어가 있어? 2 어쩌구가 더 들어가 있어.
<SYNC Start=651007><P Class=KRCC>
그거 뭐 해 줘야 돼? 다시 한 번 빼 줘야 되지. 그래서 2배에 앞에 거, 뒤에 거까지 곱해 줘야겠다. 그럼 이제 애 가지고 식만 대입해 보면 a+4인데 16이었어.
<SYNC Start=662976><P Class=KRCC>
16² 마이너스. 2하고 a하고 4하고 b야. 그래서 숫자끼리만 먼저 곱하니까 8. 그리고 ab 나오는데 그 값이 16이었어. 얘만 묶어 낼까? 그래서 16으로 묶어 내면 16-8.
<SYNC Start=678650><P Class=KRCC>
결국 8×16 나와 주면 되지? 그러니까 정답이 128이 나와 주면 되겠다. 그래서 10번 문제 같은 경우는 너희들이 기본적으로 로그에 대한 정의 알고 있어야 되고
<SYNC Start=690032><P Class=KRCC>
로그에 대한 성질을 알아야지만 풀 수 있는 문제가 이 10번 문제였어. 그리고 이번에는 여기 진짜 중요한 내용이야. 제목이 뭐라고 써 있어?
<SYNC Start=702583><P Class=KRCC>
내 마음대로 밑 만들기. 우리 앞에서 로그의 구구단이라 그래서 계산하는 방법을 했지? 근데 그 로그의 구구단이 항상 쓸 수 있는 게 아니었어. 우리 언제만 연산이 가능?
<SYNC Start=714524><P Class=KRCC>
그렇지. 밑이 같을 때에만. 그래서 밑이 같을 때에만 연산을 할 수 있기 때문에 되게 번거로워. 근데 다행히도 이 로그라는 애는 얼마든지 내 마음대로 밑을 바꿔 줄 수 있다?
<SYNC Start=726044><P Class=KRCC>
그래서 밑 변환 공식이라는 표현을 쓰는 게 이쪽 파트 내용이지? 첫 번째로는 아예 새로운 밑으로 바꿀 거야. 원래는 밑이 a였어. 근데 얘를 가지고 c로 바꾸고 싶어.
<SYNC Start=738114><P Class=KRCC>
그래서 그럴 때에는 밑이 밑으로 왔었지. 그래서 c로 바꾸면서 log c의 a 그리고 log c의 b. 괜찮아? 지금 식 형태 보면 밑이 분모로, 진수가 분자로.
<SYNC Start=755081><P Class=KRCC>
그래서 밑에 있던 게 밑으로 오고, 위에 있던 게 위로 올라가는 거야. 근데 여기서 이것만 할 수 있으면 안 되고 이 반대 방향도 할 수 있어야 돼.
<SYNC Start=763812><P Class=KRCC>
그래서 이렇게 밑이 같을 때에는 하나씩 없애면서 분모에 있던 게 밑으로, 분자 있던 게 진수로. 그렇게 바꿀 수 있다. 그리고 그다음에는 밑하고 진수하고 둘이 자리 바꾸는 케이스 생겨.
<SYNC Start=777548><P Class=KRCC>
그래서 이럴 때는 무슨 일이 있었냐면 밑하고 진수 자리 바꾸면서 역수가 됐었지? 그리고 이제 마지막 케이스. 밑에도 이렇게 뭔가 제곱되어 있고 진수에도 제곱되어 있어.
<SYNC Start=790056><P Class=KRCC>
우리 진수에 제곱되어 있는 건 아까 전에 봤지? 너무 무거워서 떼굴떼굴 떨어진다? 근데 얘만 그런 게 아니라 밑에 있는 제곱도 앞으로 밀려나와.
<SYNC Start=798884><P Class=KRCC>
대신에 쭉 앞으로 밀려나올 때 위아래로 밀려나와. 그래서 어떤 식이 나오냐면 m분의n에다가 log a의 b 이렇게 밀려나오지.
<SYNC Start=809360><P Class=KRCC>
그래서 식의 형태 봤을 때 우리 로그라는 건 밑이 같을 때에만 연산이 가능. 대신에 그 밑을 얼마든지 내 마음대로 이렇게 바꿔 줄 수 있어.
<SYNC Start=818503><P Class=KRCC>
얘를 활용해서 내용을 좀 보자. 14번이야. 이런 문제 봤을 때 ‘x들이 왜 이렇게 많지?’ 그런 생각이 들 거야. 근데 지금 저 상태로 계산이 돼, 안 돼? 응. 계산이 안 돼.
<SYNC Start=833124><P Class=KRCC>
우리 로그는 언제만 계산이 가능? 밑이 같을 때에만. 그럼 얘를 보자마자 무슨 생각이 들어야 돼? ‘나 밑 좀 맞춰야겠다.’ ‘밑을 하나로 만들어야겠다.’는 생각이 들어야 되지.
<SYNC Start=845741><P Class=KRCC>
근데 아예 새로운 밑으로 바꿀 수도 있지만 이왕이면 식 안에 자꾸 자꾸 반복되는 문자들이 있어. 그래서 그런 애로 바꾸면 식이 조금 더 간단해진다?
<SYNC Start=855670><P Class=KRCC>
지금 여기에 나오는 숫자나 문자 중에서 가장 많이 등장하는 게 x라는 애지? 그래서 나는 밑을 바꿀 건데 밑을 x로 통일시킬 거야.
<SYNC Start=865548><P Class=KRCC>
그럼 이제 첫 번째 식부터. log x의 2였어. 얘는 이미 x니까 더 이상 정리할 게 없지? 다음 거. 얘를 밑을 x로 만들고 싶어. 밑을 x로 만들겠다는 얘기는 진수였던 애가 밑으로 오겠다는 얘기야.
<SYNC Start=880246><P Class=KRCC>
우리 이렇게 위아래 바꿀 때에는 역수 취해 주는 거지. 따라서 뭘로 써 줄 수 있냐면 log x의 3. 그리고 얘 잘 봐야 된다. 이거 지금 밑 없다. 무슨 뜻이야? 우리 했는데, 이렇게 밑 없는 거.
<SYNC Start=895423><P Class=KRCC>
그렇지. 상용 로그. 이거 지금 10 정리되어 있는 거지? 10이라는 애가 생략되어 있는 거지? 그럼 이렇게 생략되어 있을 때에도 내 마음대로 맞출 수 있었지?
<SYNC Start=905441><P Class=KRCC>
그래서 분모에 있는 게 밑으로 온다 그랬어. 그래서 다시 한 번 써 보면 log x의 5. 그래서 아까는 계산이 안 됐는데 지금은 이제 연산이 가능. 그래서 지금 전부 다 밑이 x로 같았어.
<SYNC Start=918738><P Class=KRCC>
밑이 같은 로그들을 더했다? 그러면 진수끼리는 뭐 해야 될까? 전부 곱할 수 있지. 다시 썼더니 log x에다가 2하고 3하고 5하고 곱했어. 그러니까 30.
<SYNC Start=932348><P Class=KRCC>
근데 이만큼이 뭐가 되냐면 2분의1이 된다 그랬어. 얘 가지고 지수 식 써 볼까? 결국 한 번 밑은 영원한 밑이라 그랬지? x의 (2분의1)제곱. 그게 지금 몇인 거냐면 30.
<SYNC Start=945591><P Class=KRCC>
이제 문제 끝까지 한번 읽어 보자. 만족시켜 주는 양수 x의 값 구해 달래. 그럼 얘를 가지고 내가 x의 값 구해야겠다는 얘기는 저 2분의1을 없애야 되는데
<SYNC Start=955850><P Class=KRCC>
2분의1을 없애기 위해서는 양변을 제곱해 주면 되는 거지. 그래서 30에 제곱이 되니까 결국 정답은 900이 나와 주면 되겠다.
<SYNC Start=966605><P Class=KRCC>
그래서 이런 문제 풀기 위해서는 일단 밑 통일부터. 그리고 밑을 가지고 하나로 맞출 때에는 자꾸 자꾸 반복되는 숫자나 문자로 맞추게 되면 이렇게 식이 훨씬 더 간단해져.
<SYNC Start=978041><P Class=KRCC>
그래서 그렇게 로그를 활용해 준 문제가 14번 문제였고 우리 이번에는 지수 함수 한번 보자. 그래서 이제 이쪽 파트에서 드디어 함수에 대한 내용이 시작이 된다?
<SYNC Start=990594><P Class=KRCC>
우리 지수 함수부터 정리를 좀 해 볼 텐데 기본형이 어떻게 생겼지? 지수 함수의 기본 형태? 그렇지. y=a^x. 그래서 이렇게 생긴 애들을 우리가 지수 함수라고 불러.
<SYNC Start=1004087><P Class=KRCC>
즉 지수에 x값 들어 있는 애들을 우리가 지수 함수라고 얘기를 한다. 근데 우리가 배웠던 그 지수 함수는 밑의 범위가 양수이면서 그리고 1은 아니었지?
<SYNC Start=1015606><P Class=KRCC>
그래서 저 범위를 가지고 그래프로 정리를 해 보면 양수니까 0보다 컸어. 그리고 1이 아니라 그랬으니까 구멍 뻥. 그럼 영역이 2개로 쪼개진다?
<SYNC Start=1026951><P Class=KRCC>
그래서 쪼개지는 영역을 좀 보면 이 안쪽에 하나가 나오고 바깥쪽에 하나가 나와. 그래서 밑의 범위에 따라서 그래프의 형태가 달라졌지?
<SYNC Start=1036573><P Class=KRCC>
0보다 크고 1보다 작은지 그리고 1보다 큰지에 따라서 그래프의 모양이 완전 달라졌다? 그래서 그 케이스 한번 나눠 보자. 그래서 첫 번째로 어떤 케이스가 있었어?
<SYNC Start=1049488><P Class=KRCC>
응. 1보다 커. 근데 우리가 얘를 가지고 생각을 해 보더라도 예를 들면 1보다 큰 숫자 5 같은 애야. y= 5^x이야. 우리 그런 애들은 곱할수록 점점점점 커지지?
<SYNC Start=1061610><P Class=KRCC>
그래서 어떤 형태를 가졌었냐면 증가하는 그래프가 등장을 했지? 이렇게. 그래서 밑의 범위가 1보다 클 때는 자꾸 자꾸 커지는 증가 상태의 그래프였어.
<SYNC Start=1072509><P Class=KRCC>
그리고 또 하나의 특징이 x값이 0이야. 우리 지수가 0일 때에는 무조건 1이었지? 그래서 (0, 1)이라는 점을 지났어. 이렇게. 그럼 반대로 밑의 범위가 0보다 크고 1보다 작아.
<SYNC Start=1085914><P Class=KRCC>
2분의1 같은 애야. 우리 그런 2분의1 같은 애는 곱할수록 점점점점 작아진다? 근데 작아지지만 음수가 되진 않잖아. 뚫고 내려오는 건 아니지.
<SYNC Start=1096382><P Class=KRCC>
그래서 그래프가 어떻게 생겼냐면 점점점점 작아지는 이런 형태의 그래프가 나왔어. 언제였어? 그렇지. 밑의 범위가 0보다 크고 1보다 작을 때.
<SYNC Start=1107270><P Class=KRCC>
그리고 x가 커짐에 따라서 y값은 작아지는 이런 형태를 우리가 뭐라고 얘기했냐면 감소하는 그래프라고 얘기를 했었지.
<SYNC Start=1115698><P Class=KRCC>
그리고 얘도 마찬가지로 x가 0이었을 때 그 지수 값이 전체가 0이 되기 때문에 1이라는 값을 가졌었지? 그래서 이 그래프들에 대해서 공통적인 특징이 있었어. 첫 번째로는 뭐가 있었어?
<SYNC Start=1129048><P Class=KRCC>
항상 어디를 지나? 그렇지. (0, 1)을 지나. 첫 번째, (0, 1)을 지난다. 그리고 두 번째, 우리 이 지수 함수 그래프에서 제일 중요한 건 모양이다.
<SYNC Start=1140515><P Class=KRCC>
그리고 그 모양을 결정해 주는 건 누구였냐면 밑의 사이즈였어. 그래서 밑의 사이즈에 따라서 그래프의 개형이 두 가지로 달라져. 하나는 점점점 커지는 증가, 하나는 점점점 작아지는 감소.
<SYNC Start=1155046><P Class=KRCC>
그래서 자꾸 자꾸 커질 때의 범위가 뭐였었냐면 밑이 1보다 클 때였고 자꾸 자꾸 작아질 때는 밑이 1보다 작고 0보다 큰 케이스였지. 그리고 또 하나의 특징이 너무너무 중요한 이름이야.
<SYNC Start=1168894><P Class=KRCC>
우리 그래프에서 어떤 형태가 있었냐면 그림 한 번만 다시 보자. 얘가 점점점점 작아진다? 근데 자꾸 자꾸 자꾸 작아지는데 뚫고 내려와, 안 내려와? 안 내려와.
<SYNC Start=1180361><P Class=KRCC>
점점점 가까워지지만 닿지는 않아. 우리 그거 세 글자 뭐라고 불렀어? 그렇지. 점근선이라고 불렀지. 점근선.
<SYNC Start=1188351><P Class=KRCC>
그래서 지금 누가 점근선이냐면 x축이 점근선이고 우리 x축의 함수 식 이름은 뭐였어? 그렇지. y=0이었어. 그래서 기본 함수에 대해서는 y=0이라는 이런 점근선을 가져.
<SYNC Start=1200390><P Class=KRCC>
이게 지수 함수에서의 기본 형태였지? 근데 지금 내가 쓴 거 완전 기본형의 얘기이고 우리 문제 풀어 봐서 알지만 기본형이 나와, 안 나와? 잘 안 나와.
<SYNC Start=1211865><P Class=KRCC>
그래서 뭐 해 놓은 형태가 나오지? 그렇지 변형시켜 놓은 형태. 그래서 내가 주로 이쪽에서는 움직움직해 놓은 상태라는 표현을 쓰거든?
<SYNC Start=1221462><P Class=KRCC>
그래서 첫 번째 움직움직 형태는 뭐가 있었냐면 그래프를 들어서 옮기는 평행 이동이라는 게 있었어. 그래서 y=a^x이라는 그 함수를 가지고 평행 이동시킬 거야.
<SYNC Start=1233350><P Class=KRCC>
그래서 x축으로 m만큼 y축으로 n만큼 평행 이동시켰어. 우리 평행 이동이라는 거 식에다가 대입할 때는 부호가 반대로 드러났었지? 그래서 y-n=a^(x-m).
<SYNC Start=1247841><P Class=KRCC>
그래서 조금 더 예쁘게 쓰면 y=a^(x-m)+n이라고 써 줄 수 있어. 항상 우리가 그래프 그릴 때 이 지수 함수에서 제일 중요한 건 모양하고 점근선이야.
<SYNC Start=1259847><P Class=KRCC>
그럼 이제 이 그래프에서 어떻게 점근선이 바뀌는지를 한번 보자. 맨 처음에는 y=a^x이었어. 증가한다고 생각하고 그래프 그릴게. 그럼 증가하는 그래프가 하나가 있었고.
<SYNC Start=1271983><P Class=KRCC>
기본형에 대해서는 점근선이 x축이야. 근데 이 그래프를 x축으로는 아무리 평행 이동시켜 봐야 점근선에 변화가 없어.
<SYNC Start=1281537><P Class=KRCC>
근데 내가 이 그래프를 위아래로 잡아 내리는 순간 위로 올리면 점근선 같이 올라가고, 아래로 내리면 점근선 같이 내려오지. 즉 y축으로의 평행 이동은 점근선을 바꿔 준다.
<SYNC Start=1293632><P Class=KRCC>
그래서 기본형에 대해서는 맨 처음에 점근선이 x축이었어. 즉 함수식으로 얘기하자면 y=0이었어. 근데 그 y=0이었던 애가 y축으로 평행 이동시키는 만큼 점근선이 같이 움직이지?
<SYNC Start=1307631><P Class=KRCC>
n만큼 평일 이동시켰으니까 y=n으로 점근선이 바뀌는 거야. 그래서 기본형은 잘 안 나와. 반드시 이렇게 움직움직해 놓은 상태가 나오니까 꼭 평행 이동 부분 정리해 놓고.
<SYNC Start=1321165><P Class=KRCC>
그리고 두 번째 움직움직은 뭐였어? 그렇지. 대칭 이동. 근데 우리 그런 대칭 이동은 종류가 몇 개 있었을까? 원래는? 그렇지. 원래는 대칭 이동을 우리가 4가지 배웠어.
<SYNC Start=1332970><P Class=KRCC>
x축, y축, 원점, y=x. 근데 이 지수 함수에서는 중요한 형태가 뭐냐면, y=a^x이라는 애가 있었다? 근데 얘를 가지고 y축으로 대칭 이동을 시킬 거야.
<SYNC Start=1345781><P Class=KRCC>
우리 대칭 이동은 내가 움직이는 거랑 반대로 바뀌었지? 그래서 y축으로 대칭 이동을 시키게 되면 x의 부호가 바뀌었어. 근데 우리 음수 지수 무슨 뜻? 음수 지수?
<SYNC Start=1358580><P Class=KRCC>
그렇지. 분수였다. 역수였잖아. 그래서 얘가 (a분의1)^x으로 나와. 그래서 y=a^x이랑 y=(a분의1)^x이랑 그 둘은 무슨 관계냐면 y축 대칭 관계야.
<SYNC Start=1372671><P Class=KRCC>
그래서 우리가 맨 처음에 했던 증가, 감소 그 그래프가 이렇게 증가하는 애가 나왔을 때 완전 밑이 정확하게 이렇게 역수 관계라면 y축으로 톡 접은 이런 그림의 형태가 나왔던 거야.
<SYNC Start=1386874><P Class=KRCC>
그래서 평행 이동하고 대칭 이동 이 개념까지는 좀 같이 정리를 해 놓자. 그래서 얘를 가지고 정말 자주 나오는 형태의 문제가 이 17번이지.
<SYNC Start=1397473><P Class=KRCC>
함수가 하나 있었어. 근데 특정 사분면을 지나거나, 지나지 않거나. 우리 저런 문제 진짜 많이 나왔었다? 일단 쟤 한번 원래식으로 움직여 보자. 지금 이미 기본형이 아니야.
<SYNC Start=1410820><P Class=KRCC>
이런 그래프가 있었어. 근데 저 그래프를 가지고 뭐 했냐면 x축으로 m만큼 평행 이동을 시켰어. 근데 우리 평행 이동의 경우에는 부호가 반대로 들어가기로 했지?
<SYNC Start=1422561><P Class=KRCC>
그럼 식 바꿔 보자. y=2^(x-1)-4였어. 얘를 가지고 뭐 할 거냐면 x축으로 n만큼 평행 이동을 시킬 거야. x축으로. 그러면 y는 2에다가 x 대신에 x-m-1이 되겠지? 바뀌어야 되니까.
<SYNC Start=1442521><P Class=KRCC>
그리고 뒷부분은 -4. 여기까지 괜찮아? 근데 우리가 갖고 있는 그래프에서 우리 지수 함수는 제일 중요한 게 2가지라 그랬어.
<SYNC Start=1452370><P Class=KRCC>
첫 번째는 모양이 중요하고 그리고 두 번째로는 점근선이 중요하다 그랬지? 그래서 저 그래프 가지고 일단 모양을 봤더니 밑이 지금 2가 됐어. 즉 그래프가 점점점 커지는 증가 상태.
<SYNC Start=1466197><P Class=KRCC>
그리고 이제 점근선을 봤더니, 우리 점근선을 결정해 주는 건 y였지? 그래서 점근선이 뭐가 되냐면 y=-4였어. 이제 얘 가지고 한번 그림 그려 보자.
<SYNC Start=1478232><P Class=KRCC>
그래서 자꾸 자꾸 커지는 증가 상태이면서 점근선은 y=-4야. 그러니까 -4까지 내려오면 돼, 안 돼? 그렇지. 안 돼. 여기는 가까워지지만 닿지 않는 점근선이야.
<SYNC Start=1491857><P Class=KRCC>
근데 내가 원하는 건 4사분면을 안 지났으면 좋겠대. 우리 사분면이 1, 2, 3, 4 이거였어. 그럼 이제 고민 한번 해 보자. 증가하는 그래프야. 그래서 만약에 그래프가 이렇게 있어.
<SYNC Start=1506906><P Class=KRCC>
4사분면 지나, 안 지나? 굳이 안 지나지. 다시 한 번 그릴게. 증가하는 그래프 있어. 4사분면 지나, 안 지나? 안 지나.
<SYNC Start=1515851><P Class=KRCC>
근데 얘가 점점점점 내려오다가 어느 순간 잠시 이렇게 0에 닿는 순간도 있을 거고 또 이렇게 아래로 내려오는 순간도 있을 거야.
<SYNC Start=1526567><P Class=KRCC>
근데 이 순간부터는 어때? 4사분면을 지나지. 그럼 그거에 대한 기점이 되어 주는 게 어디냐면 0에서의 값인 거지. 그래서 내가 이렇게 새롭게 평행 이동한 애를 잠깐 f(x)라고 한번 불러 보자.
<SYNC Start=1540662><P Class=KRCC>
그럼 결국 0에서의 값, f(0)에서의 값이 뭐가 돼야지만 4사분면을 안 지날까? 그렇지. 0을 기점으로 크거나 같아야 되는 거지. 그럼 이제 0 대입했어.
<SYNC Start=1552430><P Class=KRCC>
f(0)이라는 건 0 대입했니까 2^(-m-1) 그리고 -4. 근데 얘가 0보다 크거나 같아야 되지. 그래서 2^(-m-1)이라는 애가 -4 넘어가니까 4보다, 근데 그 4라는 거 얼마였어?
<SYNC Start=1570871><P Class=KRCC>
응. 2²이지? 그럼 이제 왼쪽하고 오른쪽만 좀 비교해 보자. 밑이 같으니까 지수만 가지고 올게. 그럼 다시 한 번 써 보면 마이너스 -m-1만 남았고 그 값이 2보다 크거나 같고
<SYNC Start=1585437><P Class=KRCC>
그래서 m 넘어가 주면 m이라는 애가 -3보다는 작거나 같겠다. 그래서 우리 문제에서는 가장 큰 순간, 최대값 구해 달래. 그래서 가장 큰 순간은 -3이 나와 주면 되지.
<SYNC Start=1599063><P Class=KRCC>
그래서 이 17번 문제는 너희 내신 문제에서도 진짜 많이 봤을 거야. 그래서 기본형이 아니라 저렇게 평행 이동된 상태의 그래프를 주면서
<SYNC Start=1607417><P Class=KRCC>
그 그래프를 내가 직접 옮겨서 특정한 사분면을 지나거나 아니면 지나지 않거나. 그래서 주로 그 특정한 점을 결정해 주는 게 0에서의 함수 값이었지?
<SYNC Start=1617725><P Class=KRCC>
그래서 너희들이 식을 스스로 만들 수 있어야 된다. 그래서 이 17번이 오늘의 마지막 문제였어. 그래서 뭐 했나 정리 한 번 좀 해 보자.
<SYNC Start=1630333><P Class=KRCC>
그래서 오늘 첫 번째로는 같이 본 내용이 로그였지. 그래서 로그라는 거 결국 지수에서 자리만 잘 바꿔 준 거. 그게 로그였어. 그리고 두 번째로는 로그의 구구단.
<SYNC Start=1643404><P Class=KRCC>
우리 로그는 저 법칙을 모르면 계산을 하나도 못해. 정말 구구단 만큼이나 너희들이 친해질 수 있도록 자꾸 자꾸 복습해야 되고 그리고 로그에서의 계산은 밑이 같아야지만 가능.
<SYNC Start=1655289><P Class=KRCC>
그런데 정말 다행히도 내 마음대로 밑 만들 수 있었지? 그래서 그 밑 변환 공식까지는 꼭 같이 기억을 해 놔야 돼. 그래서 오늘도 너무 고생 많았고 다음 시간에 3강에서 보자. 안녕.
<SYNC Start=1667340><P Class=KRCC>
&nbsp;
</BODY>
</SAMI>