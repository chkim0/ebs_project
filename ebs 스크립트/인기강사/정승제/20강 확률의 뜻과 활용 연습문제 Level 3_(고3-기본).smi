<SAMI>
<HEAD>
<TITLE>Time Tools (C) CCNSOFT 2005</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=9955><P Class=KRCC>
-안녕하세요. 정준의 ‘니곡 내곡’ 첫 번째 시간, 오늘은 초대 손님으로 정승제님과 함께 하겠습니다.
<SYNC Start=23606><P Class=KRCC>
-안녕하세요, 반갑습니다. 영광입니다, 첫 번째 시간을 함께 하게 돼서.
<SYNC Start=28863><P Class=KRCC>
-철이 없었죠. 정승제님과 노래를 하겠다고 이렇게 가까이에 앉아 있다는 것이.
<SYNC Start=37326><P Class=KRCC>
-그러신 것 같습니다.
<SYNC Start=39924><P Class=KRCC>
-부끄러워하지 말아요. 이 시간은 여러분도 처음, 나도 처음, 그대도 처음.
<SYNC Start=46354><P Class=KRCC>
-맞습니다.
<SYNC Start=51906><P Class=KRCC>
-그럼 첫 번째 노래, ‘어화둥둥’ 시작해 볼까요.
<SYNC Start=58503><P Class=KRCC>

<SYNC Start=79943><P Class=KRCC>
영원한 나의 사랑아
<SYNC Start=87272><P Class=KRCC>
별이라도 따다 줘야 너를 가질 수 있다면
<SYNC Start=94258><P Class=KRCC>
지금 당장 달려간다 오직 너를 위해 야!야!야!
<SYNC Start=101342><P Class=KRCC>
뛰는 가슴 타는 가슴 널 원하고 있잖아
<SYNC Start=107881><P Class=KRCC>
모른다면 너는 바보 바보 바보야
<SYNC Start=116091><P Class=KRCC>
이 밤이 가고 아침이 밝아도 내 맘은 그대론데
<SYNC Start=123347><P Class=KRCC>
장난이라 생각하지 마
<SYNC Start=129766><P Class=KRCC>
어화둥둥 내사랑 (내사랑) 어여쁜 내사랑 (내사랑)
<SYNC Start=137153><P Class=KRCC>
천년만년 너만 사랑할 거야 (빠바바밤밤)
<SYNC Start=143562><P Class=KRCC>
어화둥둥 내사랑 (내사랑) 어화둥둥 내사랑 (내사랑)
<SYNC Start=149633><P Class=KRCC>
영원한 나의 사랑아
<SYNC Start=156163><P Class=KRCC>

<SYNC Start=161400><P Class=KRCC>
-계속 하는 건가?
<SYNC Start=163432><P Class=KRCC>
-끝났습니다.
<SYNC Start=166016><P Class=KRCC>
-제가 노래를 너무 못해가지고 괜찮았을지 모르겠습니다.
<SYNC Start=172307><P Class=KRCC>
-몇 번째 불러 보시는 노래입니까?
<SYNC Start=175603><P Class=KRCC>
-여러 번 부르고 연습했는데.
<SYNC Start=178091><P Class=KRCC>
-뮤직비디오는 보셨습니까?
<SYNC Start=178971><P Class=KRCC>
-많이 봤죠. | -많이 보셨습니까?
<SYNC Start=180862><P Class=KRCC>
-그럼요. 노래를 이렇게 앉아서 부르게 될 줄은 모르고 낄낄거리기만 했죠.
<SYNC Start=186088><P Class=KRCC>
-제 노래를 이렇게 열심히 불러 주신 첫 번째 분이신 것 같습니다.
<SYNC Start=190351><P Class=KRCC>
-네, ‘니곡 내곡’이 함께 한 첫 번째 시간이기도 했습니다.
<SYNC Start=194951><P Class=KRCC>
-다음에 또 할 건가요?
<SYNC Start=196858><P Class=KRCC>
-그럼요. 두 번째 시간도 있어야죠.
<SYNC Start=199541><P Class=KRCC>
-두 번째 손님은 어떻게 되십니까?
<SYNC Start=201602><P Class=KRCC>
-제가 아는 가수가 정승제밖에 없어요. 그럼 두 번째 시간에 만날 때까지 잘 기다리기로 약속.
<SYNC Start=211152><P Class=KRCC>
-약속.
<SYNC Start=214134><P Class=KRCC>
-어떡해. 
<SYNC Start=217148><P Class=KRCC>
-끝. | -끝.
<SYNC Start=218638><P Class=KRCC>

<SYNC Start=224061><P Class=KRCC>
아, ‘긴가민가’? ‘니곡 내곡’? 아, ‘니곡 내곡’ 함께 해주신 우리 정준 진행자님께 진심으로 감사의 말씀을 드립니다. 요즘 따라 이렇게 방송 쪽에서 섭외가 오는데, 이렇게 또 오랜만에 섭외 받고 이렇게 제가 또 살짝
<SYNC Start=241007><P Class=KRCC>
EBS라는 방송에서 또 이렇게 출연을 하게 됐습니다. 아주 진심으로 영광스러웠던 자리가 아닐까라고 생각을 합니다. 그리고 오늘은 레벨 3, 가장 어려운 문제 같이 한번 풀어보는 시간 갖도록 하고.
<SYNC Start=255694><P Class=KRCC>
여러분, 정말 중요한 것은 먼저 한 번 풀어봐야 된다 그랬어, 그렇지. 그 풀어 봤던 경험을 바탕으로 하나하나씩, 저의 생각과 여러분의 생각과 한번, ‘내 문제 니 문제’, 같이 한번 풀어보도록 하겠습니다.
<SYNC Start=266152><P Class=KRCC>
첫 번째부터 가볼까요. 1번, 집합 X가 있는데 1부터 7까지의 자연수. 1, 2, 3, 4, 5, 6, 7이죠, 말 그대로 얘기하면. 모든 자연수의, 모든 자연수가 아니라 7 이하의 자연수의 모든 부분집합 중에서 임의로 선택한 한 집합을 
<SYNC Start=282668><P Class=KRCC>
A라고 할 때 집합 A가 다음 조건을 만족시킬 확률을 구하라. 확률 문제니까 전체 경우의 수. 전체 경우의 수는 부분집합 중에서 임의로 하나를 선택한다 그랬으니까 전체 부분집합의 개수 몇 개예요, 시작. 2의 7제곱까지.
<SYNC Start=295747><P Class=KRCC>
그래서 218가지의 부분집합 중에서, 그 중에서 다음을 만족시키는 개수를 여기다 써주면 확률이 나오겠죠. 얘를 만족시키는 개수를 써주면 되는데, 첫 번째는 뭐냐면 원소의 개수가 2개 이상. 원소의 개수가 2개 이상이면서
<SYNC Start=312221><P Class=KRCC>
얘와 서로소가 아니다, 이렇게. 어? 서로소가 아니다 그랬거든. 서로소라는 게 뭐예요? 집합에서 서로소라는 건 교집합이 없는 관계, 배반 사건인 두 관계를 서로소라 그래요. 그러니까 이런 걸 서로소라 그런다고.
<SYNC Start=327746><P Class=KRCC>
A와 B가 교집합이 공집합일 때를 사람들은 A라는 집합과 B라는 집합은 서로소다, 이렇게 얘기하거든. 그러니까 얘가 서로소가 되려면 1, 2, 3, 4, 5를 가지고 있지 않은 1, 2, 3, 4, 5라는 이 원소 중에서
<SYNC Start=343052><P Class=KRCC>
아무 것도 포함시키면 안 되겠지. 그러면 서로소가 되는 거지. 그러면 서로소가 아니라는 건 뭐예요? 적어도 하나는 포함하라는 얘기니까 1, 2를 포함하건 1, 3을 포함하건 1, 4를 포함하건 3, 4, 5를 포함하건 너무 많지, 그건.
<SYNC Start=354613><P Class=KRCC>
그럴 때는 항상 뭘 생각하라 그랬어요? 여사건을. 그러니까 나 같으면 이렇게 할 것 같아. 원소의 개수가 2 이상짜리 중에서 얘랑 서로소인 걸 빼면 되잖아. 
<SYNC Start=365277><P Class=KRCC>

<SYNC Start=377679><P Class=KRCC>
응? 그러니까 얘 두 개를 동시에 만족시키는 원소의 개수는, 잘 들어 봐. 2 이상이면서 얘랑 뭐인 것, 시작. 서로소인 걸 빼주면 되지. 이해가 되세요? 어디에서 어디를 빼라고? 원소의 개수가 2 이상인 것들 중에서,
<SYNC Start=398447><P Class=KRCC>
그러니까 문제가 뭐냐면 2개 이상의 원소를 갖는 부분집합 중에서 얘랑 서로소가 아닌 것의 개수를 여기다 써주면 되니까. 이것, 헷갈린다니까. 잘 들어봐야 된다. 128개 중에서 얘를 빼주는 게 아니라
<SYNC Start=417039><P Class=KRCC>
원소의 개수가 2개 이상인 것들 중에서 얘랑 서로소가 아닌 것들. 이 중에 적어도 하나를 포함하는 것의 개수를 분자에다 써주면 되는 거니까, 2 이상의 원소인 것들 중에서 뭘 빼주면 돼요? 얘랑 서로소인 걸 빼준 다음에
<SYNC Start=436366><P Class=KRCC>
그걸 분자에다 써주면 답이라니까. 그럼 2 이상인 부분집합의 개수는 과연 몇 개냐. 전체 128개 중에서 원소의 개수가 2 이상인 것들을 얘기하라 그러면 원소의 개수가 없는 것, 원소의 개수가 없는 것, 0개.
<SYNC Start=455577><P Class=KRCC>
또 하나는 원소의 개수가 하나인 것 빼주면 되겠지. 원소의 개수가 하나도 없는 것은 공집합이니까 1개. 원소의 개수가 하나짜리는 7 이하의 자연수니까 1만 원소로 갖는 부분집합, 2를 원소로 갖는 집합, 3을 원소로 갖는 집합,
<SYNC Start=471110><P Class=KRCC>
쫙 다 세면 몇 개, 시작. 7개. 맞아요? 그럼 합치면 몇 개, 시작. 8개. 그러니까 128개 중에서 8개를 빼. 그럼 몇 개야? 120개란 말이야. 이 120개 중에서 서로소가 아닌 것을 선택해서 여기다 써줄 건데.
<SYNC Start=495443><P Class=KRCC>
이 120개 중에서 서로소인 것을 제외하면 서로소가 아닐 것 아니에요. 그러니까 이 중에서 서로소인 것들을 빼자 이거야. 원소의 개수가 2개 이상인 것 중에서. 그러면 서로소가 되려면 얘랑 교집합이 없어야 되니까
<SYNC Start=513048><P Class=KRCC>
집합 X 1, 2, 3, 4, 5, 6, 7 중에서 얘랑 교집합이 없으려면 뭐로만 만들면 돼요, 시작. 6, 7로만 만들면 되잖아. 맞지. 그럼 원소의 개수 하나짜리는 6, 원소의 개수가 하나짜리는 7도 있고. 원소의 개수가 2개짜리는 6, 7도 있고
<SYNC Start=529325><P Class=KRCC>
원소의 개수가 하나도 없는 공집합도 있을 텐데. 이미 이 120개 안에는 원소의 개수가 2개 이상인 것들이니까 얘를 가지고 만들 수 있는 얘랑 서로소인, 다른 말로 6, 7로 만들 수 있는 원소의 개수가 2개 이상인 것은
<SYNC Start=543645><P Class=KRCC>
하나밖에 없잖아. 뭐밖에 없어? 이것밖에 없죠. 이 집합 하나밖에 없다고. 그러니까 1개만 빼줘서 119개를 분자에 써주면 이게 답이 된다, 이런 얘기예요. 이해돼요? 그럼 끝났지, 뭐. 분모는 뭐고? 128, 2의 7제곱, 128.
<SYNC Start=564295><P Class=KRCC>
분자는 119. 그래서 p+q의 값을 구하라 그러면 답은 247 나와요. 답은 247, 끝. 이렇게 정리하시면 됩니다. 이게 헷갈리면 안 되는데. 그러니까 우리는 이 분자에다가 뭘 쓸 거다? 원소의 개수 2개 이상이면서 
<SYNC Start=582286><P Class=KRCC>
얘랑 서로소가 아닌 것. 그런데 서로소가 아닌 것 찾으려면 너무 시간이 오래 걸리니까 얘만 만족한 것 중에서 서로소인 걸 다 빼주면 되지. 얘를 만족시키는 것은 전체 부분집합의 개수 128개 중에서 원소의 개수 하나짜리랑
<SYNC Start=596372><P Class=KRCC>
공집합 빼서 120개. 그 중에서 얘랑 서로소인 것은 6, 7로만 만들어진 것. 그런데 원소의 개수 2개 이상인 것은 이것 하나밖에 없잖아요. 그러니까 하나를 더 빼서 몇 개다, 시작. 119개다. 
<SYNC Start=608262><P Class=KRCC>
그래서 레벨 3, 최종적인 답은 128분의 119가 된다. 이렇게 가시면 될 것 같아요. 여기까지가 실력완성 1번 문제였습니다. 2번으로 가시죠. 그림 1과 같이, 직사각형 ABCD에서 선분 AD를 5등분하는 4개의 점,
<SYNC Start=625637><P Class=KRCC>
P1, P2, P3, P4가 있대. 여기 이렇게 4개의 점이 이렇게 있어요. 그리고 선분 BC 위에 5등분하는 점 Q1, Q2, Q3, Q4가 있대. 그런데 문제를 잘 읽어봐야 되는데, 각 점 P1부터 P4에 대해서 Q 4개 중에서 임의로 선택한,
<SYNC Start=646042><P Class=KRCC>
점을 선택한 그 점을 연결해서 선분 4개를 만드는 거야. 그러니까 무슨 말이냐면, 막 만드는 4개가 아니야. 지금 이렇게 돼 있거든. 선분 AB 위에 P1, P2, P3, P4가 있고요. P1, P2, P3, P4가 있고요.
<SYNC Start=665653><P Class=KRCC>
그다음에 맞은편에 Q1, Q2, Q3, Q4. Q1, Q2, Q3, Q4가 있다니까, 이렇게. 4개를 이렇게 1, 2, 3, 4, 이게 아니야. 이게 아니라니까. 이렇게는 선분 4개를 못 만들어. 왜 못 만드니? 문제에서 뭐라고 돼 있냐면,
<SYNC Start=695167><P Class=KRCC>
각 점 Pi에 대해서 Q 중에 하나를 연결하라 그랬으니까 P4가 지금 연결이 안 돼 있잖아요. P4가 지금 선분으로 연결이 안 돼 있잖아요. 이러면 안 돼. 그러니까 Q는 비어 있는 놈이 있어도 좋은데, 왜? 문제에서 이렇게 돼 있거든. 
<SYNC Start=717033><P Class=KRCC>
각 점 Pi, i는 1, 2, 3, 4라는 얘기는 P1, P2, P3, P4, 각각의 점은 이 중에 어느 하나, 임의로 선택한 하나와 연결해서 선분 4개를 만든다 그랬으니까. 얘도, 얘도, 얘도, 얘도 선분은 만들어야 된다, 이거야.
<SYNC Start=733944><P Class=KRCC>
그러니까 뭐랑 똑같니? 함수인데 얘네들은 정의역인 거고 얘네들은 공역인 거지, 그러니까. 왜? 정의역에 있는 모든 원소들은 화살을 쏴야 되잖아요. 얘네들은 맞아도 되고 안 맞아도 되잖아. 함수의 개수 응용문제인 거야.
<SYNC Start=749155><P Class=KRCC>
그래서 난 차라리 얘네들을 뭘로 보자? 정의역. 얘네들을 뭘로 보자? 공역으로 보자고. 그러면 조금 더 여러분, 마음에 와닿을 것 같아. 그러니까 이렇게 보자고. P1, P2, P3, P4라는 정의역 4개가 있고,
<SYNC Start=766111><P Class=KRCC>
공역은 Q1, Q2, Q3, Q4가 있는 거야. X에서 Y로의 함수의 개수를 세라 그러면 얘가 선택할 수 있는 경우의 수, 다른 말로 얘로 만들 수 있는 선분 몇 개? 4가지 중에 하나일 것 아니에요. 
<SYNC Start=780892><P Class=KRCC>
그러니까 얘가 선택할 수 있는 함숫값의 개수 4가지, 얘도 4가지, 얘도 4가지, 얘도 4가지. 우리가 원래 함수의 개수 세듯이 세어 보면 4의 몇 제곱까지, 시작. 4⁴가지다, 이런 얘기다. 
<SYNC Start=792943><P Class=KRCC>
그래서 전체 경우의 수는 당연히 4⁴가지가 되고요. 그래서 최종적인 답을 쓸 때는 이렇게 된다고, 집중해. 4⁴가지 중에서 분자는 선생님, 뭡니까? 6개 부분으로 나누어질 확률을 구하라.
<SYNC Start=812980><P Class=KRCC>
선분 4개를 그어서 6개 부분으로 나누어질 확률을 구하래. 얘가 P1, P2, P3, P4인데. 6개 부분으로 나누어져야 된대. 만약에 이렇게 연결하잖아, 선분 4개를? 그러면 몇 개 부분으로 나눠지니? 5개 부분으로 나누어져.
<SYNC Start=831612><P Class=KRCC>
그럼 6개 부분으로 나누어지려면 어떻게 해야 되느냐. 교점을 하나만 발생시키면 돼요. 이런 데 교점 말고. 이런 것은 이래도, 6군데로 나눠진다고. 봐봐. 1,2,3,4,5,6군데. 그러니까 이렇게 직사각형의 선분 상에 있는 교점 말고,
<SYNC Start=856813><P Class=KRCC>
직사각형 위에 있지 않은, 직사각형 내부에 있는 선분을, 아, 교점을 하나만 만들면 무조건 6개 부분으로 나뉜다고. 예를 들어서 이렇게 만들어서, 예를 들어서, 이것 봐. 이렇게. 그럼 교점 하나 생겼지, 내부에. 나머지는? 
<SYNC Start=875822><P Class=KRCC>
만들 수가 없겠구나. 왜? 얘네들도 반드시 그어야 되는데 누구랑 긋더라도 교점 하나씩 더 발생되지. 만약에 이렇게 그었어. 그럼 몇 개 부분이야, 벌써? 이렇게 만들었다 그러면 1,2,3,4,5,6,7,8, 훨씬 더 많이 생기잖아요.
<SYNC Start=893257><P Class=KRCC>
그럼 어떻게 그어야 되겠습니까? 이렇게 만들어도 안 되겠네. 얘가 P1, 얘가 P2, 얘가 P3, 얘가 P4라고 했을 때 중간에 건너뛰고 연속되지 않는 P 2개를 이용해서 선분을 만들어버리면 그 사이에 있는 놈은
<SYNC Start=915096><P Class=KRCC>
이쪽이든 이쪽이든 이쪽이든 이쪽이든 연결시킬 때 내부의 교점을 하나 또 만들잖아. 그러니까 교점을 만들 때는 어떻게 만들어야 되냐면 P1, P2, 이렇게 만들거나, 이렇게 만들거나 이렇게 만들면서 
<SYNC Start=929579><P Class=KRCC>
예컨대 P1, P2 이렇게 만들었다면 얘네들은 어디를 가지고 연결해도 상관이 없다, 이거야. 그러니까 여기 화살을 맞는 애들 중에서는 아무 거나 2개를 선택하는 거지, 이렇게. 그런 다음에 P2는 이 놈과, P1은 이 놈과,
<SYNC Start=950463><P Class=KRCC>
이렇게 만들면 내부에 교점 하나 생겼고. 나머지 이 2개만 선분을 더 만들면 되는데. 걔네들은 더 이상 교점이 발생하지 않도록 만들면, 1,2,3,4,5,6, 또는 이렇게 만들어도 1,2,3,4,5,6, 6개의 부분으로 나뉠 수 있다.
<SYNC Start=970329><P Class=KRCC>
그러니까 이 얘기를 함수의 개수에서 파생되어진 문제니까 이렇게 보시면 돼요. 교점이 하나도 발생하지 않도록은 우리 증가함수의 개수에서 얘기했었잖아, 발상의 전환. 이 4명 중에서 화살 맞을 몇 명을 뽑아라?
<SYNC Start=986357><P Class=KRCC>
4명을 뽑은 다음에, 첫 번째 것끼리, 두 번째 것끼리, 순서대로 연결하면 무조건 교점이 발생하지 않아. 이렇게 되면 1,2,3,4,5개 부분으로 나뉜다고. 그런데 교점을 하나 발생시키려면 어떻게 해야 되느냐.
<SYNC Start=999351><P Class=KRCC>
조금 전에도 봤지만 P1, P2, 이렇게 교점을 발생시키든가, 이렇게 선분을 그어서 교점을 발생시키든가, 이렇게 선분을 그어서 교점을 발생시키는 방법밖에 없다. 예를 들어서 P1과 P2가 교점을 발생시킨다 그러면
<SYNC Start=1014701><P Class=KRCC>
이 4명 중에서 P1, P2와 매칭이 될 2개를 선택하자고. 예를 들어서 Q1과 Q3를 선택했다 그러면 반대 크기로, 다른 말로 P1은 더 밑에 있는 놈, P2는 더 위에 있는 놈과 매칭을 시키면 교점이 하나 발생하게 되고
<SYNC Start=1036542><P Class=KRCC>
나머지 3과 4도 화살을 쏴야 되는데, 얘네들이 쏘려면 어떻게 쏴야 돼요? Q3 위에 있는 놈 가지고 쏘면 또 교점이 발생되니까 안 되잖아. 그러니까 누구랑 누구, 시작. Q3나 Q4한테 화살을 쏘면 된다는 거지.
<SYNC Start=1056872><P Class=KRCC>
맞아요? 그러니까 얘가 선택할 수 있는 경우의 수 몇 가지인 거야, 시작. 2가지. 얘가 선택할 수 있는 경우의 수는? 또 2가지라 그러면 안 되고 얘에 따라 또 달라지는 거지. 얘가 이렇게 쐈는데 얘가 이렇게 쏠 수는 없으니까.
<SYNC Start=1070939><P Class=KRCC>
결국 P3와 P4도 한꺼번에 생각을 못하고 교점이 발생하지 않도록 쏘려면 P3는 여기와 여기인데, P3가 여기에 쐈을 때 P4는 2가지가 있고, P3가 여기에 쐈을 때 P4는 1가지밖에 없으니까 결론적으로 몇 가지다, 시작.
<SYNC Start=1090355><P Class=KRCC>
3가지밖에 안 되겠구나라는 느낌이라는 거지. 그렇게 만들면 예를 들어서 이렇게 이렇게 매칭이 됐다고 생각을 하면 6개 부분 맞다 이거야. 왜? 1,2,3,4,5,6개 부분이 되었다. 그러니까 한 마디로 얘기해서
<SYNC Start=1107761><P Class=KRCC>
교점이 중간에 하나씩만 발생하도록 하는 함수의 개수를 세라는 이야기니까. 이해가 돼요? 교점을 발생시키는 정의역에 있는 원소 2개가 P1, P2 또는 P2, P3 또는 P3, P4니까. 얘가 이렇게 되든, 이렇게 되든, 
<SYNC Start=1136543><P Class=KRCC>
이렇게 되든 상관없어. 예를 들어서 이렇게 된다 그래도 아까 전처럼 2개한테 이렇게 쐈다, 이거야. 얘를 여기다 쏘고 얘를 여기다 쐈다 이거야. 그래도 마찬가지로 P1은 교점이 더 이상 발생하지 않도록 쏘면 되고,
<SYNC Start=1158410><P Class=KRCC>
P4도 더 이상 교점이 발생하지 않도록 쏴버리면 될 것이라는 이야기지. 이해가 되세요? 그래서 이렇게 되도 상관없고 이렇게 되도 상관없고 이렇게 되도 상관이 없겠구나. 그래서 교점이 딱 하나 발생되도록 만들어야 되니까
<SYNC Start=1180202><P Class=KRCC>
첫 번째, 분류하자. 어떻게? P1과 P2, 얘로 교점을 발생시키는 경우. 이 2개의 점을 가지고 정의역에 있는 원소, P1과 P2에서 교점을 발생시키는 방법. 그렇게 되는 함수의 개수 따로 세고. 
<SYNC Start=1198094><P Class=KRCC>
두 번째는 P2와 P3가 교점을 발생시키는 방법의 수를 따로 세고. 이해 돼요? 세 번째는, 시작. P3와 P4가 교점을 발생시키는 방법의 수를 따로 세자면, 첫 번째, P1과 P2가 교점을 발생시킨다고 생각해 보면.
<SYNC Start=1227800><P Class=KRCC>
얘네들이 누구한테 화살을 쏴야 되느냐. 이 중에 있는 2명한테 화살을 쏘는데 교차하면서 쏴야 되잖아. 그 2명을 이렇게 쏘느냐, 이렇게 쏘느냐, 이렇게 쏘느냐, 이렇게 쏘느냐에 따라 달라지는데,
<SYNC Start=1248514><P Class=KRCC>
어차피 나머지 애들은 누구한테? P3와 P4 애들이 쏠 거니까 선택된 2명 위에 것은 볼 필요도 없지. 맨 마지막 가장 밑에 있는 놈의 아래쪽이나 가장 밑에 있는 놈한테 얘들이 쏴야 되는 것 아니야.
<SYNC Start=1267258><P Class=KRCC>
그러니까 이 4명, Q1부터 Q4 중에서 2명을 선택하는데, 둘 중에 더 아래쪽에 있는 원소가 Q2인 경우와 Q3인 경우와 Q4인 경우로 또 분류해서 생각하자. 어떻게 분류하자고? 이 두 놈한테 화살 맞을 두 놈 중에서
<SYNC Start=1304149><P Class=KRCC>
더 아래쪽에 있는 애가 Q2일 때와, 또, 시작. 아래쪽에 있는 놈이 Q3일 때와 아래쪽에 있는 놈이 Q4일 때로 분류해서 생각하자. 아래쪽에 있는 놈이 Q2다. 그럼 뭐와 뭐를 뽑은 거야? Q1과 Q2를 뽑는 거니까,
<SYNC Start=1330218><P Class=KRCC>
뽑는 방법의 수는 몇 가지고, 시작. 1가지고 and, 이제 매칭을 시키는데 P1은 누구랑? Q2와. P2는 Q1과 매칭을 시켜서 교점 하나를 발생시켜야 되고, 얘와 얘가 선택하는 방법은 2 또는 3 또는 4한테 화살을 쏴야 되는데
<SYNC Start=1351202><P Class=KRCC>
더 이상 교점을 발생시키면 안 되니까, 교점 발생시키지 않는 방법의 수, 뭐라 그랬어요? 조합으로 생각해서 3명 중에서 몇 명을 뽑는다, 시작. 2명, 얘네들한테 화살 맞을 2명을 뽑는데, 교점이 선 상에 생기는 건 상관없다.
<SYNC Start=1370564><P Class=KRCC>
그 얘기는 똑같은 놈한테 쏘는 건 상관이 없거든. 그러니까 그냥 뽑는 것이 아니라 중복을 허용해서 뽑는, 이 Q2를 포함한 3명 중에서 2명을 뽑을 때 중복을 허용해서 2명을 뽑는 방법의 수를 생각하자는 거예요.
<SYNC Start=1389028><P Class=KRCC>
그래서 얘가 4C2가지니까 6가지가 된다, 이런 뜻이라고. 두 번째, 아래쪽이 Q3가 되도록 P1과 P2에 매칭되는 원소를 뽑는 방법의 수를 생각하시오, 그러면. 이번에는 Q3가 아래쪽에 있는 경우니까, Q3가 아래쪽에 있는 경우니까
<SYNC Start=1414178><P Class=KRCC>
나머지 하나는 어디서 더 뽑으면 돼요? 위에서 더 뽑으면 된다, 이거야. 그러니까 둘 중에 하나를 뽑아서, 둘 중에 하나를 뽑아서 P2는 그놈에다가, P1은 아래쪽 놈에다가 매칭을 시키면 교점 하나가 발생할 것이고
<SYNC Start=1437081><P Class=KRCC>
얘네들은 더 이상 교점 발생시키면 안 되니까 누구한테만 쏴야 돼? Q3나 Q4한테만 쏴야 되니까 2명 중에서 P3와 P4한테 화살 맞을 2명을 선택하는데, 똑같은 놈한테 화살 쏴도 되는 거잖아. 
<SYNC Start=1453453><P Class=KRCC>
그러니까 2명 중에서 2명을 선택하되 중복을 허용해서 2명을 선택한다. 3이 6가지다, 이렇게 처리하는 거라고. 세 번째, 아래쪽이 Q4인 경우, 이건 무슨 말이냐면 P1과 P2한테 매칭이 될 공역의 원소 중에서
<SYNC Start=1474553><P Class=KRCC>
2개를 뽑을 때 아래쪽이 Q4인 경우. 그럼 나머지 하나는? 3개 중에 하나를 뽑으면 되는 거잖아요. 그러니까 3개 중에 하나를 뽑고 and, 예를 들어서 누가 뽑히든 상관이 없어, 누가 뽑혔다면. Q2는 무조건 누구한테?
<SYNC Start=1491480><P Class=KRCC>
그 뽑힌 놈한테. P1은 Q4한테 화살을 쏴야 되는 거고. 더 이상 교점이 발생되지 않도록 P3와 P4가 매칭시키는 방법의 수는 몇 가지야? 1가지밖에 없는 거지. 굳이 나타내자면 1명 중에서 2명을 중복해서 허락해서 
<SYNC Start=1510141><P Class=KRCC>
뽑는 방법의 수니까 이거겠지만, 얘는 1가지고. 아, 1명 중에서, 미안해. 1명 중에서 2가지를 뽑는; 거지. 1명 중에서 2개를 뽑는 거니까 이렇게 나오고. 얘는 C2인데 2C2니까 몇 가지, 시작. 1가지. 
<SYNC Start=1530650><P Class=KRCC>
그런데 얘는 굳이 그렇게 생각하지 말고 어떻게 생각해도 돼요? 2개 모두 다 Q4한테 쏴야 되니까 1가지, 얘는 3가지. 그래서 3가지고 다 더하면 몇 가지다, 시작. 15가지가 된다. 그러니까 교점을 하나 발생시키되,
<SYNC Start=1546364><P Class=KRCC>
P1과 P2를 가지고 교점을 하나 발생시키는 방법의 수는 총 몇 가지다, 시작. 15가지다, 이거야. 그거랑 얘는 가짓수는 같겠지. 이번에는 끝에 있는 2개를 가지고 교점 발생시키는 방법이야. 그렇잖아.
<SYNC Start=1565230><P Class=KRCC>
입장이 완전 같은 거니까. 위에 2개를 선택하나 밑에 2개를 가지고 만드나 결과는 같아. 그러니까 얘도 총 몇 가지가 될 것이다, 시작. 5가지가 될 것이고. 우리는 뭐만 더 찾자? 가운데 있는 P2와 P3를 가지고 
<SYNC Start=1580640><P Class=KRCC>
교점을 발생시키는 방법의 수를 한 번 더 찾자. 아, 이야. 이렇게 한 번만 더 찾아볼게요, 이렇게. Q1, Q2, Q3, Q4. 얘네들을 가지고 교점을 발생시키는 방법의 수를 더 찾자. 마찬가지로 아까랑 똑같은 방법으로
<SYNC Start=1604639><P Class=KRCC>
생각하시면 될 것 같아. 그런데 지금은, 잘 들어 봐. 아래쪽에 있는 Q2만 관심이 있는 것이 아니라 P1은 둘 중에 더 작은 놈한테 무조건 쏴야 되고, 얘는 둘 중에 더 큰 놈한테 쏴야 되니까. 맞아요?
<SYNC Start=1640698><P Class=KRCC>
얘는 더 작은 놈한테 화살을 쏴야 되고, 얘는 둘 중에 더 큰 놈한테 화살을, 큰 놈보다 크거나 같은 놈, 얘는 작은 놈보다 작거나 같은 놈한테 화살을 쏴야 되는 거니까. 그 2개를 어떻게 뽑을 것이냐에 관심이 있는데,
<SYNC Start=1661637><P Class=KRCC>

<SYNC Start=1668256><P Class=KRCC>
예를 들어서 Q1과 Q2를 뽑는다면 얘는 무조건 첫 번째 놈한테, 얘는 얘 아니면 얘 아니면 얘한테 화살을 쏴야 되는 거니까. 이럴 때는 몇 가지다, 시작. 3가지가 된다, 이런 얘기. 얘와 얘를 선택했다 그러면
<SYNC Start=1687530><P Class=KRCC>
P1이 선택할 수 있는 방법의 수는 몇 가지고요? 1가지. P4가 선택할 수 있는 경우의 수는 얘랑 얘, 몇 가지, 시작. 2가지가 되는 거니까 이 두 번째 방법은 이 4명 중에서 2명을 뽑는 방법에 따라서 다 달라지더라, 이거야.
<SYNC Start=1712578><P Class=KRCC>
그러니까 4명 중에서 2명을 뽑는 방법의 수는 몇 가지예요? 4C2가지니까 6가지잖아. 6가지를 다 분류해서 어떻게 뽑는 방법? Q1과 Q2를 뽑는 방법에서는 어차피 얘는 교점이 발생시키도록 교차해서 매칭하면 되고,
<SYNC Start=1731470><P Class=KRCC>
P1은 작은 쪽, P4는 크거나 같은 쪽에다가 매칭을 해버릴 테니까, P1이 선택할 수 있는 경우의 수는 몇 가지, 시작. 1가지. P4가 선택할 수 있는 방법의 수는 3가지. 그래서 몇 가지다, 시작. 3가지가 된다는 얘기고, 맞아요?
<SYNC Start=1753195><P Class=KRCC>
P1과 P2를 했어. 그럼 이번에는 Q1과 Q3는 어떻게 되느냐. 말 그대로 P1은 무조건 1가지, P4는 Q3, Q4 2가지니까. 아, 이럴 때는 2가지가 되고. Q1과 Q4를 뽑았을 때는 몇 가지, 시작. 1가지가 되고.
<SYNC Start=1780065><P Class=KRCC>
이제 3가지만 더 해보면 돼요. Q2와 Q3를 뽑았을 때는 P1은 이 둘 중에 하나. P4는 또 둘 중에 하나니까 2×2, 그래서 몇 가지고, 시작. 4가지고. 2개만 더 하면 된다니까, 이제. Q2와 Q4에다가 화살을 쏘는 경우.
<SYNC Start=1799763><P Class=KRCC>
이렇게 화살을 쏘는 경우는 P1은 2가지. P4는 1가지가 될 테니까. 2가지가 되고, 마지막. Q3와 Q4한테 화살을 쐈을 때는 P2는 무조건 Q4한테, P3는 무조건 Q3한테니까 결국 P1이 선택할 수 있는 놈은, 시작. 3가지.
<SYNC Start=1825884><P Class=KRCC>
P4는 1가지. 그래서 몇 가지가 된다, 시작. 3가지가 된다, 이런 얘기예요. 그래서 이렇게 더하면 9가지, 10가지, 5가지니까 시작. 15가지가 돼서, 이럴 때 15, 이럴 때 15, 이럴 때도 마찬가지로 15이 돼서
<SYNC Start=1845074><P Class=KRCC>
최종적인 분자에 있는 답은 시작. 45가지가 답이다, 이런 얘기라고. 됐어? 조금 어려웠었던 문제지. 
<SYNC Start=1855795><P Class=KRCC>

<SYNC Start=1864480><P Class=KRCC>
약분 안 되네요. 그럼 256분의 45니까 답은, 시작. 301이니? 진짜? 답이 그거야? 답은 301, 이런 느낌으로 처리하시면 됩니다. 이 정도면 킬러 중에서도 완전 킬러죠, 뭐. 상당히 어려웠었던. 
<SYNC Start=1887937><P Class=KRCC>
그러니까 이것을 제가 지금 처음 설명했다기보다, 제가 말씀 드렸잖아요. 교점이 발생하지 않도록 매칭을 시키는 방법의 수는 증가함수의 개수랑 똑같다. 증가함수의 개수는 조합을 이용해서 화살을 맞을 애를 먼저 선택한 다음에
<SYNC Start=1911216><P Class=KRCC>
그다음에 매칭시켜라인데. 지금은 조금 특이한 게 교점이 몇 개 발생하도록, 하나만 발생하도록이라는 문제라고요. 6개 부분으로 나눈다 이 얘기는 하나의 교점이 발생하도록. 선생님, 그런 생각을 어떻게 해요?
<SYNC Start=1926128><P Class=KRCC>
저는 보자마자 그런 생각 안 드는데. 안 들 수 있어. 그래서 예시를 갖다 놓은 거야. 교점이 하나 발생하는 모습을 만들어냈고, 옆에 있는 그림은? 교점이 2개 발생하는 경우를 만들어낸 거죠.
<SYNC Start=1942053><P Class=KRCC>
그렇게 되면 이렇게 여러 개가 생긴다는 것을 시험장 안에서 한번 해봐야 되는 거야. 어떻게 해야지 6개 부분으로 나뉠까. 그것 생각하는 데도 보통 한 2-3분은 지나갈 거예요, 족히. 그래서 결론을 빨리 내서
<SYNC Start=1956182><P Class=KRCC>
교점을 하나만 발생시키라는 얘기구나. 그런데 교점을 발생시킬 때 P1과 P3가 교점을 발생시킬 수도 있기는 있어, 이렇게. 그렇게 되면 얘가 쏠 데가 마땅치 않잖아. 이 2개 사이에 끼여 있는 애는
<SYNC Start=1971239><P Class=KRCC>
어디를 가더라도 교점이 또 다시 발생이 되니까. 그렇게 되면 6개로 발생할 수가 없다. 그래서 교점이 발생할 수 있는 방법은 뭐라고? P1, P2 또는 P2, P3, 또는 P3, P4밖에 없겠구나. 무슨 말인지 이해되시죠.
<SYNC Start=1988438><P Class=KRCC>
그래서 3가지로 분류해서 하나하나씩 선택을 하면 그다음에는 조금 더 편하게 답을 쓸 수 있을 것이라는 이야기라고. 좋아요. 여기까지가 좀 어려웠었던 실력완성 2번이었어요. 마지막 문제 한번 가볼까요.
<SYNC Start=2007848><P Class=KRCC>
그림 1의 도형에 다음과 같은 실행 1, 실행 2의 순서로 숫자를 써넣는대. 어떻게 했냐면, 가운데 무조건 0이야. 그리고 이 테두리에 몇 개를 만들어? 8개의 숫자, 1부터 8까지의 숫자를 집어넣어. 그럼 전체 경우의 수는 뭐야?
<SYNC Start=2031365><P Class=KRCC>
8!가지죠. 왜? 원순열이 아니야. 얘네들은 돌려서 같은 것은 같은 것끼리 한다가 아니야. 고정돼 있는 놈이야. 얘가 첫 번째 줄의 가장 왼쪽, 첫 번째 줄의 두 번째, 첫 번째 줄의 세 번째.
<SYNC Start=2048255><P Class=KRCC>
주어진 도형을 회전시키지 않는다고 명확하게 구분을 지어 놨기 때문에 얘는 직순열이에요. 그래서 전체 경우의 수는 8!가지가 맞아. 그런데 분자는 뭐냐 하면, 어떤 조건을 만족시켜야 되냐. 1부터 8까지를 여기다가 만든대.
<SYNC Start=2067621><P Class=KRCC>
예를 들어서 1, 2, 3, 4, 5, 6, 7, 이거라면. 여기 사이사이에도 숫자를 기입할 건데, 문제를 읽어 보면 어떻게 돼 있냐면, 여기에 들어갈 숫자는 이 테두리에 있는 숫자를 다 더해서 홀수면 1, 짝수면 0을 집어넣겠대.
<SYNC Start=2086343><P Class=KRCC>
이것 다 더해 봐. 짝수잖아. 그럼 0. 이렇게 테두리. 더하면, 시작. 홀수잖아, 11이니까. 그럼 1. 이렇게 더해 봐. 이것 뭐였니? 8이구나. 이렇게 다 더해 봐, 얼마야, 시작. 짝수니까 0. 이렇게 다 더하면 홀수니까 1.
<SYNC Start=2106491><P Class=KRCC>
아, 무슨 말인지 알겠죠. 문제는 뭐냐. 이 안에 들어갈 게 지금처럼 다 1일 확률을 구하라. 그러니까 분모에 들어갈 경우의 수는 1, 2, 3, 4, 5, 6, 7, 8을 주어진 8자리에 배열하는 방법의 수니까 8!까지는 됐는데요.
<SYNC Start=2125341><P Class=KRCC>
분자에 들어갈 말은 무엇입니까? 이렇게 더해도 이렇게 더해도 어차피 가운데가 0이니까 이렇게 3개를 더해도 홀수, 3개를 더해도 홀수, 3개를 더해도 홀수, 3개를 더해도 홀수가 되도록. 그렇다면 3개 더해서 짝수, 홀수는
<SYNC Start=2146824><P Class=KRCC>
2개로 나눠 생각하는 게 편하거든. 그러니까 어차피 이렇게 3개를 더하나 이렇게 3개를 더하나 이렇게 3개를 더하나 이렇게 3개를 더하나 여기와 여기는 이쪽을 더할 때도 이쪽을 더할 때도, 그러니까 여기에 들어갈 놈은
<SYNC Start=2160381><P Class=KRCC>
여기를 더할 때나 여기를 더할 때나 얘가 중복돼서 계산이 되지. 그러니까 그것은 좀 이따 생각을 하더라도 뭘 가지고 생각하는 것이 더 좋냐면, 나 같으면 이 끝에 것을 가지고 먼저 분류를 하겠어. 이렇게.
<SYNC Start=2182482><P Class=KRCC>
물론 어떻게 생각해도 돼? 안쪽에 있는 이 4개를 가지고 분류해도 돼. 어차피 지금 1, 2, 3, 4, 5, 6, 7, 8이 중요한 것이 아니라 더해서 홀수, 짝수가 문제니까. 짝수가 몇 개 있어요, 지금? 4개, 2, 4, 6, 8.
<SYNC Start=2195214><P Class=KRCC>
홀수는? 4개. 4개, 4개씩 있는 짝수와 홀수를 어떻게 배열할까가 지금 문제가 되는 거거든. 일단 스타트, 생각의 시작은 이 4개를 기준으로 분류해도 되고, 이 바깥의 것을 기준으로 분류해도 된다고. 뭘 기준으로 분류할래, 채민아.
<SYNC Start=2213815><P Class=KRCC>
채민이가 하라는 대로 할게, 그냥. (바깥 것.) 바깥 것을 가지고 분류를 하고 싶대. 생각을 바꿀 생각이 있니? 없어도 괜찮아. 바깥 것으로 하자고. 여러분은 안쪽 것으로 한번 해봐. 바깥 것을 기준으로.
<SYNC Start=2232126><P Class=KRCC>
이 바깥에는 짝수 4개 또는 홀수 4개 또는 짝수 2개 홀수 2개, 또는 홀수 3개 짝수 하나, 또는 짝수 3개 홀수 하나, 그것밖에 없지. 맞아요. 그럼 그걸 다 체크해 보자 이거지. 양 사이드에 홀수 4개를 집어넣자.
<SYNC Start=2255289><P Class=KRCC>
여기 홀이라는 글자 쓰기 귀찮으니까 짝수를 동그라미, 동그라미가 또 겹치는구나. 체크. 홀수를 점, 이렇게 갈게. 양 사이드에 홀수, 홀수, 홀수, 홀수. 그러면 나머지 짝수는 여기 채워야지. 그러면 이렇게 3개 더해서
<SYNC Start=2282373><P Class=KRCC>
홀수가 되는지를 체크해 보자 이거야. 이렇게 더하면 뭐야? 짝수. 거기에 홀수 더하니까 뭐야, 시작. 홀수, 맞아. 이것도 짝수, 홀수니까 홀수. 이렇게 짝수, 홀수니까 아, 짝수 홀수니까 아, 되는구나.
<SYNC Start=2294481><P Class=KRCC>
그러니까 양 사이드에는 어떻게 세워도 돼, 시작. 홀수 4개를 이렇게 채워 넣어도 좋고, 여기 4개만 더 채우면 돼요. 맞아? 그다음에 이번에는 홀수 2개, 짝수 2개. 홀수 2개를 이렇게 한번 만들어 볼게.
<SYNC Start=2322204><P Class=KRCC>
그다음에 짝수 2개를 이렇게 한번 만들어 볼게, 되는지. 홀홀짝짝, 이것도 가능할 거고 또 뭐도 가능해? 대각선으로 홀홀짝짝도 가능할 거란 말이야. 이걸 다 체크해 봐야 돼. 이렇게 홀홀짝짝이라면, 여러분,
<SYNC Start=2340903><P Class=KRCC>
홀홀짝짝, 홀수 2개 짝수 2개 썼으니까 우리 지금 가지고 있는 숫자는 여전히 홀수 2개, 짝수 2개가 남았어. 걔를 가지고 이 안쪽에 있는 4개를 채워야 되는데, 여기에 지금 홀수를 채워 놨으니 2개 더해서 뭐가 돼야 돼?
<SYNC Start=2353861><P Class=KRCC>
짝수. 그럼 2개 더해서 짝수가 되는 방법, 뭐가 있니? 홀수 2개, 짝수 2개도 가능하고, 아니면 짝수 2개, 홀수 2개도 가능해. 맞지. 왜? 여기가 홀수니까 2개는 홀수가 돼야 되거든. 아니구나. 아, 짝수가 돼야 되거든. 미안합니다.
<SYNC Start=2375583><P Class=KRCC>
짝수가 되려면 홀수 2개도 되고 짝수 2개도 되니까. 일단 여기가 홀수 2개라면 이렇게 더하면 홀수 맞아. 그런데 얘는 또 짝수지. 짝수에다 홀수 2개 더하니까 홀수 2개 더하면 홀수에다가, 아 홀수 2개면 짝수에 짝수 더하니까.
<SYNC Start=2392328><P Class=KRCC>
또 안 돼, 이렇게 하면. 그러니까 아, 여기에 홀수 2개가 안 되는구나. 그렇다면 짝수 2개를 한번 생각해 보면. 이렇게는 홀수가 됐는데, 이렇게는 또 어떻게 되느냐. 또 홀수 2개, 짝수에 짝수니까 
<SYNC Start=2409272><P Class=KRCC>
이렇게 하면 또 짝수가 돼서 또 안 돼. 그 얘기는 뭐는 안 된다는 애기야? 홀홀짝짝은 안 돼. 그럼 뭘 생각하자? 홀홀을 대각선, 짝짝도 대각선으로 배열하는 방법을 생각해 보자. 복잡합니다, 정말. 
<SYNC Start=2426842><P Class=KRCC>
그러면 나머지 2개, 홀홀짝짝은 또 어떻게 만드느냐. 여기 홀수가 있으니까 2개 더해서 뭐가 돼야 돼요? 짝수가 돼야 돼. 짝수가 되는 방법은 짝짝 가능하고 홀홀도 가능해. 2개 체크해 보자. 짝짝일 때는 얘가 홀수인 것 됐어.
<SYNC Start=2442637><P Class=KRCC>
얘도 홀수인 것 맞아. 얘도 홀수야. 얘도 홀수야. 되는구나. 뭐가 돼? 여기 홀홀에 짝짝에 여기 짝수 2개 홀수 2개가 되는구나. 짝수 2개, 홀수 2개가 된다면 이쪽에 홀수 2개도 되겠습니까? 될까, 안 될까.
<SYNC Start=2474841><P Class=KRCC>
당연히 된다고, 대칭성, 같은 입장이니까. 그러니까 내 말은 무슨 말이냐. 여기에 홀수 2개, 짝수 2개도 가능하고. 홀수, 홀수, 짝수, 짝수 중에서 여기 홀수 2개, 짝수 2개도 가능하다. 그런데 어차피 우리 대칭성이 있으니까
<SYNC Start=2509171><P Class=KRCC>
지금 뭐 한 거냐면 홀홀짝짝, 홀홀짝짝, 반대. 짝짝홀홀도 되겠지. 짝짝홀홀, 짝짝홀홀. 짝짝홀홀. 당연히 될 거라고. 반대로 대칭성이니까. 그런데 아까는 어떻게 했느냐. 이렇게 이 4개를 이 십자가 점선에 있는 4개를
<SYNC Start=2534707><P Class=KRCC>
짝짝홀홀, 홀홀짝짝이 가능했으니까. 대칭할 거라면 이렇게만 되면 되지, 이렇게. 이해돼요? 이 방향으로. 대칭성을 가지고. 홀홀짝짝, 또는 짝짝홀홀이 가능할 것이다, 이 얘기라고요. 됐어. 그래서 어디까지는 생각했니?
<SYNC Start=2563161><P Class=KRCC>
홀수가 4개, 또 있지. 짝수가 4개도 가능하잖아. 아, 짝수가 4개는 불가능하다. 오, 큰일 날 뻔 했다. 짝수가 4개는 불가능합니다. 짝수가 4개인 경우에는, 큰일 날 뻔 했다. 이렇게 더하면 뭐가 되니까? 짝수가 되니까.
<SYNC Start=2582424><P Class=KRCC>
이건 안 되네. 그래서 홀수가 양 사이드에 4개, 짝수가 안쪽에 4개. 얘는 홀수 2개, 짝수 2개. 홀수 2개 짝수 2개는 대각선으로 분배해 줘야 되고. 마지막, 이제 뭐 생각해볼 만하니. 홀수 3개, 짝수 하나.
<SYNC Start=2601878><P Class=KRCC>
홀수 3개, 짝수 하나를 양 사이드에 배열하는 방법은, 이제 몇 개 남았어, 홀수는? 하나 남았거든. 나머지는 다 뭐니까? 짝수니까, 이 점에서 이렇게 두 개 더해서 얘가 홀수니까 짝수가 돼야 되는데
<SYNC Start=2618956><P Class=KRCC>
짝수가 되는 방법은 짝수 2개밖에 없잖아. 이렇게도 짝수 2개밖에 없잖아. 그럼 여기도 짝수가 필요하거든. 그런데 홀수 하나밖에 안 남았지. 그러면 애당초 아예 불가능하다는 얘기니까. 아, 홀수 3개 짝수 하나는 불가능하구나.
<SYNC Start=2638165><P Class=KRCC>
마찬가지로 홀수 하나, 짝수 3개도 불가능할 듯. 이렇게. 왜? 우리는 지금 짝수 하나밖에 안 남았거든. 나머지 다 홀수거든. 여기가 홀수니까 홀수를 이렇게 채워서 이렇게 홀수는 만들었어. 그럼 여기 들어갈 것은 뭐냐.
<SYNC Start=2665357><P Class=KRCC>
이렇게 더하면 뭐예요. 홀수니까 여기는 뭐가 돼야 돼요. 짝수가 나와야 되는데 짝수가 몇 개 남았다고? 하나 남았으니까 여기까지는 만들었지만, 여기는 나머지 홀수 하나를 채워 넣으면 여기에서 다시 
<SYNC Start=2681301><P Class=KRCC>
짝수가 발생할 수밖에 없다고. 그래서 또 불가능해. 그래서 양 사이드에 홀수 3개 짝수 하나는 불가능하고 홀수 하나 짝수 3개도 불가능하니까 결국은 몇 가지로 분류해야 돼? 5가지로 분류해서 문제를 푸는 방법밖에 없겠구나.
<SYNC Start=2709049><P Class=KRCC>
그런데 이미 홀수, 짝수는 이미 다 결정해 놨잖아. 홀수가 들어갈 자리랑 짝수가 들어갈 자리랑. 그러니까 홀수 4개를 배열하면 되고, 4!. 짝수 4개를 배열하면 되니까 이런 경우의 수 몇 가지? 4!×4!가지.
<SYNC Start=2725819><P Class=KRCC>
얘도 4!×4!가지. 4!4!, 4!4!, 4!4!이니까 각각은 다 4! and 4!인데. 그런 경우가 총 몇 가지를 더할 거야? 5개를 더할 거니까 전체 경우의 수인 8!로 나눠 주면 얘가 답이 된다, 끝. 이렇게 푼다는 거지.
<SYNC Start=2746968><P Class=KRCC>
그러니까 핵심 사항은 홀수 짝수를 어떤 방법으로 분류해야 되겠습니까가 가장 중요한 작업이 된다. 그 다음부터는 일이 간단해진다는 얘기야. 마무리 지어버리면 되죠. 4!, 8! 약분하면 여기는 뭐만 생겨요?
<SYNC Start=2767881><P Class=KRCC>
8, 7, 6, 5, 5랑 5는 또 약분. 8×3=24, 답은 시작. 7분의 3, 이런 느낌. 어, 7분의 3이 아니네요. 뭐 잘못 계산했어요? (네. 4!, 3...) 3, 2가 되네. 14분의 1이 있어요? (네.) 끝까지 약분하세요. 시작. 14분의 1.
<SYNC Start=2793364><P Class=KRCC>
그래서 최종적인 답은 시작, 1번. 이런 느낌으로 해결할 수 있겠다, 이렇게. 지금 실력완성 1번 문제는 좀 그렇다 치더라도 2번이랑 3번은 정말 킬러 문제고요. 아마 제 생각에는 이 정도 수준까지는 그래도,
<SYNC Start=2809434><P Class=KRCC>
‘낼까?’라는 생각까지 들 만큼 심하게 어렵기는 했는데. 그래도 차근차근 생각해 나가면, 우리 아까 채민이가 뭘 기준으로 생각하자 그랬어? 테두리를 기준으로 생각하자 그랬잖아. 어차피 싸우면 홀수, 짝수,
<SYNC Start=2825754><P Class=KRCC>
각각 4개씩을 배열하는 싸움이니까. 어떻게 배열해야 될 지를 한 번씩 생각해 보면. 그래서 양 사이드에는 홀수만 4개 또는 홀수 2개 짝수 2개를 대각선 모양으로. 대각선 모양으로 세운다 그래도 
<SYNC Start=2840612><P Class=KRCC>
나머지 애들을 막 세울 수 있는 것은 아니고. 방향성 있는 대각선으로 처리해야 된다는 것. 그래서 총 5가지의 짝수 홀수 배열 상태를 만들어 낼 수 있다. 그런데 각각의 경우의 수는 4!, 4! 가질 테니까.
<SYNC Start=2856595><P Class=KRCC>
그래서 4!, 4! 곱해서 5까지 곱하면 분자가 된다. 이런 느낌으로 해결할 수 있겠습니다. 정말 수고 많이 하셨고요. 다음 시간에 조건부확률부터 들어가도록 하겠습니다. 수고하셨습니다.
<SYNC Start=2869416><P Class=KRCC>

</BODY>
</SAMI>
