<SAMI>
<HEAD>
<TITLE>Time Tools (C) CCNSOFT 2005</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:12pt; text-align:left;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:#405A8D; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; }
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:20pt; }
#SmallPrn { Name:Small Print; font-size:10pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=16986><P Class=KRCC>
딴따단따딴딴딴 딴딴~ 아주 좋은 노래죠. 어화둥둥이라는 노래로 시작한 EBS 수능특강 확률과 통계. 우리 딱 하나 남았어요, 이제. 레벨 3. 그렇지? 레벨 3 어려운 문제들인데 여러분 반드시 한번 정도는 생각해보고 수업을 들어라. 
<SYNC Start=35530><P Class=KRCC>
그중에서도 세 번째 문제는 함수의 개수 이야기니까 함수의 개수는 제가 또 따로 공부를 한다 그랬습니다. 그래서 1번, 2번은 확실하게 아직까지 풀지 않았다. 
<SYNC Start=45184><P Class=KRCC>
그런 친구들은 살짝 일시정지를 누르시고 1번 문제 한번 풀어보시고 2번도 풀어보고 그리고 수업을 들으시는 게 좋다는 말씀을 드릴게요. 첫 번째 문제부터 한번 풀어보도록 하겠습니다.
<SYNC Start=58020><P Class=KRCC>
1부터 9까지 자연수가 하나씩 적혀 있는 9개의 공을 일정한 간격을 두고 원형 탁자 위에 원형으로 배열할 때. 여기까지만 출제했다 그러면 9개의 공을 일렬로 배열하는 거는 9!이지만 원형 형태로 배열하면 8!이 된다.
<SYNC Start=73667><P Class=KRCC>
정확하게 이야기하면 최초에 1명이 앉는 방법의 수 1가지×나머지는 직순열 이렇게 처리한다 그랬어. 그런데 서로 이웃한 2개의 공에 적혀 있는 수는 반드시 서로소. 아 나 정말. 서로소가 되도록. 서로소가 뭐야? 서로소.
<SYNC Start=88257><P Class=KRCC>
1 이외에는 공약수가 서로 없는 거. 그러니까 쉽게 이야기해서 겹쳐지는 재료 중에서 공통된 재료가 없는 거야. 무슨 말이냐 하면 1부터 9까지 숫자를 한번 써볼까요? 1, 2, 3, 4, 5, 6, 7, 8, 9.
<SYNC Start=102697><P Class=KRCC>
얘네들을 분해해보면 더 이상 쪼갤 수 없는 숫자를 소수라고 그래요. 소수로 분해해보면 얘는 분해가 안 되고요. 얘는 그냥 1이고요. 2는 2. 3은? 그래, 1도 1이라 그러자. 물론 1은 소수는 아니지만.
<SYNC Start=117841><P Class=KRCC>
분해할 때까지 한번 분해해보면 3은 그냥 3이고 4는 2 2개. 5는 그냥 5고 6은 2 하나, 3 하나. 7은 7이고 8은 2 3개. 9는 3 2개. 그러니까 이 2개는 서로소지. 왜? 얘는 2만 3개, 얘는 3만 2개니까 겹쳐지는 게 없다고.
<SYNC Start=137976><P Class=KRCC>
그러니까 공통적으로 가지고 있는 인수가 없다고. 이 2개도 서로소죠. 이 2개도 서로소예요. 이 2개는 서로소죠. 이 2개는 서로소. 이 2개도 서로소. 서로소. 그냥 이렇게 배열하면 되겠네.
<SYNC Start=150675><P Class=KRCC>
그런데 뭐가 또 서로소가 아니냐 하면 2랑 4는 2는 2 하나 있는 거고 얘는 2 2개 있는 거니까 2가 공통적으로 들어 있잖아. 이런 거는 서로소라고 볼 수가 없다. 아니면 3이랑 6.
<SYNC Start=164452><P Class=KRCC>
3은 3으로만 이루어져 있고 6은 2와 3으로 이루어져 있으니까 공통 인수 있잖아요. 3이 공통적으로 들어 있잖아. 이런 건 서로소가 아니다 이거야. 아니면 6과 9. 얘는 3이 2개, 얘는 2 하나, 3 하나.
<SYNC Start=178234><P Class=KRCC>
3이 공통적으로 들어 있으니까 이런 것도 서로소가 아니다. 그러니까 얘네들끼리 이웃하면 돼요, 안 돼요? 안 돼요. 얘네들끼리도 이웃하면 안 되고 얘네들끼리도 이웃해서는 안 된다. 이웃한 2개는 서로소가 되어야 된다.
<SYNC Start=192044><P Class=KRCC>
그러면 이 중에서 가장 자유로운 녀석. 모든 애들과 서로소인 애들은 누구일까요? 1, 그리고 5, 그리고 7 얘네들. 나머지 애들은 다 서로소일 것 아니야. 나머지 애들과는. 왜? 7을 가지고 있는 애들이 없잖아. 
<SYNC Start=210035><P Class=KRCC>
5를 가지고 있는 애들도 없고 1은 모든 수와 서로소가 되는 거니까 1과 5와 7은 가장 자유롭죠. 붙어 있어도 되고 떨어져 있어도 되고. 그러니까 아무런 제약 조건이 없는 게 바로 1과 5와 7이구나.
<SYNC Start=223487><P Class=KRCC>
이렇게 이런 문제가 나오면 1부터 9까지 재료들을 한번 눈여겨봐야 된다. 이런 이야기야. 그리고 2 옆에는 누가 못 와? 2가 들어 있는 숫자, 다른 말로 4, 6, 8, 이런 애들은 2 옆에는 절대로 올 수 없어.
<SYNC Start=239067><P Class=KRCC>
3 옆에도 3이 들어 있는 숫자 6과 9는 3 옆에 올 수 없다. 가장 자유로운 애들은 누구? 1, 5, 7. 그리고 나머지 애들은 2와 3으로 이루어져 있으니까 2가 들어 있는, 2를 가지고 있는,
<SYNC Start=257488><P Class=KRCC>
2를 인수로 하는 그런 숫자 옆에는 2가 없는 녀석이 와야 되고 3을 인수로 하는 숫자 옆에는 3이 없는 녀석이 와야 돼. 그런데 이 6은 2도 가지고 있고 3도 가지고 있으니까 나머지 얘네들이 아무도 못 오지.
<SYNC Start=275236><P Class=KRCC>
6 옆에는 2도 못 오고 3도 못 오고 4도 못 오고 8도 못 오고 9도 못 와. 그러면 6 옆에는 누가 와야 돼요? 내가 아까 색칠한 1과 5와 7. 이 자유로운 녀석들. 그러니까 6 옆에는 무조건 1, 5, 7 중에서 2명이 와야 된다 이거야.
<SYNC Start=291796><P Class=KRCC>
그래서 이 숫자들 중에서 이런 생각이 나는 드는 거지. 2 옆에는 3이 와도 되고 9가 와도 되고 1이 와도 되고 5도 와도 되고 올 게 워낙 많은데 6이 가장 제약 조건이 많다는 거야.
<SYNC Start=312017><P Class=KRCC>
6 옆에는 2가 들어 있는 숫자가 와서도 안 되고 3이 들어 있는 숫자가 와서도 안 되니까 2, 4, 6, 8, 3, 9가 아무도 6 옆에는 올 수 없고 6 옆에는 오로지 누구밖에 올 수 없다? 1, 5, 7밖에 올 수 없다는 거야.
<SYNC Start=328311><P Class=KRCC>
그래서 저는 이 문제를 풀 때 맨 처음에 드는 생각이 6 옆에 뭐 사이에 뭐가 오도록처럼 6 옆에는 반드시 1, 5, 7 중에서 2명이 와 있어야 되는구나. 그래서 차라리 나 같으면 박스를 만들 것이다. 이런 이야기야.
<SYNC Start=349704><P Class=KRCC>
6 옆에는 무조건 뭐가 와야 되니까? 1 또는 7이 와야 되는 거니까. 마치 뭐 만드는 것처럼? 시작. 박스 만드는 것처럼 처리하시면 된다. 아니면 굳이 박스를 만들지 말고 어차피 원순열이니까 6을 맨 처음에 앉혀.
<SYNC Start=369328><P Class=KRCC>
6을 배열하는 방법의 수 몇 가지? 시작. 1가지. 1가지인 이유는 뭐다? 모두 다 똑같은 자리니까. 여기 또는 여기 또는 여기 또는 여기 또는 여기 또는 여기 또는이 아니라 다 돌리면 똑같으니까 6을 앉히는 방법의 수 몇 가지? 시작.
<SYNC Start=383039><P Class=KRCC>
1가지. 그리고 지금부터는 다 무슨 순열이야? 이미 직순열로 바뀐 거야. 맞아요? 그러니까 이 자리, 이 자리 다 구분이 된다고. 그런데 내가 아까 조금 전에 이야기했지만 6 옆에는 반드시 누가 와야 된다고?
<SYNC Start=396334><P Class=KRCC>
1, 5, 7 중에 하나씩 와야 되는 거니까 여기를 채우는 방법의 수 몇 가지야? 1, 5, 7 중에 하나니까 3가지 and 여기를 채우는 방법의 수도 1, 5, 7 중에 1명 왔잖아. 
<SYNC Start=408870><P Class=KRCC>
그러니까 나머지 2명 중에서 아무나 올 수 있으니까 몇 가지? 시작. 2가지다. 이런 이야기야. 이렇게 경우의 수를 썼으면 뭐해도 된다고? 확정지어도 된다 그랬으니까 예를 들어서 여기 1이 오고 여기 5가 왔다.
<SYNC Start=422111><P Class=KRCC>
이렇게 이야기하자고. 그러면 이미 1, 6, 5는 자리에 앉힌 거야. 그러면 누구만 남았어? 1, 5, 7 중에서 2명이 왔으니까 7은 아직 남아 있고 6은 앉았고 1도 앉았고 5도 앉아 있으니까 7은 상당히 자유로울 텐데
<SYNC Start=448254><P Class=KRCC>
얘는 맨 마지막에 아무데나 앉으면 되고 지금부터는 2, 4, 8. 이 3명은 서로 붙어 있으면 된다, 안 된다? 안 되고 3과 9도 서로 붙어 있으면 돼요, 안 돼요? 안 돼요. 그러면 제약 조건이 제일 많은 게 누구예요? 2, 4, 8이죠. 
<SYNC Start=464937><P Class=KRCC>
서로 붙어 있으면 안 되니까. 제약 조건이 제일 없는 건 누구야? 7. 7은 맨 마지막에 나머지 자리에 아무데나 앉아도 상관없는 거니까 이걸 먼저 앉히지 말고 나머지 2, 3, 4, 7, 8, 9.
<SYNC Start=478273><P Class=KRCC>
하나, 둘, 셋, 넷, 다섯, 6명을 여섯 자리. 직순열이야. 하나, 둘, 셋, 넷, 다섯, 여섯 자리에 앉힐 텐데 누구를 먼저 앉히자고? 제약 조건이 제일 많은 2, 4, 8을 먼저 앉히자 이거야. 그런데 2, 4, 8은 서로 붙어 있으면 돼, 안 돼?
<SYNC Start=494378><P Class=KRCC>
안 돼. 이웃하면 안 돼. 그러니까 2, 4, 8. 3명을 먼저 앉힐 텐데 3명이 들어올 자리는 뭐냐 하면 여기, 여기, 여기 이렇게 올 수도 있고 그러면 이웃하지 않잖아. 중간에 칸막이들이 들어왔으니까.
<SYNC Start=509034><P Class=KRCC>
아니 그러니까 세 자리는 이미 occupy 됐잖아요. 지금 하나, 둘, 셋, 넷, 다섯, 여섯. 여섯 자리에 2, 4, 8, 3, 9, 7. 2, 4, 8은 서로 붙어 있으면 안 되고 3, 9도 떨어져 있어야 되는데 7은 아무데나 와도 된다고. 
<SYNC Start=534618><P Class=KRCC>
2, 4, 8 먼저 앉히자니까. 어차피 직순열이니까. 2, 4, 8이 앉는 자리를 보면 직순열이라고. 여기, 여기, 여기 이렇게 앉을 수도 있고 아니면 하나가 여기로 와서 여기, 여기, 여기 이렇게 앉을 수도 있고
<SYNC Start=560706><P Class=KRCC>
아니면 여기, 여기, 여기 이렇게 앉을 수도 있고 아니면 여기, 여기, 여기 앉을 수도 있지. 네 자리 중에 하나라니까. 네 세트 중에 하나라니까. 2, 4, 8이 들어갈 수 있는 자리. 다시. 다시.
<SYNC Start=582656><P Class=KRCC>
2, 4, 8이 들어갈 수 있는 자리는 여기랑 여기랑 여기 이렇게. 하나, 둘, 셋, 넷, 다섯, 여섯 자리 중에서 앉고 1칸 띄고 앉고 1칸 띄고 앉고 이렇게.
<SYNC Start=601249><P Class=KRCC>
이렇게 앉을 수 있고 아니면 이웃하지만 않으면 되니까 여기로 와서 앉고 1칸 띄고 앉고 2칸 띄고 앉고. 맞아요? 그러면 여기, 여기 앉는 방법은 했으니까 여기랑 여기 앉는 방법을 한번 생각해보면 나머지 하나는 어디 앉아야 돼?
<SYNC Start=625306><P Class=KRCC>
여기 앉아야 되잖아. 현재까지 몇 가지야? 3가지가 있고 그러면 더 이상 없으니까 첫 번째 녀석을 여기라고 잡으면 그다음에는 무조건 여기와 여기 앉아야 될 것 아니야. 더 이상 없잖아.
<SYNC Start=642970><P Class=KRCC>
2, 4, 8이 앉을 수 있는 세 자리는 통통통, 통통통, 통통통, 통통통, 4개 중에 하나라고. 맞아요? 맞잖아. 그래서 네 자리 중에서 한 자리를 선택하는 거야. 마음을 먹는 거지. 거기다 앉혀야겠구나.
<SYNC Start=671497><P Class=KRCC>
이렇게 세 자리에다가 2, 4, 8을 앉혀야 되겠구나 마음을 먹고 그 세 자리에다가 2, 4, 8을 앉혀. 그러면 몇 명 남았어? 3명. 누구야, 걔? 3, 9, 1. 3, 9, 7. 3, 9, 7은 여기 아무렇게나 앉아도 되잖아.
<SYNC Start=699539><P Class=KRCC>
그중에서 제한 조건이 있는 누구니까? 3과 9니까 3과 9는 찢어야 되는데 이웃하면 안 되는데 이미 다 찢어져 있으니까 3, 9, 7 앉아버리면 되잖아. 이러면 틀려. 왜 틀릴까? 어디서 틀렸을까, 채민아. 
<SYNC Start=723985><P Class=KRCC>
(3, 9가 이웃하게 앉는 경우) 그렇지. 이 네 자리 안에는 아주 정확해. 퇴근해도 돼. 퇴근! (수고하셨습니다) 조금만 이따가. 뭐라고?
<SYNC Start=740458><P Class=KRCC>
이 네 자리 중에는 지금처럼 자연스럽게 아무렇게나 앉아도 3, 9, 7이 특히 3, 9가 이웃하지 않도록 앉을 수도 있지만 아까 이 네 자리 중에서 한 자리를 선택할 때 2, 4, 8이 만약에 이렇게 오는 자리를 선택했다면
<SYNC Start=759962><P Class=KRCC>
여기, 여기, 여기 오는 자리를 선택했다면 3, 9가 이렇게 앉으면 돼, 안 돼? 안 된다 이거야. 그러니까 조금 전에 네 자리 중에서 한 자리를 선택할 때 그 네 자리의 짜임새가 앉을 자리, 띄우고, 앉을 자리, 띄우고,
<SYNC Start=786665><P Class=KRCC>
앉을 자리 이렇게 될 때랑 앉을 자리, 띄우고, 띄우고, 앉을 자리, 띄우고, 앉을 자리, 이렇게 될 때로 여기에서 한 방으로 못 가고 뭐해야 된다? 시작. 분류해야 된다는 거야. 여기서부터 분류해서 풀어야 돼요. 분류해서.
<SYNC Start=802850><P Class=KRCC>
2, 4, 8이 들어갈 자리를 분류해야 된다 이거지. 총 4가지 중에서 2, 4, 8이 들어갈 자리. 첫 번째는 샥, 샥, 샥 이렇게도 갈 수 있고 아니면 샥, 샥, 샥 이렇게도 앉을 수 있고. 왜 이렇게 표현이 안 되니, 오늘.
<SYNC Start=838640><P Class=KRCC>
아니, 이렇게 앉는다 그러면 나머지 세 자리는 어차피 이웃하지 않도록 되어 있지. 그러니까 이렇게 앉는다. 또는 이렇게 앉는다. 그 둘 중에 하나를 선택해서 2, 4, 8을 앉히는 거야. 예컨대 그 둘 중에 확정짓겠어.
<SYNC Start=866737><P Class=KRCC>
뭐라고 그럴까? 예를 들어서 이렇게, 이렇게, 이렇게 세 자리에 2, 4, 8을 앉힌다고 하면 맞니? 2, 4, 8. 3명을 그 세 자리에 앉히고. 3!. 이미 직순열이니까. 끝나지 않았고 몇 자리 남았는데? 
<SYNC Start=888630><P Class=KRCC>
세 자리 남았는데 3, 9만 제한 조건이 있잖아. 붙어 있으면 안 된다. 그런데 저 세 자리는 어차피 이웃하지 않으니까 7이랑 한꺼번에 3, 9, 7을 일렬로 배열하면 된다 이거야.
<SYNC Start=902163><P Class=KRCC>
이렇게 마무리되거나 아니면 2, 4, 8이 들어갈 세 자리를 만드는 데 있어서 2, 4, 8이 2칸 떨어져서 이렇게 되거나 또는 1칸 떨어지고 여기서 이렇게 2칸 떨어지거나. 그러니까 쉽게 이야기해서 양 사이드.
<SYNC Start=936872><P Class=KRCC>
그리고 하나가 여기거나 여기인 거. 그러면 한쪽은 1칸 떨어졌지만 한쪽은 2칸 떨어져 있잖아. 이 2가지 중에 하나를 선택해서. 예를 들어서 뭘 선택했다 그럴까? 이렇게, 이렇게. 2칸 떨어져 있고 1칸 떨어져 있는.
<SYNC Start=960079><P Class=KRCC>
그 세 자리에다가 2, 4, 8을 줄 세우고 이제 뭐만 남았는데? 3, 9, 7만 남았는데 3, 9, 7을 이 세 자리에다가 아무렇게나 줄 세우면 안 된단 말이야. 왜? 3, 9가 붙어 있으면 안 되니까.
<SYNC Start=974181><P Class=KRCC>
그러니까 얘네들은 3과 9로 이루어져 있으면 안 되니까 7이 반드시 이 둘 중에 하나에 들어와야 되잖아. 7을 세우는 방법의 수가 2가지고. 왜? 둘 중에 하나는 반드시 7이어야 되니까.
<SYNC Start=991542><P Class=KRCC>
아직도 일이 끝나지 않았고 이제 3, 9가 남았을 텐데 그 3, 9는 자연스럽게 이웃하지 않을 거란 말이지. 그러니까 3, 9를 줄 세우면 되지. 끝. 이렇게 분류해서 풀어야 된다 이거예요.
<SYNC Start=1006331><P Class=KRCC>
내가 여러 번 생각해봤는데 이 방법이 제일 쉬워요. 이렇게 하세요. 다른 방법보다는 이게 나을 거야. 그러면 답은 뭐야? 분류했을 때는 더하는 거니까 얘랑 얘를 더한 다음에 
<SYNC Start=1034100><P Class=KRCC>
그 더한 녀석에다가 2 곱하고 3 곱하면 최종적인 답이 나오는 거지. 이해가 돼요? 이건 여러분 완벽하게 설명해야 돼. 6×6=36, 36×2니까 여기가 72가지고 얘는 2×2=4, 4×2=8. 8×6=48가지란 말이야.
<SYNC Start=1051560><P Class=KRCC>
2개 더하면 얼마야? 120. 120에다가 6을 곱하니까 최종적인 답 얼마야? 시작. 720가지. 답은 5번 이렇게 처리한단 말이지. 다시. 이거 안 돼. 안 돼, 안 돼, 안 돼, 안 돼. 꺼림직, 꺼림직, 꺼림직, 꺼림직.
<SYNC Start=1069043><P Class=KRCC>
1, 2, 3, 4, 5, 6, 7, 8, 9를 분석해봤더니 가장 제한 조건이 심한 게 6이야. 6 주위에는 1, 5, 7밖에 못 와. 2 주위에는 4 못 오고 8 못 오고 6 못 오고 나머지는 다 올 수 있잖아요. 맞잖아.
<SYNC Start=1090285><P Class=KRCC>
그래서 생각하기가 더 고통스러운데 차라리 제한 조건이 제일 심한 6 같은 경우는 2도 가지고 있고 3도 가지고 있기 때문에 6 옆에 올 녀석들은 1과 5와 7밖에 없구나. 그래서 6을 앉히는 방법의 수 1가지.
<SYNC Start=1106132><P Class=KRCC>
양 사이드에 3명 중에서 2명 뽑아서 앉히면 되니까 3P2 and. 그래서 예컨대 5와 7이 왔다면 이제 누구는 남아 있고? 1 남아 있고 2, 4, 8 남아 있고 3, 9 남았다. 6명이 나머지 여섯 자리에 앉아야 된다 이거지. 
<SYNC Start=1124836><P Class=KRCC>
그래서 지금부터 이 6명을 앉힐 생각을 하는데 얘는 아무데나 막 앉아도 되니까 처음부터 앉히지 말고 제한 조건이 제일 심한 애가 이거랑 이건데
<SYNC Start=1137296><P Class=KRCC>
얘는 2개밖에 안 되니까 이걸 먼저 기준으로 2, 4, 8을 어떻게 앉혀야 될까 생각을 해보자고. 그러면 이렇게 앉거나 이렇게 앉을 수도 있고 이렇게 앉을 수도 있고 4가지 중에 하나네.
<SYNC Start=1150980><P Class=KRCC>
그런데 4가지 중에 하나를 선택해서 2, 4, 8을 앉힌다 그래도 걔네들을 앉히고 난 다음에 1, 3, 9를 앉힐 때가 문제인데 3과 9는 또 찢어놔야 된다는 거지.
<SYNC Start=1162285><P Class=KRCC>
그런데 2, 4, 8을 앉히고 띄우고 앉히고 띄우고 앉히고 이런 방법으로 앉힌다면 나머지 세 자리 역시 이웃하지 않도록 자연스럽게 칸막이가 세팅이 되어버리니 부담 없이 나머지도 3!로 처리하면 되는데
<SYNC Start=1178706><P Class=KRCC>
만약에 2, 4, 8을 앉히는데 이렇게 앉혔다. 이렇게라는 게 무슨 말이야? 두 자리가 칸막이가 2개 생기도록 앉혔다. 해버리면 3과 9를 앉힐 때 여기다 3과 9를 앉히면 돼, 안 돼?
<SYNC Start=1194627><P Class=KRCC>
안 된다는 제한 조건이 또 들어오니까 여기서 2가지로 나눠야 되겠구나. 분류해야 되겠구나. 어떻게 분류합니까? 첫 번째, 칸막이 1개로만 이루어진 경우. 칸막이가 2개짜리로 이루어진 경우. 칸막이가 1개, 칸막이가 2개.
<SYNC Start=1212803><P Class=KRCC>
이거 우리끼리 하는 이야기지만 조금 전처럼 이렇게 칸막이가 2개 생기는 경우랑 칸막이가 무조건 1개만 생기는 경우로 나눠서 생각하자. 누구를 앉힐 때? 2, 4, 8을 앉힐 때 말이야.
<SYNC Start=1226290><P Class=KRCC>
첫 번째, 칸막이가 하나로만 생기도록 2, 4, 8을 앉히는 방법은 앉고 칸막이 하나, 앉고 칸막이 하나, 앉고 이렇게 앉히거나 앉고 칸막이 하나, 앉고 칸막이 하나,
<SYNC Start=1235295><P Class=KRCC>
앉고 이렇게 앉히거나 2, 4, 8이 들어갈 3칸을 설정하는 방법의 수가 2개 중에 하나다 이거지. 그중에 하나를 결정한 다음에 예를 들어서 이렇게 결정했다고 하면 2, 4, 8 3개의 숫자를 앉힌다 이거고
<SYNC Start=1256451><P Class=KRCC>
그런 다음에 1, 3, 9 남았는데 1, 3, 9는 자연스럽게 3과 9가 이웃하지 않도록을 만족시킬 수밖에 없으니 그냥 1, 3, 9를 한방에 앉혀버리면 끝나겠다.
<SYNC Start=1266330><P Class=KRCC>
단, 칸막이 2개짜리가 들어가는 경우는 예를 들어서 이렇게 앉히거나 아니면 이렇게 앉히거나 둘 중에 하나를 선택한 다음에 일단 2, 4, 8을 앉히게 되면 이제 1, 3, 9만 앉히면 되는데 이렇게 3, 9를 앉힐 수 없다.
<SYNC Start=1290275><P Class=KRCC>
그 이야기는 1은 반드시 여기에 들어와야 되니까 1을 앉는 방법의 수 몇 가지? 시작. 2가지인데 그 전에 이건 뭐야? 2, 4, 8을 앉혀야지. 그리고 1을 앉히는데 1이 앉는 방법의 수는 2가지다 이거지. 여기 아니면 여기잖아.
<SYNC Start=1305395><P Class=KRCC>
그냥 확정지어, 이렇게. 그러면 두 자리 남았으니까 두 자리는 어차피 이웃하지 않을 테니까 3과 9를 앉힌다. 끝. 이렇게 갈 수 있는 거지. 이해되시죠? 완벽하게 설명하세요. 물론 여사건으로 풀어도 돼. 
<SYNC Start=1319091><P Class=KRCC>
아까 전처럼 그냥 네 자리 중에서 하나를 선택한 다음에 단, 3과 9가 이웃한 경우. 그런데 그게 훨씬 더 어려울 거라고요. 그래서 지금처럼 분류하는 게, 그러니까 맨 마지막에 공통적인 것 빼는 것보다는 조금 어려울 수 있으니까.
<SYNC Start=1334612><P Class=KRCC>
교집합이 발생할 경우. 그러니까 이렇게 교집합이 발생하지 않도록 뭐해주는 게? 분류해주는 게 훨씬 더 문제 푸는 데 도움이 될 수 있다. 이런 거예요. 덥지? 더워요. 감독님도 더우시죠? 지금 3명이 더위에 허덕이고 있어요.
<SYNC Start=1354188><P Class=KRCC>
시원하게 해주세요. 그런데 전화해야 돼요. 중앙냉방시스템이라서 거기다 전화해야 돼요. 조금만 시원하게 해달라고 부탁드립니다. 덥습니다. 학생들이 이걸 이해를 못하니까 덥잖아. 이해 못했을 거라고. 
<SYNC Start=1375935><P Class=KRCC>
지금은 두 번 설명했으니까 이해했을 것 같아. 완벽하게 여러분 설명하는 게. 그리고 만약에 여러분이 생각했었던 방식이 오답일 수 있잖아. 그거를 틀렸네, 어떻게 풀어야 되지? 이러지 말라니까. 
<SYNC Start=1392028><P Class=KRCC>
경우의 수, 확률과 통계만큼은 틀렸으면 틀린 이유를 알아내야 돼. 왜? 머릿속에 잘못 짜여 있는 거거든. 생각 자체가 오버카운팅이 되도록 또는 오류가 남아 있도록 생각한 거니까
<SYNC Start=1407836><P Class=KRCC>
무조건 물고 늘어져서 맞힐 때까지 여러분들이 여러분이 틀렸던 이유를 발견해내야만 한다고. 그래서 경우의 수, 확률과 통계는 처음이 조금 힘들어요. 생각하기가. 그런데 그 뒤에서부터는 좀 편해진다고.
<SYNC Start=1427117><P Class=KRCC>
뭐하기까지가 힘들어? 오류가 없도록 만들기까지가 힘들죠. 처음에는 누구나 다 오류가 생겨. 미처 생각 못하는 부분이 생길 테니까. 그런데 괜찮잖아, 이 정도는. 그래서 저는 분류라는 이야기를 첫 시간부터 했었던 거야.
<SYNC Start=1443325><P Class=KRCC>
왜? 오류를 없애는 제일 좋은 방법은 교집합이 안 생기도록 분류하는 거거든. 오버카운팅이 안 되도록 하는 제일 좋은 방법도 분류하는 거거든. 분류하고 나면 오류가 생기는 확률이 점점 적어진다.
<SYNC Start=1456775><P Class=KRCC>
알겠습니까? 여기까지가 레벨 1의 첫 번째 문제였습니다. 두 번째 문제 볼게요. a, b, b, c, c, c, c. 문자가 여러 개 있네. 이 중에서 5개를 택해서 일렬로 나열하는 거야. 다음 조건을 만족시키는 경우의 수를 구하라.
<SYNC Start=1476080><P Class=KRCC>
c는 세 번 이상 나오니까 5개 선택할 건데 c 세 번 나오면 c를 세 번 나온다 그러면 나머지 2개는 뭐로 채울 수 있어? a 하나, b 하나 채울 수도 있고 b는 2개나 있으니까 b, b 이렇게도 채울 수 있을 거 아니야. 
<SYNC Start=1490215><P Class=KRCC>
c 3개 들어오는 경우 이거밖에 없죠. 그런데 c가 세 번 이상 나온다 그랬으니까 c를 네 번 나오도록 만들 수도 있잖아. c를 네 번 나오도록 만들었다 그러면 나머지 하나는 누가 채우거나 누가 채우면 돼요?
<SYNC Start=1504343><P Class=KRCC>
a가 채우거나 b가 채우면 되잖아. 당연히 이것도 굳이 이야기하자면 4가지로 뭐해서 푸는 거야? 분류해서 푸는 거야. 얘를 가지고 만들면, 얘를 가지고, 얘를 가지고, 얘를 가지고 줄 세우는 방법의 수.
<SYNC Start=1518223><P Class=KRCC>
일렬로 나열하는 방법의 수니까 각각을 줄 세우는 방법의 수를 구한 다음에 맨 마지막에 뭐해버려? 시작. 더해버리면 된다. 그런데 두 번째 조건이 하나가 더 있어. b가 두 번 나오면 무조건 이웃하래. 
<SYNC Start=1539909><P Class=KRCC>
b 두 번 나오는 경우 뭐밖에 없어? 얘밖에 없으니까 얘는 주머니 속에 집어넣어. 가자. 이제 가자. 첫 번째 문제부터 풀자. 얘네들을 일렬로 나열하는 방법의 수를 구하시오. 시작. 5!, 3!이죠. 물어봐서 뭐해요. 60가지.
<SYNC Start=1552965><P Class=KRCC>
아, 20가지. 20가지. 120을 6으로 나누니까 5×4=20가지 이렇게 돼요. 얘를 일렬로 배열하는 방법의 수를 구하시오. b, b를 주머니 속에 집어넣었으니까 c 3개와 주머니 하나를 일렬로 배열한다.
<SYNC Start=1568796><P Class=KRCC>
주머니는 하나로 보니까 4개를 일렬로 배열하는데 c, c, c 3개 같다. 3!. 맞아요? 일 끝나지 않았어. 어떤 일? 주머니 안에 있는 애들끼리 자리 바꿔야 된다. 우리 첫 시간에 했었던 것 잊지 마세요.
<SYNC Start=1580373><P Class=KRCC>
순열 톱5. 주머니 안에 있는 애들이 그런데 똑같은 글자니까 자리 바꿈하는 방법의 수, 줄 세우는 방법의 수는 몇 가지밖에 없다? 하나밖에 없다. 그래서 몇 가지다? 시작. 4가지다. 이렇게 가시면 돼요.
<SYNC Start=1590123><P Class=KRCC>
얘를 일렬로 배열하는 방법의 수를 세라 그러면 5!÷4!. 이건 너무 쉽다. 그래서 5가지. 밑에도 똑같을 테니까 5가지. 최종적인 답은 얘네들을 다 뭐하시면 돼요? 더하면 최종적인 답이다 이거지. 
<SYNC Start=1603596><P Class=KRCC>
10, 20, 30. 거기다 4 더하니까 답은 34. 이거 실력 완성 2 아니야? 뭐가 실력 완성 2야. 레벨 3에 맞지 않습니다. 너무 쉽습니다. 그다음에 들어갈 게 레벨 3의 세 번째 이야기. 뭐의 개수? 함수의 개수. 
<SYNC Start=1623014><P Class=KRCC>
그래서 오늘은 함수의 개수 특강을 같이 한번 가보자. 여기 나오는 이 문제 약간 난이도 있는데요. 이 문제뿐만 아니라 모든 함수의 개수 문제를 다 원활하게 풀도록 하기 위해서는 다음과 같은 기본적인 마인드가 필요해요.
<SYNC Start=1639533><P Class=KRCC>
일명 함수의 개수 구하기. 함수의 개수 구하기 특강을 지금부터 시작해보도록 하겠다. 함수의 개수 물어보는 것은 중복순열뿐만 아니라 중복조합에서도 나올 수 있고 일반순열에서도 나올 수 있고
<SYNC Start=1657348><P Class=KRCC>
일반조합에서도 나올 수 있고 모든 단원에서 다 나올 수 있어. 그런데 가장 기본적인 것, 제한 조건이 제일 없는 것 기준으로 생각하면 중복순열이 가장 기본이야.
<SYNC Start=1668446><P Class=KRCC>
그래서 중복순열을 공부한 지금 함수의 개수라는 가장 유명한 패턴 이야기부터 한번 생각해보도록 하겠습니다. 해볼게요. 함수의 개수 문제 어떻게 나오느냐하면 이렇게 나와요. X에서 Y로의 함수 이렇게 되어 있다고 생각해봐.
<SYNC Start=1688412><P Class=KRCC>
1, 2, 3, 4 이렇게 갈까? 여기는 1, 2, 3, 4, 5, 6 이렇게 되어 있다 그러자. X에서 Y로의 함수 이렇게 되어 있으면 어디가 정의역이야? 시작. X가 정의역. 고1 때 배웠는데 뭐가 공역? Y가 공역.
<SYNC Start=1704452><P Class=KRCC>
함수가 성립하기 위해서는 정의역에 있는 모든 원소가 한 발씩 화살을 쏴야 된다. 함수가 되기 위한 2가지 자격 조건. all and one. 누구 기준으로? 
<SYNC Start=1718399><P Class=KRCC>
정의역 기준으로 여기에 있는 모든 원소, 정의역에 있는 모든 원소가 화살을 다 쏴야 되고요. 반드시 몇 발씩만? 한 발씩만 쏴야 된다 이거야. 모든 원소가 한 발씩만. 
<SYNC Start=1730656><P Class=KRCC>
맞는 애들은 상관없이 쏘는 애들만 기준으로 정의역만 기준으로 정의역에 있는 모든 원소가 화살을 쏴야 된다. 몇 발씩? 한 발씩 쏴야 된다. 모든 원소가, 정의역에 있는 모든 원소가 화살을 쏴야 된다. 한 발씩만 쏴야 된다.
<SYNC Start=1751433><P Class=KRCC>
예를 들어서 이렇게 있다. 이러면 함수야, 함수 아니야? 함수 맞죠. 왜? 모든 애들이 쐈고 한 발씩만 쐈으니까. 그런데 1명이 안 쐈어. 그러면 함수야, 함수 아니야? 함수 아니야. 1명이 두 발 쐈어.
<SYNC Start=1766384><P Class=KRCC>
그러면 함수야, 함수 아니야? 함수가 아니다. 이건 가장 기본적인 함수냐 함수 아니냐를 만족시키는 것. 그렇다면 함수의 개수를 세라. 이렇게 나왔어. X에서 Y로의 함수의 개수를 세라. 그러면 너무 많아.
<SYNC Start=1779969><P Class=KRCC>
아까 전처럼 다 1한테 쏴도 되고 몇 명은 1한테, 얘는 3한테, 얘는 다시 1한테 이렇게 쏴도 되고 너무 많잖아요. 그런 가짓수를 세는 방법이 뭐냐. 함수의 개수는 이렇게 기억하고 있는 게 좋아. 
<SYNC Start=1794520><P Class=KRCC>
누구랑 인터뷰를 한다? 정의역에 있는 모든 원소랑 인터뷰를 한다. 그게 함수의 개수의 가장 기본이라고 생각하면 돼요. 호텔 문제의 기본은 뭐예요? 5명이 다르게 생긴 3개의 호텔에 나누어 투숙하는 방법. 
<SYNC Start=1808952><P Class=KRCC>
서로 다른 5통의 편지를 서로 다른 3개의 우체통에. 서로 다른 5송이의 꽃을 서로 다른 3개의 꽃병에. 모두 다 인터뷰하라고 그랬어. 누구랑 인터뷰하라고 그랬어요? 시작. 움직이는 애. 그래.
<SYNC Start=1825050><P Class=KRCC>
함수의 개수는 마찬가지로 인터뷰를 하는데 누구랑 인터뷰한다? 정의역에 있는 모든 원소. 얘네들이랑 말고 정의역에 있는 모든 원소랑 인터뷰한다. 이렇게 생각하면 돼. 인터뷰하는 방식은 이거야.
<SYNC Start=1838073><P Class=KRCC>
네가 선택할 수 있는 함숫값의 개수는 몇 가지야? 얘가 선택할 수 있는 원소는 몇 가지예요? 6가지잖아요. 6가지. 일 끝나지 않았다. 이렇게. 그다음에 네가 선택할 수 있는 원소의 개수는 몇 가지냐. 또 몇 가지야? 또 6가지지.
<SYNC Start=1857537><P Class=KRCC>
왜? 쐈던 애에다가 또 쏴도 상관없으니까 또 6가지. 그러면 얘도 몇 가지예요? 얘도 몇 가지야? 시작. 6가지. 그래서 6×6×6×6이니까 6의 4제곱가지가 최종적인 답이다. 이걸 어떤 애들이 외우는 애들이 있어. 공정. 공정.
<SYNC Start=1875801><P Class=KRCC>
공정한 사회. 공정. 공역의 원소의 개수, 정의역의 원소의 개수. 공역은 원소의 개수가 6개, 정의역은 원소의 개수가 4개 이렇게 외우면 된다, 안 된다? 안 된다. 왜? 이렇게 기본적인 문제가 나오는 게 아니거든.
<SYNC Start=1890952><P Class=KRCC>
이거 외워봤자 아무런 제한 조건 없는 이 문제밖에 못 풀거든. 이러지 말고 함수의 개수 문제는 어떻게 기억한다? 정의역에 있는 모든 원소들이랑 인터뷰한다. 이렇게만 기억하시라고요.
<SYNC Start=1903624><P Class=KRCC>
정의역에 있는 모든 원소들이랑 인터뷰한다. 정의역에 있는 모든 원소들이랑 인터뷰한다. 네가 선택할 수 있는 원소는 몇 가지냐. 되죠? 네가 선택할 수 있는 원소는 몇 가지냐. 만약에 문제가 이렇게 나왔어. X에서 Y로의 함수.
<SYNC Start=1922369><P Class=KRCC>
얘들이 정의역이고 얘가 공역인데 X에서 Y로의 함수 중에서 다음을 만족시킨다. 뭘 만족시키느냐. 1:1 함수의 개수를 세시오. 1:1 함수의 개수를 세시오. 만약에 이렇게 나왔어요.
<SYNC Start=1935913><P Class=KRCC>
1:1이라는 게 뭐야? 1이 1한테 쐈는데 2가 또 1한테 쐈다. 그러면 삼각관계. 2:1이잖아요. 1:1이라는 게 바로 뭐냐 하면 모두 다 다른 애한테 화살을 쏘는 것. 얘네들을 미팅이라고 그러면 아름다운 관계지. 
<SYNC Start=1955697><P Class=KRCC>
드라마로 만들면 재미없는 그 관계. 드라마 만들면 꼭 어때요? 남자애 둘이 여자애 1명을 좋아하잖아요. 안 그러나? 남자애 둘이 여자애 1명. 남자 1명은 부잣집. 또 1명은 어렸을 때부터 친구.
<SYNC Start=1976304><P Class=KRCC>
그런가? 그러다가 그 1명은 "돈으로, 돈으로 사겠어" 막 이러고 그러잖아요. 나머지 1명은 "나는 다음 세상에서 나무가 됐으면 좋겠어" 이러고. 맞지? 그때 그랬지? 맞니? 여러분 가을동화라는 드라마 몰라요? 모르는구나. 
<SYNC Start=2001606><P Class=KRCC>
"은서야, 나는 나무가 됐으면 좋겠어" 이랬어. 준서가 은서한테. 기억나? 그런데 갑자기 원빈 아저씨가 나타나서 "얼마면 돼?" 막 이랬어. "사랑? 돈으로 사겠어" 이랬다고. 그런 관계가 드라마로 만들기에는 되게 좋잖아요. 
<SYNC Start=2023408><P Class=KRCC>
이런 게 바로 2:1. 1:1이 아니에요. 1:1은 뭐냐 하면 정말 평화로운 관계. 전쟁이 없는 관계. 얘는 얘를 좋아하고 얘는 얘를 좋아하고 얘는 얘를 좋아하고 얘는 얘를 좋아해. 아무도 안 싸울 거 아니야.
<SYNC Start=2035990><P Class=KRCC>
여자 1명에 남자 1명 이런 느낌. 이런 걸 사람들을 뭐라고 그래? 1:1 이렇게 이야기한다고. 그리고 1:1 함수가 되기 위한 1:1 함수의 개수를 세라고 그래도 똑같은 방법으로 네가 선택할 수 있는 경우의 수는 몇 가지냐. 시작.
<SYNC Start=2056295><P Class=KRCC>
6가지 이렇게 하는 거야. 다 똑같아. 정의역에 있는 모든 원소랑 인터뷰를 한다. 네가 선택할 수 있는 원소는 몇 가지야? 시작. 5가지. 왜? 얘가 이미 1명한테 화살을 쐈을 테니까 걔한테 또 쏘면 안 되잖아.
<SYNC Start=2070310><P Class=KRCC>
1:1이 되려면 2가 선택할 수 있는 경우의 수는? 시작. 하나 준다. 3이 선택할 수 있는 거 시작. 하나가 준다. 4가 선택할 수 있는 거 시작. 하나가 준다. 그래서 최종적인 답 6×5×4×3. 이거를 6P4 이렇게 외우지 말라고. 
<SYNC Start=2085916><P Class=KRCC>
1:1은 P 이렇게 외우지 말고 그냥 각각의 정의역에 있는 원소들이랑 뭐한다? 인터뷰한다. 이렇게 생각하시면 된다고. 됐어요? 내가 지금 위험한 발언한 거 없잖아. 고민하고 있다고, 내가 지금.
<SYNC Start=2106440><P Class=KRCC>
그렇지? 한국방송심의위원회의 심의 규정을 준수하고 있다고. 그리고 여러분 EBS는 완벽하게 방역 수칙을 지키고 있습니다. 그것도 여러분에게 말씀을 드리고 소독도 하고 있습니다.
<SYNC Start=2122905><P Class=KRCC>
여러분 걱정하지 말고 편안한 마음으로 보시면 된다는 말씀도 계속 드립니다. 그런데 그 1:1이라는 말을 이렇게 한글로 보통 안 나타내. 이렇게 안 써. 고1 때 배우는데 1:1을 표현하는 방식이 바로 뭐냐. 이렇게 되는 거야. 뭐냐.
<SYNC Start=2147800><P Class=KRCC>
x1과 x2가 다르면 각각의 함숫값도 다르다. 얘가 바로 뭐야? x1한테 화살 맞은 애. x1의 함숫값이라고 하죠. x2한테 화살을 맞은 애도 다르다. 이게 바로 무슨 뜻이야? 시작. 1:1 함수라는 뜻이에요.
<SYNC Start=2169256><P Class=KRCC>
그래서 이 조건도 여러분 반드시 눈에 찍어두셔야 돼. 다음을 만족시키는 함수의 개수를 구하시오. x1과 x2가 다르면 f(x1)과 f(x2)가 다르다. 이거 무슨 뜻이지? 시작. 1:1이 되라는 이야기구나.
<SYNC Start=2188105><P Class=KRCC>
알겠습니까? 왜? x가 다르면 각각의 함숫값도 다르다. 여자 1명에 남자 1명 이렇게 사이 좋게 전쟁이 없는 평화로운 분위기를 이야기하는구나. 여자애가 서로 다르면 남편도 서로 다르다.
<SYNC Start=2215496><P Class=KRCC>
우리나라 결혼 제도는 1:1 제도를 하고 있는 거죠. 지금 어떤 이야기인지 알겠지? 그렇지? 좋아요. 문제되는 이야기를 했나? 아니잖아. 그렇지? 1:1. 1:1. 아, 불안하네. 그런 표정 짓지 마요. 나 무서워요. 괜찮지? 좋아요.
<SYNC Start=2238632><P Class=KRCC>
여기까지 정확하게 이해하고 계셔야 돼. 또 어떤 것도 해볼까? 이런 것도 해볼까? a랑 f(a)랑 다르도록. 얘를 만족시키는 X에서 Y로의 함수의 개수를 세시오. 똑같이 뭐한다? 인터뷰. 누구랑? 정의역에 있는 모든 원소랑.
<SYNC Start=2261448><P Class=KRCC>
네가 선택할 수 있는 원소의 개수는 몇 가지냐. 6가지부터 시작하는 거야. 맞아? 아니야. 왜 아니야? 얘를 해석해야 되니까. 이게 무슨 뜻입니까? f(a)라는 것은 a의 함숫값.
<SYNC Start=2273050><P Class=KRCC>
얘는 a. 그러니까 a한테 화살을 맞은 애가 f(a)니까 다른 말로 얘가 쏜 애. 화살 쏜 녀석. 얘가 화살 그 녀석한테 맞은 녀석. 쏜 애랑 걔한테 화살 맞은 애. 그러니까 커플. 커플. 커플끼리 서로 다르다.
<SYNC Start=2295810><P Class=KRCC>
그러니까 1은 1한테 쏘지 마라. 다른 애한테 쏴라. 2는 2한테 쏘지 마라. 3은 3한테 쏘지 마라. 그 이야기니까 첫 번째 1이 선택할 수 있는 원소의 개수는 몇 가지냐. 1을 제외한 6가지?
<SYNC Start=2313503><P Class=KRCC>
5가지 and 2는 2 말고 아무한테나 쏘면 되잖아. 그래서 또 5가지. 3은 5가지. 다 5가지. 끝. 이런 특수한 조건이 항상 들어오기 때문에 단순하게 암기로는 안 된다는 말씀을 드려요. 선생님, 이번에는 이렇게 되어 있네요.
<SYNC Start=2333391><P Class=KRCC>
얘를 만족시키는 함수의 개수를 세시오. 이건 뭐라고 생각하면 되니? 얘가 화살 쏜 애고 걔한테 맞은 애니까 자기보다 큰 애한테 화살 쏜다는 이야기 아니야. 쏘는 애를 기준으로 생각하면. 자기보다 큰 애한테만 화살을 쏜대.
<SYNC Start=2349674><P Class=KRCC>
1이 선택할 수 있는 경우의 수는 총 몇 가지야? 자기보다 큰 녀석 몇 명이 있어? 5명이 있으니까 5가지 and 2가 선택할 수 있는 경우의 수를 세라고 그러면 자기보다 더 큰 녀석한테만 쏴야 되니까 큰 녀석은 3, 4, 5, 6. 4가지.
<SYNC Start=2365044><P Class=KRCC>
3은 자기보다 큰 애 3명이잖아. 3가지. 왜 채민아? 4가 선택할 수 있는 경우의 수 2가지. 2가지. 그래서 최종적인 답은 120가지. 끝. 이렇게. 하나만 더 해볼까? 하나만? 하나만 더 해보고 문제 풀어보자. 
<SYNC Start=2386159><P Class=KRCC>
여러분 여기 함수의 개수 특강에서 끝나는 거 아니야. 1부야. 1부. 나중에 중복조합한 다음에 또 할 거야. 다시 말씀드리지만 여러분 만점 받으셔야 됩니다. 만점 받도록 만들려면 여러분에게 설명할 것이 너무 많습니다. 
<SYNC Start=2404533><P Class=KRCC>
이번에는 이 2개를 더해서 홀수가 되는 경우의 수를 함수의 개수를 세시오. a+f(a). 2개를 더해서 홀수. 얘네들 커플이라고 그랬잖아. 쏘는 애, 맞는 애 더해서 홀수가 되어야 돼. 그런데 어차피 쏘는 애들도 보니까 자연수죠.
<SYNC Start=2424044><P Class=KRCC>
1, 2, 3, 4. 맞는 애들도 보니까 자연수야. 자연수, 자연수 더해서 홀수가 되려면 뭐랑 뭐랑 더해서 홀수가 되니? 짝수+짝수는 뭐야? 짝수. 짝수+홀수는 홀수. 홀수+짝수는 홀수. 홀수+홀수는 짝수.
<SYNC Start=2436955><P Class=KRCC>
그러니까 서로 다른 성격. 짝수+홀수가 홀수고 홀수+짝수가 홀수니까 서로 다른 성격. 그러니까 쏘는 애가 짝수일 때는 맞는 애는 홀수. 쏘는 애가 홀수일 때는 맞는 애는 짝수.
<SYNC Start=2449583><P Class=KRCC>
그러니까 네가 선택할 수 있는 경우의 수는 몇 가지냐 물어보면 얘 자체가 누구니까? 홀수니까 누구한테? 짝수한테 화살을 쏴야 된다 이거지. 그러니까 몇 가지? 시작. 3가지 and 2가 선택할 수 있는 경우의 수는 몇 가지냐.
<SYNC Start=2465406><P Class=KRCC>
몇 가지겠어? 얘 자체가 짝수니까 누구한테 쏴야 돼요? 홀수한테 쏴야겠지. 홀수가 1, 3, 5. 얘도 짝수 2, 4, 6. 홀수 1, 3, 5 이렇게 쏴야 된다. 하나만 더 하자. 아 나 정말. 다음 조건 ㄱ, ㄴ을 모두 다 만족시켜야 된다. 
<SYNC Start=2486675><P Class=KRCC>
(가), (나) 조건을 모두 다 만족시킨 함수의 개수를 세라고 한 다음에 (나)에 이렇게 되어 있어. x1과 x2가 다르면 f에 대해서 x1과 f에 대해서 x2도 다릅니다. 다 만족시켜. 그러면 얘는 무슨 뜻이니까? 시작.
<SYNC Start=2501693><P Class=KRCC>
1:1이라는 뜻이니까 1:1까지 고려. 출발해. 네가 선택할 수 있는 경우의 수는 얘가 홀수니까 짝수 2, 4, 6한테 쏴야 되니까 3가지 and 2가 쏠 수 있는 경우의 수는 짝수니까 홀수 1, 3, 5 중에 1명한테 쏴야 되니까 3가지
<SYNC Start=2518302><P Class=KRCC>
and 3은 홀수니까 2, 4, 6한테 쏴야 되는데 2, 4, 6 중에서 1명은 이미 맞았잖아, 화살을. 그러니까 1:1이 되려면 1한테 화살 맞은 걔를 제외한 2가지.
<SYNC Start=2530018><P Class=KRCC>
4도 짝수니까 홀수 1, 3, 5한테 쏴야 되는데 1, 3, 5 중에서 2한테 1명 맞았으니까 걔를 제외한 2가지. 그래서 최종적인 답은 3×3×2×2가지라는 이야기예요. 이게 바로 함수의 특강.
<SYNC Start=2542730><P Class=KRCC>
함수의 개수는 무조건 누구랑 인터뷰한다? 시작. 화살을 쏘는 정의역에 있는 모든 원소한테 인터뷰한다. 그 느낌이면 얘도 쉬울 거야. 쉬울 거야. X가 1, 2, 3, 4, 5, 6인데요. 
<SYNC Start=2565803><P Class=KRCC>
X에서 X로의 함수의 개수 그랬으니까 정의역도 X고 공역도 X예요. X에서 X로의 함수의 개수를 이야기한다. 그런데 f(1). 얘 무슨 뜻? 1한테 화살 맞은 애랑 4한테 화살 맞은 애 더해서 4야. 
<SYNC Start=2585045><P Class=KRCC>
여러분 4의 약수 뭐 있어? 양의 약수밖에 안 되니까 어차피 1, 2, 4밖에 안 돼. 그런데 2개 더해서 1은 될 수 없잖아. 더해서 어떻게 1 되니? 다 1보다 크거나 같은데. 그러니까 뭐 아니면 뭐니? 시작.
<SYNC Start=2601521><P Class=KRCC>
2 아니면 4가 될 테니까 이렇게 보자고. f(1)이랑 f(4)랑 2개 더해서 뭐 아니면? 2 아니면 f(1)이랑 f(4)랑 더해서 뭐가 되면 돼요? 시작. 4가 되래요. 그러면 보자고.
<SYNC Start=2617746><P Class=KRCC>
여러분 어차피 첫 번째 f(1)이랑 f(4)랑 더해서 2가 되어야 되는데 f(1)이랑 f(4)가 될 수 있는 것은 1, 2, 3, 4, 5, 6 중에 하나니까 얘도 1, 2, 3, 4, 5, 6, 얘도 1, 2, 3, 4, 5, 6 중에 하나야.
<SYNC Start=2631002><P Class=KRCC>
2개 더해서 2 되는 거는 뭐밖에 없어? 얘도 1이고 얘도 1인 것밖에 없지. 그것밖에 없잖아요. 2개 더해서 4 되는 건 뭐 있어? 1, 3도 있고 2, 2도 있고 뭐도 있어? 3, 1도 있어. 이것밖에 없지.
<SYNC Start=2647011><P Class=KRCC>
그러니까 전체적으로 몇 가지로 분류하면 돼? 4가지로 분류하면 돼. 2가지가 아니라 4가지로 분류하시면 되지. 그렇게 이해해야 2개 더해서 2가 되는 경우는 1, 1 하나밖에 없지만 2개 더해서 4가 되는 경우는 1, 3도 있고
<SYNC Start=2666953><P Class=KRCC>
2, 2도 있고 3, 1도 있고. 그러니까 이렇게 4가지로 분류해서 각각의 경우의 수 구한 다음에 맨 마지막에 뭐해버리자? 더해버리자. 이렇게 생각하는 거지. 첫 번째부터 해볼까? f(1)이 1이고 f(4)가 1이래. 2개 다 1이래요.
<SYNC Start=2684409><P Class=KRCC>
이렇게 되는 함수의 개수를 지금부터 세는데 아직 화살 안 쏜 애들이 4명이 있으니까 4명이랑 인터뷰하면 돼. 아니면 1도 인터뷰하면 돼. 네가 선택할 수 있는 경우의 수 몇 가지밖에 없어, 지금?
<SYNC Start=2696906><P Class=KRCC>
1가지인데 1가지는 곱하나마나니까 이미 화살 쏜 1과 4를 제외한 얘네들이랑 인터뷰하시면 된다. 그런데 어떤 조건이 있느냐하면 화살 쏘는 애가 3보다 작거나 같을 때는 f(1)보다 그 함숫값이 언제나 작거나 같아야 돼.
<SYNC Start=2714465><P Class=KRCC>
그러니까 무슨 말이냐. 3보다 작거나 같은 x에 대해서는, 3보다 작거나 같으니까 1, 2, 3은 1은 이미 찾았으니까 2와 3은 누구한테 화살을 쏴야 되느냐. f(1)보다 작거나 같은 애.
<SYNC Start=2728919><P Class=KRCC>
얘보다 작거나 같은 애 누구밖에 없어? 1밖에 없으니까 2도 누구한테 쏴야 돼? 1한테 쏴야 되니까 2가 쏠 수 있는 경우의 수 1가지고 3이 쏠 수 있는 경우의 수도 1가지다 이거야.
<SYNC Start=2740225><P Class=KRCC>
그런데 3보다 큰 애들은 4는 이미 쐈으니까 5와 6은 f(4)보다 크거나 같은 애들한테. f(4)가 지금 1이니까 1, 2, 3, 4, 5, 6한테 쏠 수 있어. 그러니까 얘도 쏠 수 있는 애들은 1, 2, 3, 4, 5, 6. 6가지.
<SYNC Start=2758322><P Class=KRCC>
얘가 쏠 수 있는 경우의 수는 1, 2, 3, 4, 5, 6. 6가지. 그래서 몇 가지? 시작. 36가지가 있겠군요. 돼요? f(1)이 1이고 f(4)가 3인 경우. 이 경우도 해보세요. 다시 인터뷰. 누구랑? 화살 쏘는 애랑 인터뷰.
<SYNC Start=2786248><P Class=KRCC>
얘가 선택할 수 있는 경우의 수 몇 가지? 시작. 1가지니까 볼 필요 없어. 2, 3은 누구한테 쏘라고 그랬어? f(1)보다 작거나 같은 애들. 마찬가지로 1가지밖에 없잖아. 1한테밖에 못 쏘지.
<SYNC Start=2797744><P Class=KRCC>
그런데 5, 6은 f(4)보다 크거나 같은 거니까 3, 4, 5, 6. 그러니까 얘가 쏠 수 있는 경우의 수도 3, 4, 5, 6. 얘가 쏠 수 있는 경우의 수도 3, 4, 5, 6이다. 따라서 이럴 때의 가짓수는 1×1×4×4하니까 16가지. 
<SYNC Start=2814976><P Class=KRCC>
이번에는 f(1)도 2고 f(4)도 2. 둘 다 2한테 화살 쏘는 경우를 생각해봐. 마찬가지입니다. 2, 3은 누구한테 쏴야 돼? f(1). 2보다 작거나 같은 애니까 1 또는 2한테.
<SYNC Start=2830599><P Class=KRCC>
얘도 1 또는 2한테만 화살을 쏴야 되고 5, 6은 누구한테 쏴야 돼? f(4)보다 크거나 같은 거니까 2, 3, 4, 5, 6. 5가지 중에 하나. 2, 3, 4, 5, 6. 얘도 5가지 중에 하나. 다 곱하면 몇 가지? 시작. 100가지.
<SYNC Start=2849104><P Class=KRCC>
무슨 말인지 알아? 100가지. 마지막 f(1)이 3이고 f(3)이 1이다. 마찬가지야. 2와 3은 누구한테 쏴야 돼? f(1)보다 작거나 같으니까 3보다 작아. 1, 2, 3한테 쏠 수 있구나. 네가 선택할 수 있는 경우의 수는 3가지. 1, 2, 3.
<SYNC Start=2873167><P Class=KRCC>
너도 1, 2, 3. 3가지. 5, 6은 누구한테 쏴야 돼? f(4)보다 크거나 같은 경우. 엄청 많은데? 시작. 6가지, 6가지. 뭐 이렇게 많아요? 324가지. 18의 제곱이니까 324가지. 맨 마지막에 다 뭐한다? 더한다. 다 크네.
<SYNC Start=2890982><P Class=KRCC>
424+52. 424+52. 476. 그래서 답은 4번. 이런 느낌으로 처리하면 끝난다. 여기까지가 실력 완성 레벨 3까지였다. 순열까지는 여기서 마무리짓고요. 다음 시간에 중복조합에 대해서 아이스크림 이야기.
<SYNC Start=2912449><P Class=KRCC>
재밌습니다. 다음 시간에 이어가도록 하겠습니다. 수고 많이 하셨습니다. 여기까지입니다.
<SYNC Start=2918071><P Class=KRCC>
. 
</BODY>
</SAMI>
